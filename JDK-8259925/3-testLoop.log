    802  128    b        Bar::testLoop (98 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 128 ------------------------
{method}
 - this oop:          0x0000000115c01690
 - method holder:     'Bar'
 - constants:         0x0000000115c01068 constant pool [97]/operands[10] {0x0000000115c01068} for 'Bar' cache=0x0000000115c01940
 - access:            0xc1000009  public static 
 - name:              'testLoop'
 - signature:         '()V'
 - max stack:         6
 - max locals:        3
 - size of params:    0
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae00: 0x i2c: 0x000000010efe17e0 c2i: 0x000000010efe18c0 c2iUV: 0x000000010efe1886 c2iNCI: 0x000000010efe18fd
 - compiled entry     0x000000010efe18c0
 - code size:         98
 - code start:        0x0000000115c01618
 - code end (excl):   0x0000000115c0167a
 - method data:       0x0000000115c03a38
 - checked ex length: 0
 - linenumber start:  0x0000000115c0167a
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 128 -----------------------
#
#  void (  )
#
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B67 B66 B58 B65 B64 B12 B50 B48 B52 B59 B53 B51 B54 B63 B55 B62 B56 B61 B57 B60 )  Freq: 1

000     B1: #	out( B67 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (400 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

00c     movq    R11, java/lang/Class:exact *	# ptr
016     movl    R14, [R11 + #116 (8-bit)]	# compressed ptr ! Field: Bar.a
        nop 	# 6 bytes pad for loops and calls
020     movl    R10, [R12 + R14 << 3 + #12] (compressed oop addressing)	# range
025     NullCheck R14

025     B2: #	out( B49 B3 ) <- in( B1 )  Freq: 0.999999
025     movl    R9, [R11 + #124 (8-bit)]	# compressed ptr ! Field: Bar.c
029     movl    R8, [R11 + #120 (8-bit)]	# compressed ptr ! Field: Bar.b
02d     decode_heap_oop_not_null RAX,R14
031     # TLS is in R15
031     xorl    R13, R13	# int
034     cmpl    R10, #8
038     jl     B49  P=0.001043 C=6711.000000

03e     B3: #	out( B66 B4 ) <- in( B2 )  Freq: 0.998956
        nop 	# 2 bytes pad for loops and calls
040     movl    R11, [R12 + R8 << 3 + #12] (compressed oop addressing)	# range
045     NullCheck R8

045     B4: #	out( B66 B5 ) <- in( B3 )  Freq: 0.998955
045     movl    RBP, [R12 + R9 << 3 + #12] (compressed oop addressing)	# range
04a     NullCheck R9

04a     B5: #	out( B7 ) <- in( B4 )  Freq: 0.998954
04a     movl    RCX, R10	# spill
04d     addl    RCX, #-8	# int
050     decode_heap_oop_not_null RDX,R8
054     movdl   XMM0, R8	# spill
059     decode_heap_oop_not_null R8,R9
05d     movdl   XMM1, R9	# spill
062     movl    R9, RBP	# spill
065     addl    R9, #-8	# int
069     movdl   XMM3, R11	# spill
06e     addl    R11, #-8	# int
072     xorl    RBX, RBX	# int
074     jmp,s   B7
        nop 	# 10 bytes pad for loops and calls

080     B6: #	out( B7 ) <- in( B11 ) top-of-loop Freq: 954.929
080     movl    RBX, RDI	# spill

082     B7: #	out( B50 B8 ) <- in( B5 B6 ) Loop( B7-B6 inner partial_peel ) Freq: 955.928
082     cmpl    RBX, RCX
084     jg     B50  P=0.000000 C=6701.000000

08a     B8: #	out( B51 B9 ) <- in( B7 )  Freq: 955.927
08a     movslq  RDI, RBX	# i2l
08d     load_vector XMM2,[RAX + #16 + RDI << #2]
093     cmpl    RBX, R11
096     jg     B51  P=0.000000 C=6701.000000

09c     B9: #	out( B52 B10 ) <- in( B8 )  Freq: 955.927
09c     vpaddd  XMM2,XMM2,[RDX + #16 + RDI << #2]	! add packedI
0a2     cmpl    RBX, R9
0a5     jg     B52  P=0.000000 C=6701.000000

0ab     B10: #	out( B13 B11 ) <- in( B9 )  Freq: 955.926
0ab     store_vector [R8 + #16 + RDI << #2],XMM2
	
0b2     movq    RSI, [R15 + #304 (32-bit)]	# ptr
0b9     movl    RDI, RBX	# spill
0bb     addl    RDI, #8	# int
0be     testl   rax, [RSI]	# Safepoint: poll for GC        # Bar::testLoop @ bci:64 (line 17) L[0]=RDI L[1]=_ L[2]=_
        # OopMap {r8=Oop rdx=Oop rax=Oop r14=NarrowOop xmm0=NarrowOop xmm1=NarrowOop off=190/0xbe}
0c0     addl    RBX, #16	# int
0c3     cmpl    RBX, R10
0c6     jg,s   B13  P=0.001043 C=6704.000000

0c8     B11: #	out( B6 B12 ) <- in( B10 )  Freq: 954.929
0c8     testl   RDI, RDI
0ca     jge,s   B6  P=1.000000 C=6701.000000

0cc     B12: #	out( N1 ) <- in( B11 )  Freq: 0.000477465
0cc     movl    RSI, #-187	# int
0d1     movl    [rsp + #0], RDI	# spill
0d4     movl    [rsp + #4], R10	# spill
0d9     movl    [rsp + #8], RDI	# spill
0dd     movl    [rsp + #12], R14	# spill
        nop 	# 2 bytes pad for loops and calls
0e4     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:52 (line 76) L[0]=rsp + #8 L[1]=#8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #0
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=#Ptr0x00007fafd23a8f70 L[1]=rsp + #12 L[2]=_ L[3]=_
        # Bar::testLoop @ bci:26 (line 18) L[0]=rsp + #0 L[1]=_ L[2]=_
        # OopMap {[12]=NarrowOop off=236/0xec}
0ec     stop	# ShouldNotReachHere

100     B13: #	out( B14 ) <- in( B10 )  Freq: 0.997109
100     movdl   R9, XMM1	# spill
105     movdl   R8, XMM0	# spill

10a     B14: #	out( B48 B15 ) <- in( B13 B49 )  Freq: 0.998152
10a     cmpl    RDI, R10
10d     jge     B48  P=0.500000 C=-1.000000

113     B15: #	out( B53 B16 ) <- in( B14 )  Freq: 0.499076
113     cmpl    RDI, R10	# unsigned
116     jnb,u   B53  P=0.000001 C=-1.000000

11c     B16: #	out( B53 B17 ) <- in( B15 )  Freq: 0.499076
11c     movl    RSI, R10	# spill
11f     decl    RSI	# int
121     cmpl    RSI, R10	# unsigned
124     jnb,u   B53  P=0.000001 C=-1.000000

12a     B17: #	out( B53 B18 ) <- in( B16 )  Freq: 0.499075
12a     movl    RDX, [R12 + R8 << 3 + #12] (compressed oop addressing)	# range
12f     NullCheck R8

12f     B18: #	out( B53 B19 ) <- in( B17 )  Freq: 0.499074
12f     cmpl    RDI, RDX	# unsigned
131     jnb,u   B53  P=0.000001 C=-1.000000

137     B19: #	out( B53 B20 ) <- in( B18 )  Freq: 0.499074
137     cmpl    RSI, RDX	# unsigned
139     jnb,u   B53  P=0.000001 C=-1.000000

13f     B20: #	out( B53 B21 ) <- in( B19 )  Freq: 0.499073
        nop 	# 1 bytes pad for loops and calls
140     movl    RBP, [R12 + R9 << 3 + #12] (compressed oop addressing)	# range
145     NullCheck R9

145     B21: #	out( B53 B22 ) <- in( B20 )  Freq: 0.499073
145     cmpl    RDI, RBP	# unsigned
147     jnb,u   B53  P=0.000001 C=-1.000000

14d     B22: #	out( B53 B23 ) <- in( B21 )  Freq: 0.499072
14d     cmpl    RSI, RBP	# unsigned
14f     jnb,u   B53  P=0.000001 C=-1.000000

155     B23: #	out( B24 ) <- in( B22 )  Freq: 0.499072
155     decode_heap_oop_not_null RCX,R9
159     decode_heap_oop_not_null RBX,R8
15d     movl    R11, RCX	# ptr -> int
160     shrl    R11, #2
164     andl    R11, #7	# int
168     addl    R11, RDI	# int
16b     movl    R9, #3	# int
171     subl    R9, R11	# int
174     andl    R9, #7	# int
178     addl    R9, RDI	# int
17b     incl    R9	# int
17e     cmpl    R9, R10
181     cmovlgt R9, R10	# min
        nop 	# 3 bytes pad for loops and calls

188     B24: #	out( B24 B25 ) <- in( B23 B24 ) Loop( B24-B24 inner pre of N1644) Freq: 4.99072
188     movl    R11, [RBX + #16 + RDI << #2]	# int
18d     addl    R11, [RAX + #16 + RDI << #2]	# int
192     movl    [RCX + #16 + RDI << #2], R11	# int
197     incl    RDI	# int
199     cmpl    RDI, R9
19c     jl,s   B24	# loop end  P=0.900000 C=-1.000000

19e     B25: #	out( B45 B26 ) <- in( B24 )  Freq: 0.499072
19e     movl    R11, R10	# spill
1a1     addl    R11, #-31	# int
1a5     movl    R9, #-2147483648	# int
1ab     cmpl    RSI, R11
1ae     cmovll R11, R9	# signed, int
1b2     cmpl    RDI, R11
1b5     jge     B45  P=0.000001 C=-1.000000

1bb     B26: #	out( B54 B27 ) <- in( B25 )  Freq: 0.499071
1bb     # castII of RDI
1bb     cmpl    RDI, RBP	# unsigned
        nop 	# 3 bytes pad for loops and calls
1c0     jnb,u   B54  P=0.000001 C=-1.000000

1c6     B27: #	out( B55 B28 ) <- in( B26 )  Freq: 0.499071
1c6     cmpl    RDI, RBP	# unsigned
1c8     jnb,u   B55  P=0.000001 C=-1.000000

1ce     B28: #	out( B56 B29 ) <- in( B27 )  Freq: 0.49907
1ce     cmpl    RDI, RDX	# unsigned
1d0     jnb,u   B56  P=0.000001 C=-1.000000

1d6     B29: #	out( B57 B30 ) <- in( B28 )  Freq: 0.49907
1d6     cmpl    RDI, RDX	# unsigned
1d8     jnb,u   B57  P=0.000001 C=-1.000000

1de     B30: #	out( B58 B31 ) <- in( B29 )  Freq: 0.499069
        nop 	# 2 bytes pad for loops and calls
1e0     cmpl    RDI, R10	# unsigned
1e3     jnb,u   B58  P=0.000001 C=-1.000000

1e9     B31: #	out( B59 B32 ) <- in( B30 )  Freq: 0.499069
1e9     cmpl    RDI, R10	# unsigned
1ec     jnb,u   B59  P=0.000001 C=-1.000000

1f2     B32: #	out( B60 B33 ) <- in( B31 )  Freq: 0.499068
1f2     cmpl    RDI, R10	# unsigned
1f5     jnb,u   B60  P=0.000001 C=-1.000000

1fb     B33: #	out( B61 B34 ) <- in( B32 )  Freq: 0.499068
1fb     movl    R8, RDI	# spill
1fe     addl    R8, #31	# int
202     cmpl    R8, R10	# unsigned
205     jnb,u   B61  P=0.000001 C=-1.000000

20b     B34: #	out( B62 B35 ) <- in( B33 )  Freq: 0.499067
20b     cmpl    RDI, RDX	# unsigned
20d     jnb,u   B62  P=0.000001 C=-1.000000

213     B35: #	out( B63 B36 ) <- in( B34 )  Freq: 0.499067
213     cmpl    R8, RDX	# unsigned
216     jnb,u   B63  P=0.000001 C=-1.000000

21c     B36: #	out( B64 B37 ) <- in( B35 )  Freq: 0.499066
        nop 	# 4 bytes pad for loops and calls
220     cmpl    RDI, RBP	# unsigned
222     jnb,u   B64  P=0.000001 C=-1.000000

228     B37: #	out( B65 B38 ) <- in( B36 )  Freq: 0.499066
228     cmpl    R8, RBP	# unsigned
22b     jnb,u   B65  P=0.000001 C=-1.000000

231     B38: #	out( B39 ) <- in( B37 )  Freq: 0.499065
231     movl    RDX, #32000	# int

236     B39: #	out( B40 ) <- in( B38 B41 ) Loop( B39-B41 ) Freq: 4.99065
236     movl    RBP, R11	# spill
239     subl    RBP, RDI	# int
23b     cmpl    R11, RDI
23e     cmovll RBP, R13	# signed, int
242     cmpl    RBP, #32000	# unsigned
248     cmovlnbe RBP, RDX	# unsigned, int
24b     addl    RBP, RDI	# int
        nop 	# 3 bytes pad for loops and calls

250     B40: #	out( B40 B41 ) <- in( B39 B40 ) Loop( B40-B40 inner main of N257 strip mined) Freq: 49.9065
250     load_vector XMM0,[RBX + #16 + RDI << #2]
256     vpaddd  XMM0,XMM0,[RAX + #16 + RDI << #2]	! add packedI
25c     store_vector [RCX + #16 + RDI << #2],XMM0
	
262     movslq  R8, RDI	# i2l
265     load_vector XMM0,[RBX + #48 + R8 << #2]
26c     vpaddd  XMM0,XMM0,[RAX + #48 + R8 << #2]	! add packedI
273     store_vector [RCX + #48 + R8 << #2],XMM0
	
27a     load_vector XMM0,[RBX + #80 + R8 << #2]
281     vpaddd  XMM0,XMM0,[RAX + #80 + R8 << #2]	! add packedI
288     store_vector [RCX + #80 + R8 << #2],XMM0
	
28f     load_vector XMM0,[RBX + #112 + R8 << #2]
296     vpaddd  XMM0,XMM0,[RAX + #112 + R8 << #2]	! add packedI
29d     store_vector [RCX + #112 + R8 << #2],XMM0
	
2a4     addl    RDI, #32	# int
2a7     cmpl    RDI, RBP
2a9     jl,s   B40	# loop end  P=0.900000 C=-1.000000

2ab     B41: #	out( B39 B42 ) <- in( B40 )  Freq: 4.99065
2ab     movq    R8, [R15 + #304 (32-bit)]	# ptr
2b2     testl   rax, [R8]	# Safepoint: poll for GC        # Bar::testLoop @ bci:94 (line 23) L[0]=RDI L[1]=_ L[2]=_
        # OopMap {rcx=Oop rbx=Oop rax=Oop off=690/0x2b2}
2b5     cmpl    RDI, R11
2b8     jl     B39  P=0.900000 C=-1.000000

2be     B42: #	out( B45 B43 ) <- in( B41 )  Freq: 0.499065
2be     movl    R11, R10	# spill
2c1     addl    R11, #-7	# int
2c5     cmpl    RSI, R11
2c8     cmovll R11, R9	# signed, int
2cc     cmpl    RDI, R11
2cf     jge,s   B45  P=0.500000 C=-1.000000

2d1     B43: #	out( B44 ) <- in( B42 )  Freq: 0.249533
2d1     # castII of RDI
        nop 	# 3 bytes pad for loops and calls

2d4     B44: #	out( B44 B45 ) <- in( B43 B44 ) Loop( B44-B44 inner post of N2362) Freq: 2.49533
2d4     load_vector XMM0,[RBX + #16 + RDI << #2]
2da     vpaddd  XMM0,XMM0,[RAX + #16 + RDI << #2]	! add packedI
2e0     store_vector [RCX + #16 + RDI << #2],XMM0
	
2e6     addl    RDI, #8	# int
2e9     cmpl    RDI, R11
2ec     jl,s   B44	# loop end  P=0.900000 C=-1.000000

2ee     B45: #	out( B48 B46 ) <- in( B25 B44 B42 )  Freq: 0.499066
2ee     cmpl    RDI, R10
2f1     jge,s   B48  P=0.500000 C=-1.000000

2f3     B46: #	out( B47 ) <- in( B45 )  Freq: 0.249533
2f3     # castII of RDI
        nop 	# 1 bytes pad for loops and calls

2f4     B47: #	out( B47 B48 ) <- in( B46 B47 ) Loop( B47-B47 inner post of N1644) Freq: 2.49533
2f4     movl    R8, [RBX + #16 + RDI << #2]	# int
2f9     addl    R8, [RAX + #16 + RDI << #2]	# int
2fe     movl    [RCX + #16 + RDI << #2], R8	# int
303     incl    RDI	# int
305     cmpl    RDI, R10
308     jl,s   B47	# loop end  P=0.900000 C=-1.000000

30a     B48: #	out( N1 ) <- in( B47 B45 B14 )  Freq: 0.998142
30a     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

31f     ret

320     B49: #	out( B14 ) <- in( B2 )  Freq: 0.00104306
320     xorl    RDI, RDI	# int
322     jmp     B14

327     B50: #	out( N1 ) <- in( B7 )  Freq: 0.000455822
327     movl    RSI, #-187	# int
32c     movl    [rsp + #0], RBX	# spill
32f     movl    [rsp + #4], R10	# spill
334     movl    [rsp + #8], RBX	# spill
338     movl    [rsp + #12], RCX	# spill
33c     movl    [rsp + #16], R14	# spill
        nop 	# 3 bytes pad for loops and calls
344     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #8 L[1]=#8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #0 STK[1]=rsp + #12
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=#Ptr0x00007fafd23a8f70 L[1]=rsp + #16 L[2]=_ L[3]=_
        # Bar::testLoop @ bci:26 (line 18) L[0]=rsp + #0 L[1]=_ L[2]=_
        # OopMap {[16]=NarrowOop off=844/0x34c}
34c     stop	# ShouldNotReachHere

360     B51: #	out( N1 ) <- in( B8 )  Freq: 0.000455822
360     movl    RSI, #-187	# int
365     movl    [rsp + #0], RBX	# spill
368     movl    [rsp + #4], RBX	# spill
36c     movl    [rsp + #8], R11	# spill
371     vmovdqu [rsp + 32],XMM2	# spill
377     movss   [rsp + #12], XMM0	# spill
37d     movss   [rsp + #16], XMM3	# spill
        nop 	# 1 bytes pad for loops and calls
384     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #4 L[1]=#8 L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #0 STK[1]=rsp + #8
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=#Ptr0x00007fafd23a8f70 L[1]=rsp + #12 L[2]=_ L[3]=_
        # Bar::testLoop @ bci:37 (line 19) L[0]=rsp + #0 L[1]=#ScObj0 L[2]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #32 }
        # OopMap {[12]=NarrowOop off=908/0x38c}
38c     stop	# ShouldNotReachHere

3a0     B52: #	out( N1 ) <- in( B9 )  Freq: 0.000455821
3a0     movl    RSI, #-187	# int
3a5     movl    [rsp + #4], RBX	# spill
3a9     movl    [rsp + #8], RBX	# spill
3ad     movl    [rsp + #12], R9	# spill
3b2     vmovdqu [rsp + 32],XMM2	# spill
3b8     movss   [rsp + #16], XMM1	# spill
        nop 	# 2 bytes pad for loops and calls
3c0     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #8 L[1]=#8 L[2]=RBP L[3]=_ STK[0]=rsp + #4 STK[1]=rsp + #12
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=#ScObj0 L[1]=rsp + #16 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #32 }
        # Bar::testLoop @ bci:50 (line 20) L[0]=rsp + #4 L[1]=_ L[2]=_
        # OopMap {[16]=NarrowOop off=968/0x3c8}
3c8     stop	# ShouldNotReachHere

3dc     B53: #	out( N1 ) <- in( B22 B15 B16 B20 B21 B17 B18 B19 )  Freq: 4.04561e-06
3dc     movl    RSI, #-138	# int
3e1     movl    [rsp + #0], RDI	# spill
3e4     movl    [rsp + #4], R10	# spill
        nop 	# 3 bytes pad for loops and calls
3ec     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # Bar::testLoop @ bci:72 (line 23) L[0]=rsp + #0 L[1]=_ L[2]=_ STK[0]=rsp + #0 STK[1]=rsp + #4
        # OopMap {off=1012/0x3f4}
3f4     stop	# ShouldNotReachHere

408     B54: #	out( N1 ) <- in( B26 )  Freq: 5.05699e-07
408     stop	# ShouldNotReachHere

41c     B55: #	out( N1 ) <- in( B27 )  Freq: 5.05698e-07
41c     stop	# ShouldNotReachHere

430     B56: #	out( N1 ) <- in( B28 )  Freq: 5.05698e-07
430     stop	# ShouldNotReachHere

444     B57: #	out( N1 ) <- in( B29 )  Freq: 5.05697e-07
444     stop	# ShouldNotReachHere

458     B58: #	out( N1 ) <- in( B30 )  Freq: 5.05697e-07
458     stop	# ShouldNotReachHere

46c     B59: #	out( N1 ) <- in( B31 )  Freq: 5.05696e-07
46c     stop	# ShouldNotReachHere

480     B60: #	out( N1 ) <- in( B32 )  Freq: 5.05696e-07
480     stop	# ShouldNotReachHere

494     B61: #	out( N1 ) <- in( B33 )  Freq: 5.05695e-07
494     stop	# ShouldNotReachHere

4a8     B62: #	out( N1 ) <- in( B34 )  Freq: 5.05695e-07
4a8     stop	# ShouldNotReachHere

4bc     B63: #	out( N1 ) <- in( B35 )  Freq: 5.05694e-07
4bc     stop	# ShouldNotReachHere

4d0     B64: #	out( N1 ) <- in( B36 )  Freq: 5.05693e-07
4d0     stop	# ShouldNotReachHere

4e4     B65: #	out( N1 ) <- in( B37 )  Freq: 5.05693e-07
4e4     stop	# ShouldNotReachHere

4f8     B66: #	out( N1 ) <- in( B4 B3 )  Freq: 2.02444e-06
4f8     movl    RSI, #-138	# int
4fd     movl    RBP, R10	# spill
500     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # Bar::testLoop @ bci:16 (line 17) L[0]=#0 L[1]=_ L[2]=_ STK[0]=#8 STK[1]=RBP
        # OopMap {off=1288/0x508}
508     stop	# ShouldNotReachHere

51c     B67: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
51c     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
524     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # Bar::testLoop @ bci:15 (line 17) L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=1324/0x52c}
52c     stop	# ShouldNotReachHere

