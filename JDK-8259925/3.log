     91    1     n       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLL)L (native)   (static)
     92    2     n       java.lang.invoke.MethodHandle::linkToStatic(LL)I (native)   (static)
     93    3     n       java.lang.invoke.MethodHandle::invokeBasic(LLLLLL)L (native)   
     93    4     n       java.lang.invoke.MethodHandle::linkToSpecial(LLLLLLLL)L (native)   (static)
     96    5     n       java.lang.invoke.MethodHandle::linkToStatic(LLL)L (native)   (static)
     96    6     n       java.lang.invoke.MethodHandle::linkToStatic(LLLL)L (native)   (static)
    100    7     n       java.lang.invoke.MethodHandle::invokeBasic()L (native)   
    100    8     n       java.lang.invoke.MethodHandle::linkToSpecial(LL)L (native)   (static)
    101    9     n       java.lang.invoke.MethodHandle::linkToStatic(LLL)I (native)   (static)
    102   10     n       java.lang.invoke.MethodHandle::linkToSpecial(LLL)V (native)   (static)
    102   11     n       java.lang.invoke.MethodHandle::invokeBasic(L)L (native)   
    102   12     n       java.lang.invoke.MethodHandle::linkToSpecial(LLL)L (native)   (static)
    102   13     n       java.lang.invoke.MethodHandle::linkToVirtual(LL)L (native)   (static)
    103   14     n       java.lang.invoke.MethodHandle::linkToSpecial(LL)V (native)   (static)
    103   15     n       java.lang.invoke.MethodHandle::linkToInterface(LLL)I (native)   (static)
    104   16     n       java.lang.invoke.MethodHandle::linkToStatic(LL)L (native)   (static)
    105   17     n       java.lang.invoke.MethodHandle::linkToSpecial(LL)I (native)   (static)
    115   18    b        java.util.ImmutableCollections$SetN$SetNIterator::next (90 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 18 ------------------------
{method}
 - this oop:          0x000000080019d2b0
 - method holder:     'java/util/ImmutableCollections$SetN$SetNIterator'
 - constants:         0x00000008007daac8 constant pool [70] {0x00000008007daac8} for 'java/util/ImmutableCollections$SetN$SetNIterator' cache=0x000000080019cc30
 - access:            0xc1000001  public 
 - name:              'next'
 - signature:         '()Ljava/lang/Object;'
 - max stack:         4
 - max locals:        4
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a80: 0xb0000000 i2c: 0x000000010f027060 c2i: 0x000000010f02711e c2iUV: 0x000000010f0270e4 c2iNCI: 0x000000010f02715b
 - compiled entry     0x0000000800000280
 - code size:         90
 - code start:        0x00000008007dae90
 - code end (excl):   0x00000008007daeea
 - method data:       0x0000000115830e58
 - checked ex length: 0
 - linenumber start:  0x00000008007daeea
 - localvar length:   4
 - localvar start:    0x00000008007daefc

------------------------ OptoAssembly for Compile_id = 18 -----------------------
#
#  java/lang/Object * ( java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N121: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B11 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    RBX, RSI	# spill
02f     movl    RDI, [RSI + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining
032     testl   RDI, RDI
034     jle     B11  P=0.000000 C=3402.000000

03a     B2: #	out( B12 B3 ) <- in( B1 )  Freq: 1
03a     movl    R11, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/util/ImmutableCollections$SetN$SetNIterator.this$0
        nop 	# 2 bytes pad for loops and calls
040     movl    RBP, [R12 + R11 << 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/ImmutableCollections$SetN.elements (constant)
045     NullCheck R11

045     B3: #	out( B13 B4 ) <- in( B2 )  Freq: 0.999999
045     movl    R11, [R12 + RBP << 3 + #12] (compressed oop addressing)	# range
04a     NullCheck RBP

04a     B4: #	out( B5 ) <- in( B3 )  Freq: 0.999997
04a     movl    R10, [RSI + #16 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
04e     decode_heap_oop_not_null R8,RBP
052     # TLS is in R15

052     B5: #	out( B9 B6 ) <- in( B4 B7 ) Loop( B5-B7 inner ) Freq: 1.96884
052     incl    R10	# int
055     cmpl    R10, R11
058     jge,s   B9  P=0.008507 C=6700.000000

05a     B6: #	out( B10 B7 ) <- in( B5 B9 )  Freq: 1.96884
        nop 	# 6 bytes pad for loops and calls
060     cmpl    R10, R11	# unsigned
063     jnb,us  B10  P=0.000001 C=-1.000000

065     B7: #	out( B5 B8 ) <- in( B6 )  Freq: 1.96884
065     movl    R9, [R8 + #16 + R10 << #2]	# compressed ptr
06a     movq    RCX, [R15 + #304 (32-bit)]	# ptr
071     testl   rax, [RCX]	# Safepoint: poll for GC        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:62 (line 976) L[0]=RBX L[1]=R9 L[2]=R10 L[3]=R11 STK[0]=R9
        # OopMap {r8=Oop r9=NarrowOop rbx=Oop rbp=NarrowOop off=113/0x71}
073     testl   R9, R9	# compressed ptr
076     je,s   B5  P=0.492090 C=6700.000000

078     B8: #	out( N121 ) <- in( B7 )  Freq: 0.999996
078     movl    [RBX + #16 (8-bit)], R10	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
07c     decl    RDI	# int
07e     movl    [RBX + #12 (8-bit)], RDI	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining
081     decode_heap_oop_not_null RAX,R9
085     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

097     ret

098     B9: #	out( B6 ) <- in( B5 )  Freq: 0.0167499
098     xorl    R10, R10	# int
09b     jmp,s   B6

09d     B10: #	out( N121 ) <- in( B6 )  Freq: 1.99499e-06
09d     movl    RSI, #-28	# int
0a2     movl    [rsp + #4], R11	# spill
0a7     movl    [rsp + #8], R10	# spill
0ac     movq    [rsp + #16], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
0b3     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:59 (line 976) L[0]=rsp + #16 L[1]=_ L[2]=rsp + #8 L[3]=rsp + #4 STK[0]=RBP STK[1]=rsp + #8
        # OopMap {rbp=NarrowOop [16]=Oop off=184/0xb8}
0b8     stop	# ShouldNotReachHere

0cc     B11: #	out( N121 ) <- in( B1 )  Freq: 5e-07
0cc     movl    RSI, #-187	# int
0d1     movq    RBP, RBX	# spill
0d4     movl    [rsp + #0], RDI	# spill
0d7     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:4 (line 961) L[0]=RBP L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0
        # OopMap {rbp=Oop off=220/0xdc}
0dc     stop	# ShouldNotReachHere

0f0     B12: #	out( N121 ) <- in( B2 )  Freq: 1.01328e-06
0f0     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
0f7     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:16 (line 964) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap {off=252/0xfc}
0fc     stop	# ShouldNotReachHere

110     B13: #	out( N121 ) <- in( B3 )  Freq: 1.01328e-06
110     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
117     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:19 (line 964) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap {off=284/0x11c}
11c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    121   19    b        java.lang.Object::<init> (1 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 19 ------------------------
{method}
 - this oop:          0x0000000800485ee8
 - method holder:     'java/lang/Object'
 - constants:         0x000000080061c868 constant pool [92] {0x000000080061c868} for 'java/lang/Object' cache=0x0000000800485fa0
 - access:            0x81000001  public 
 - name:              '<init>'
 - signature:         '()V'
 - max stack:         1
 - max locals:        1
 - size of params:    1
 - method size:       13
 - intrinsic id:      334 _Object_init
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034670: 0xb0000000 i2c: 0x000000010f020e60 c2i: 0x000000010f020f1e c2iUV: 0x000000010f020ee4 c2iNCI: 0x000000010f020f5b
 - compiled entry     0x0000000800000310
 - code size:         1
 - code start:        0x0000000800bdc268
 - code end (excl):   0x0000000800bdc269
 - method data:       0x000000011582b010
 - checked ex length: 0
 - linenumber start:  0x0000000800bdc269
 - localvar length:   1
 - localvar start:    0x0000000800bdc272

------------------------ OptoAssembly for Compile_id = 19 -----------------------
#
#  void ( java/lang/Object:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/lang/Object:NotNull *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N14: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N14 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

03e     ret

--------------------------------------------------------------------------------
    125   20    b        java.util.HashMap::resize (356 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 20 ------------------------
{method}
 - this oop:          0x00000008003ae9d0
 - method holder:     'java/util/HashMap'
 - constants:         0x000000080074f078 constant pool [593] {0x000000080074f078} for 'java/util/HashMap' cache=0x00000008003af188
 - access:            0xc1000010  final 
 - name:              'resize'
 - signature:         '()[Ljava/util/HashMap$Node;'
 - max stack:         6
 - max locals:        14
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a80: 0xb0000000 i2c: 0x000000010f027060 c2i: 0x000000010f02711e c2iUV: 0x000000010f0270e4 c2iNCI: 0x000000010f02715b
 - compiled entry     0x0000000800000280
 - code size:         356
 - code start:        0x0000000800a99f08
 - code end (excl):   0x0000000800a9a06c
 - method data:       0x00000001158312d0
 - checked ex length: 0
 - linenumber start:  0x0000000800a9a06c
 - localvar length:   17
 - localvar start:    0x0000000800a9a0a8

------------------------ OptoAssembly for Compile_id = 20 -----------------------
#
#  narrowoop: java/util/HashMap$Node *[int:>=0] * ( java/util/HashMap:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap:NotNull *
# -- Old rsp -- Framesize: 128 --
#r583 rsp+124: in_preserve
#r582 rsp+120: return address
#r581 rsp+116: in_preserve
#r580 rsp+112: saved fp register
#r579 rsp+108: pad2, stack alignment
#r578 rsp+104: pad2, stack alignment
#r577 rsp+100: Fixed slot 1
#r576 rsp+96: Fixed slot 0
#r607 rsp+92: spill
#r606 rsp+88: spill
#r605 rsp+84: spill
#r604 rsp+80: spill
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1957: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (248 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c     movq    [rsp + #32], RSI	# spill
031     movl    R10, [RSI + #36 (8-bit)]	# compressed ptr ! Field: java/util/HashMap.table
035     testl   R10, R10	# compressed ptr
038     jne,s   B3  P=0.614583 C=192.000000

03a     B2: #	out( B4 ) <- in( B1 )  Freq: 0.385417
03a     xorl    RBX, RBX	# int
03c     xorl    R13, R13	# ptr
        nop 	# 1 bytes pad for loops and calls
040     jmp,s   B4

042     B3: #	out( B4 ) <- in( B1 )  Freq: 0.614583
042     movl    RBX, [R12 + R10 << 3 + #12] (compressed oop addressing)	# range
047     decode_heap_oop_not_null R13,R10

04b     B4: #	out( B7 B5 ) <- in( B3 B2 )  Freq: 1
04b     movl    RBP, [RSI + #28 (8-bit)]	# int ! Field: java/util/HashMap.threshold
04e     testl   RBX, RBX
050     jg,s   B7  P=0.614583 C=192.000000

052     B5: #	out( B138 B6 ) <- in( B4 )  Freq: 0.385417
052     testl   RBP, RBP
054     jg     B138  P=0.000000 C=74.000000

05a     B6: #	out( B10 ) <- in( B5 )  Freq: 0.385416
05a     movl    RBP, #12	# int
05f     movl    R14, #16	# int
065     jmp,s   B10

067     B7: #	out( B136 B8 ) <- in( B4 )  Freq: 0.614583
067     movl    R14, RBX	# spill
06a     sall    R14, #1
06d     cmpl    R14, #1073741824
074     jge     B136  P=0.000000 C=118.000000

07a     B8: #	out( B137 B9 ) <- in( B7 )  Freq: 0.614583
07a     movl    R10, RBX	# spill
07d     addl    R10, #-16	# int
081     cmpl    R10, #1073741808	# unsigned
088     jnb,u   B137  P=0.000000 C=118.000000

08e     B9: #	out( B10 ) <- in( B8 )  Freq: 0.614583
08e     sall    RBP, #1

090     B10: #	out( B135 B11 ) <- in( B9 B6 )  Freq: 0.999999
090     testl   RBP, RBP
092     je     B135  P=0.000000 C=192.000000

098     B11: #	out( B130 B12 ) <- in( B10 )  Freq: 0.999999
        nop 	# 8 bytes pad for loops and calls
0a0     cmpl    R14, #262144	# unsigned
0a7     jnbe,u   B130  P=0.000001 C=-1.000000

0ad     B12: #	out( B13 ) <- in( B11 )  Freq: 0.999998
0ad     movslq  RCX, R14	# i2l

0b0     B13: #	out( B118 B14 ) <- in( B12 B130 )  Freq: 0.999999
0b0     movl    [RSI + #28 (8-bit)], RBP	# int ! Field: java/util/HashMap.threshold
        nop 	# 13 bytes pad for loops and calls
0c0     cmpl    R14, #262144	# unsigned
0c7     jnbe,u   B118  P=0.000001 C=-1.000000

0cd     B14: #	out( B118 B15 ) <- in( B13 )  Freq: 0.999998
0cd     # TLS is in R15
0cd     movq    R8, [R15 + #328 (32-bit)]	# ptr
0d4     salq    RCX, #2
0d8     addq    RCX, #23	# long
0dc     movq    R10, RCX	# spill
0df     andq    R10, #-8	# long
0e3     movq    R11, R8	# spill
0e6     addq    R11, R10	# ptr
0e9     # TLS is in R15
0e9     cmpq    R11, [R15 + #344 (32-bit)]	# raw ptr
0f0     jnb,u   B118  P=0.000100 C=-1.000000

0f6     B15: #	out( B16 ) <- in( B14 )  Freq: 0.999898
0f6     # TLS is in R15
0f6     movq    [R15 + #328 (32-bit)], R11	# ptr
0fd     PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
105     movq    [R8], #1	# long
10c     PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
114     movl    [R8 + #8 (8-bit)], narrowklass: precise klass [Ljava/util/HashMap$Node;: 0x00007fafd07b3de0:Constant:exact *	# compressed klass ptr
11c     movl    [R8 + #12 (8-bit)], R14	# int
120     PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
128     movq    RDI, R8	# spill
12b     addq    RDI, #16	# ptr
12f     PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
137     shrq    RCX, #3
13b     addq    RCX, #-2	# long
13f     xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	mov     rdi,rax
	vpxor   ymm0,ymm0,ymm0
	jmpq    L_zero_64_bytes
	# L_loop:	# 64-byte LOOP
	vmovdqu ymm0,(rax)
	vmovdqu ymm0,0x20(rax)
	add     0x40,rax
	# L_zero_64_bytes:
	sub     0x8,rcx
	jge     L_loop
	add     0x4,rcx
	jl      L_tail
	vmovdqu ymm0,(rax)
	add     0x20,rax
	sub     0x4,rcx
	# L_tail:	# Clearing tail bytes
	add     0x4,rcx
	jle     L_end
	dec     rcx
	# L_sloop:	# 8-byte short loop
	vmovq   xmm0,(rax)
	add     0x8,rax
	dec     rcx
	jge     L_sloop
	# L_end:
	# DONE

19c     B16: #	out( B111 B17 ) <- in( B119 B15 )  Freq: 0.999999
19c     
19c     MEMBAR-storestore (empty encoding)
19c     # checkcastPP of R8
19c     movq    [rsp + #16], R8	# spill
1a1     # TLS is in R15
1a1     cmpb    [R15 + #56 (8-bit)], #0
1a6     jne     B111  P=0.001000 C=-1.000000

1ac     B17: #	out( B19 B18 ) <- in( B134 B113 B111 B16 )  Freq: 0.999999
1ac     movq    R10, [rsp + #16]	# spill
1b1     encode_heap_oop_not_null R10,R10
1f7     movq    R11, [rsp + #32]	# spill
1fc     movl    [R11 + #36 (8-bit)], R10	# compressed ptr ! Field: java/util/HashMap.table
200     movq    R10, [rsp + #16]	# spill
205     movq    R10, R10	# ptr -> long
205     movq    R11, R11	# ptr -> long
205     xorq    R10, R11	# long
208     shrq    R10, #21
20c     testq   R10, R10
20f     je,s   B19  P=0.001000 C=-1.000000

211     B18: #	out( B114 B19 ) <- in( B17 )  Freq: 0.998999
211     shrq    R11, #9
215     movq    RDI, 0x000000010ef09000	# ptr
21f     addq    RDI, R11	# ptr
222     cmpb    [RDI], #4
225     jne     B114  P=0.001000 C=-1.000000

22b     B19: #	out( B21 B20 ) <- in( B116 B117 B114 B18 B17 )  Freq: 0.999999
22b     testq   R13, R13	# ptr
22e     jne,s   B21  P=0.614583 C=192.000000

230     B20: #	out( N1957 ) <- in( B28 B21 B19 )  Freq: 0.999983
230     movq    RAX, [rsp + #16]	# spill
235     addq    rsp, 112	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

247     ret

248     B21: #	out( B20 B22 ) <- in( B19 )  Freq: 0.614583
248     testl   RBX, RBX
24a     jle,s   B20  P=0.022436 C=5304.000000

24c     B22: #	out( B132 B23 ) <- in( B21 )  Freq: 0.600794
24c     movl    R10, [R13 + #12 (8-bit)]	# range
250     # castII of R14
250     movl    [rsp + #40], R14	# spill
255     testl   R10, R10	# unsigned
258     jbe,u   B132  P=0.000001 C=-1.000000

25e     B23: #	out( B132 B24 ) <- in( B22 )  Freq: 0.600793
25e     movl    R11, RBX	# spill
261     decl    R11	# int
264     cmpl    R11, R10	# unsigned
267     jnb,u   B132  P=0.000001 C=-1.000000

26d     B24: #	out( B133 B25 ) <- in( B23 )  Freq: 0.600793
26d     testl   R14, R14
270     jle     B133  P=0.000001 C=-1.000000

276     B25: #	out( B29 ) <- in( B24 )  Freq: 0.600792
276     movl    R11, R14	# spill
279     decl    R11	# int
27c     movl    [rsp + #44], R11	# spill
281     movslq  R14, RBX	# i2l
284     xorl    R10, R10	# int
287     jmp,s   B29

289     B26: #	out( B27 ) <- in( B38 )  Freq: 0.00207918
289     movl    R14, RBX	# spill
28c     movl    RBP, R10	# spill
28f     # TLS is in R15
28f     movq    RSI, R15	# spill
292     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
29f     movl    R10, RBP	# spill
2a2     movl    RBX, R14	# spill

2a5     B27: #	out( B28 ) <- in( B26 B39 B37 B36 B35 ) top-of-loop Freq: 8.32505
2a5     movq    R14, [rsp + #64]	# spill

2aa     B28: #	out( B20 B29 ) <- in( B29 B67 B79 B27 )  Freq: 26.7775
2aa     # TLS is in R15
2aa     movq    R11, [R15 + #304 (32-bit)]	# ptr
2b1     incl    R10	# int
2b4     testl   rax, [R11]	# Safepoint: poll for GC        # java.util.HashMap::resize @ bci:350 (line 707) L[0]=rsp + #32 L[1]=R13 L[2]=RBX L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=rsp + #16 L[7]=R10 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_
        # OopMap {r13=Oop [16]=Oop [32]=Oop off=692/0x2b4}
2b7     cmpl    R10, RBX
        nop 	# 6 bytes pad for loops and calls
2c0     jge     B20	# loop end  P=0.022436 C=5185.000000

2c6     B29: #	out( B28 B30 ) <- in( B25 B28 ) Loop( B29-B28 ) Freq: 26.7775
2c6     movslq  RBP, R10	# i2l
2c9     movl    R9, [R13 + #16 + RBP << #2]	# compressed ptr
2ce     testl   R9, R9	# compressed ptr
2d1     je,s   B28  P=0.489296 C=5185.000000

2d3     B30: #	out( B80 B31 ) <- in( B29 )  Freq: 13.6754
2d3     # TLS is in R15
2d3     cmpb    [R15 + #56 (8-bit)], #0
2d8     jne     B80  P=0.001000 C=-1.000000

2de     B31: #	out( B34 B32 ) <- in( B120 B81 B30 )  Freq: 13.6754
2de     movq    [rsp + #64], R14	# spill
2e3     movl    [R13 + #16 + RBP << #2], R12	# compressed ptr (R12_heapbase==0)
2e8     movq    [rsp + #72], RBP	# spill
2ed     movl    RBP, [R12 + R9 << 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
2f2     movl    R11, [R12 + R9 << 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
2f7     decode_heap_oop_not_null RCX,R9
2fb     encode_heap_oop_not_null R14,RCX
344     movl    [rsp + #80], R14	# spill
349     testl   RBP, RBP	# compressed ptr
34b     je,s   B34  P=0.608761 C=2648.000000

34d     B32: #	out( B121 B33 ) <- in( B31 )  Freq: 5.35034
34d     movl    R8, [R12 + R9 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
        nop 	# 14 bytes pad for loops and calls
360     cmpl    R8, narrowklass: precise klass java/util/HashMap$TreeNode: 0x00007fafd07e9860:Constant:exact *	# compressed klass ptr
367     je,u   B121  P=0.000001 C=-1.000000

36d     B33: #	out( B69 ) <- in( B32 )  Freq: 5.35034
36d     movq    [rsp + #24], RCX	# spill
372     movq    [rsp + #8], R13	# spill
377     movl    [rsp + #4], RBX	# spill
37b     movl    [rsp + #0], R10	# spill
37f     xorl    R13, R13	# ptr
382     xorl    RBX, RBX	# ptr
384     xorl    R8, R8	# ptr
387     xorl    R10, R10	# ptr
38a     movq    [rsp + #56], R8	# spill
38f     movq    [rsp + #48], R10	# spill
394     jmp     B69

399     B34: #	out( B82 B35 ) <- in( B31 )  Freq: 8.32505
399     movl    R9, [rsp + #44]	# spill
39e     andl    R9, R11	# int
3a1     movq    R11, [rsp + #16]	# spill
3a6     leaq    RBP, [R11 + #16 + R9 << #2]	# ptr posidxscaleoff
3ab     # TLS is in R15
3ab     cmpb    [R15 + #56 (8-bit)], #0
3b0     jne     B82  P=0.001000 C=-1.000000

3b6     B35: #	out( B27 B36 ) <- in( B123 B84 B82 B34 )  Freq: 8.32505
3b6     movl    R14, [rsp + #80]	# spill
3bb     movl    [RBP], R14	# compressed ptr
3bf     movq    R11, RCX	# ptr -> long
3c2     movq    R8, RBP	# ptr -> long
3c5     xorq    R11, R8	# long
3c8     shrq    R11, #21
3cc     testq   R11, R11
3cf     je     B27  P=0.001000 C=-1.000000

3d5     B36: #	out( B27 B37 ) <- in( B35 )  Freq: 8.31673
3d5     shrq    R8, #9
3d9     movq    RDI, 0x000000010ef09000	# ptr
3e3     addq    RDI, R8	# ptr
3e6     cmpb    [RDI], #4
3e9     je     B27  P=0.999000 C=-1.000000

3ef     B37: #	out( B27 B38 ) <- in( B36 )  Freq: 0.00831673
3ef     # TLS is in R15
3ef     movq    R11, [R15 + #80 (8-bit)]	# ptr
3f3     # TLS is in R15
3f3     movq    R8, [R15 + #64 (8-bit)]	# long
3f7     lock addl [rsp + #0], 0	! membar_volatile
        nop 	# 3 bytes pad for loops and calls
400     cmpb    [RDI], #0
403     je     B27  P=0.500000 C=-1.000000

409     B38: #	out( B26 B39 ) <- in( B37 )  Freq: 0.00415836
409     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
40c     testq   R8, R8
40f     je     B26  P=0.500000 C=-1.000000

415     B39: #	out( B27 ) <- in( B38 )  Freq: 0.00207918
415     movq    [R11 + #-8 + R8], RDI	# ptr
41a     addq    R8, #-8	# long
41e     # TLS is in R15
41e     movq    [R15 + #64 (8-bit)], R8	# long
422     jmp     B27

427     B40: #	out( B49 B41 ) <- in( B69 )  Freq: 5.83063
427     testq   RBX, RBX	# ptr
42a     je     B49  P=0.702392 C=1129.000000

430     B41: #	out( B108 B42 ) <- in( B40 )  Freq: 1.73524
430     # TLS is in R15
430     cmpb    [R15 + #56 (8-bit)], #0
435     jne     B108  P=0.001000 C=-1.000000

43b     B42: #	out( B50 B43 ) <- in( B131 B110 B108 B41 )  Freq: 1.73524
43b     movl    R14, [rsp + #80]	# spill
440     movl    [RBX + #24 (8-bit)], R14	# compressed ptr ! Field: java/util/HashMap$Node.next
444     movq    R11, [rsp + #24]	# spill
449     movq    R10, R11	# ptr -> long
44c     movq    R8, RBX	# ptr -> long
44f     xorq    R10, R8	# long
452     shrq    R10, #21
456     testq   R10, R10
459     je     B50  P=0.001000 C=-1.000000

45f     B43: #	out( B50 B44 ) <- in( B42 )  Freq: 1.73351
45f     shrq    R8, #9
463     movq    RDI, 0x000000010ef09000	# ptr
46d     addq    RDI, R8	# ptr
470     cmpb    [RDI], #4
473     je     B50  P=0.999000 C=-1.000000

479     B44: #	out( B48 B45 ) <- in( B43 )  Freq: 0.00173351
479     # TLS is in R15
479     movq    R10, [R15 + #80 (8-bit)]	# ptr
47d     # TLS is in R15
47d     movq    R11, [R15 + #64 (8-bit)]	# long
481     lock addl [rsp + #0], 0	! membar_volatile
487     cmpb    [RDI], #0
48a     je,s   B48  P=0.500000 C=-1.000000

48c     B45: #	out( B47 B46 ) <- in( B44 )  Freq: 0.000866755
48c     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
48f     testq   R11, R11
492     je,s   B47  P=0.500000 C=-1.000000

494     B46: #	out( B48 ) <- in( B45 )  Freq: 0.000433377
494     movq    [R10 + #-8 + R11], RDI	# ptr
499     addq    R11, #-8	# long
49d     # TLS is in R15
49d     movq    [R15 + #64 (8-bit)], R11	# long
4a1     jmp,s   B48

4a3     B47: #	out( B48 ) <- in( B45 )  Freq: 0.000433377
4a3     # TLS is in R15
4a3     movq    RSI, R15	# spill
4a6     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 

4b3     B48: #	out( B50 ) <- in( B47 B46 B44 )  Freq: 0.00173351
4b3     movq    R11, [rsp + #24]	# spill
4b8     jmp,s   B50

4ba     B49: #	out( B50 ) <- in( B40 )  Freq: 4.09538
4ba     movq    R10, [rsp + #24]	# spill
4bf     movq    [rsp + #56], R10	# spill
4c4     movq    R11, [rsp + #24]	# spill

4c9     B50: #	out( B51 ) <- in( B48 B43 B42 B49 )  Freq: 5.83063
4c9     movq    RBX, R11	# spill
4cc     movq    R14, R13	# spill

4cf     B51: #	out( B68 B52 ) <- in( B76 B77 B74 B73 B72 B78 B50 )  Freq: 12.3791
4cf     # TLS is in R15
4cf     movq    R10, [R15 + #304 (32-bit)]	# ptr
4d6     testl   rax, [R10]	# Safepoint: poll for GC        # java.util.HashMap::resize @ bci:306 (line 735) L[0]=rsp + #32 L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=rsp + #16 L[7]=rsp + #0 L[8]=RBP L[9]=rsp + #56 L[10]=RBX L[11]=rsp + #48 L[12]=R14 L[13]=_ STK[0]=RBP
        # OopMap {rbx=Oop rbp=NarrowOop r14=Oop [8]=Oop [16]=Oop [32]=Oop [48]=Oop [56]=Oop off=1238/0x4d6}
4d9     testl   RBP, RBP	# compressed ptr
        nop 	# 5 bytes pad for loops and calls
4e0     jne     B68  P=0.567793 C=2397.000000

4e6     B52: #	out( B54 B53 ) <- in( B51 )  Freq: 5.35034
4e6     testq   RBX, RBX	# ptr
4e9     jne,s   B54  P=0.765444 C=1036.000000

4eb     B53: #	out( B60 ) <- in( B52 )  Freq: 1.25495
4eb     movl    R10, [rsp + #0]	# spill
4ef     movq    RBX, [rsp + #72]	# spill
4f4     jmp     B60

4f9     B54: #	out( B95 B55 ) <- in( B52 )  Freq: 4.09538
4f9     # TLS is in R15
        nop 	# 7 bytes pad for loops and calls
500     cmpb    [R15 + #56 (8-bit)], #0
505     jne     B95  P=0.001000 C=-1.000000

50b     B55: #	out( B124 B56 ) <- in( B127 B97 B95 B54 )  Freq: 4.09538
50b     movl    [RBX + #24 (8-bit)], R12	# compressed ptr (R12_heapbase==0) ! Field: java/util/HashMap$Node.next
50f     movl    R10, [rsp + #0]	# spill
513     cmpl    R10, [RSP + #40 (32-bit)]	# unsigned
518     jnb,u   B124  P=0.000001 C=-1.000000

51e     B56: #	out( B98 B57 ) <- in( B55 )  Freq: 4.09538
51e     movq    R11, [rsp + #16]	# spill
523     movq    RBX, [rsp + #72]	# spill
528     leaq    RBP, [R11 + #16 + RBX << #2]	# ptr idxscaleoff
52d     # TLS is in R15
52d     cmpb    [R15 + #56 (8-bit)], #0
532     jne     B98  P=0.001000 C=-1.000000

538     B57: #	out( B60 B58 ) <- in( B128 B100 B98 B56 )  Freq: 4.09538
538     movq    R9, [rsp + #56]	# spill
53d     movq    R8, R9	# ptr -> long
540     encode_heap_oop R11,R9
56c     movl    [RBP], R11	# compressed ptr
570     movq    R11, RBP	# ptr -> long
573     xorq    R8, R11	# long
576     shrq    R8, #21
        nop 	# 6 bytes pad for loops and calls
580     testq   R8, R8
583     je,s   B60  P=0.001000 C=-1.000000

585     B58: #	out( B60 B59 ) <- in( B57 )  Freq: 4.09128
585     testq   R9, R9	# ptr
588     je,s   B60  P=0.001000 C=-1.000000

58a     B59: #	out( B101 B60 ) <- in( B58 )  Freq: 4.08719
58a     shrq    R11, #9
58e     movq    RDI, 0x000000010ef09000	# ptr
598     addq    RDI, R11	# ptr
        nop 	# 5 bytes pad for loops and calls
5a0     cmpb    [RDI], #4
5a3     jne     B101  P=0.001000 C=-1.000000

5a9     B60: #	out( B79 B61 ) <- in( B103 B104 B101 B59 B58 B57 B53 )  Freq: 5.35033
5a9     testq   R14, R14	# ptr
5ac     je     B79  P=0.171815 C=1036.000000

5b2     B61: #	out( B85 B62 ) <- in( B60 )  Freq: 4.43107
5b2     # TLS is in R15
5b2     cmpb    [R15 + #56 (8-bit)], #0
5b7     jne     B85  P=0.001000 C=-1.000000

5bd     B62: #	out( B122 B63 ) <- in( B125 B87 B85 B61 )  Freq: 4.43107
5bd     movl    [R14 + #24 (8-bit)], R12	# compressed ptr (R12_heapbase==0) ! Field: java/util/HashMap$Node.next
5c1     movl    RBP, R10	# spill
5c4     addl    RBP, [RSP + #4 (32-bit)]	# int
5c8     cmpl    RBP, [RSP + #40 (32-bit)]	# unsigned
5cc     jnb,u   B122  P=0.000001 C=-1.000000

5d2     B63: #	out( B88 B64 ) <- in( B62 )  Freq: 4.43106
5d2     movq    R11, [rsp + #64]	# spill
5d7     addq    R11, RBX	# long
5da     movq    R8, [rsp + #16]	# spill
5df     leaq    RBX, [R8 + #16 + R11 << #2]	# ptr idxscaleoff
5e4     # TLS is in R15
5e4     cmpb    [R15 + #56 (8-bit)], #0
5e9     jne     B88  P=0.001000 C=-1.000000

5ef     B64: #	out( B67 B65 ) <- in( B126 B90 B88 B63 )  Freq: 4.43106
5ef     movq    R9, [rsp + #48]	# spill
5f4     movq    R8, R9	# ptr -> long
5f7     encode_heap_oop R11,R9
623     movl    [RBX], R11	# compressed ptr
626     movq    R11, RBX	# ptr -> long
629     xorq    R8, R11	# long
62c     shrq    R8, #21
630     testq   R8, R8
633     je,s   B67  P=0.001000 C=-1.000000

635     B65: #	out( B67 B66 ) <- in( B64 )  Freq: 4.42663
635     testq   R9, R9	# ptr
638     je,s   B67  P=0.001000 C=-1.000000

63a     B66: #	out( B91 B67 ) <- in( B65 )  Freq: 4.42221
63a     shrq    R11, #9
63e     movq    RDI, 0x000000010ef09000	# ptr
648     addq    RDI, R11	# ptr
64b     cmpb    [RDI], #4
64e     jne     B91  P=0.001000 C=-1.000000

654     B67: #	out( B28 ) <- in( B93 B94 B91 B66 B65 B64 )  Freq: 4.43106
654     movl    RBX, [rsp + #4]	# spill
658     movq    R13, [rsp + #8]	# spill
65d     movq    R14, [rsp + #64]	# spill
662     jmp     B28

667     B68: #	out( B69 ) <- in( B51 )  Freq: 7.02877
667     movl    R11, [R12 + RBP << 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
66c     movl    R10, [R12 + RBP << 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
671     decode_heap_oop_not_null R8,RBP
675     movl    [rsp + #80], RBP	# spill
679     movl    RBP, R10	# spill
67c     movq    R13, R14	# spill
67f     movq    [rsp + #24], R8	# spill

684     B69: #	out( B40 B70 ) <- in( B33 B68 ) Loop( B69-B68 inner ) Freq: 12.3791
684     andl    R11, [RSP + #4 (32-bit)]	# int
689     testl   R11, R11
68c     je     B40  P=0.471005 C=2397.000000

692     B70: #	out( B78 B71 ) <- in( B69 )  Freq: 6.54848
692     testq   R13, R13	# ptr
695     je     B78  P=0.676656 C=1268.000000

69b     B71: #	out( B105 B72 ) <- in( B70 )  Freq: 2.11741
69b     # TLS is in R15
        nop 	# 5 bytes pad for loops and calls
6a0     cmpb    [R15 + #56 (8-bit)], #0
6a5     jne     B105  P=0.001000 C=-1.000000

6ab     B72: #	out( B51 B73 ) <- in( B129 B107 B105 B71 )  Freq: 2.11741
6ab     movl    R14, [rsp + #80]	# spill
6b0     movl    [R13 + #24 (8-bit)], R14	# compressed ptr ! Field: java/util/HashMap$Node.next
6b4     movq    R14, [rsp + #24]	# spill
6b9     movq    R10, R14	# ptr -> long
6bc     movq    R11, R13	# ptr -> long
6bf     xorq    R10, R11	# long
6c2     shrq    R10, #21
6c6     testq   R10, R10
6c9     je     B51  P=0.001000 C=-1.000000

6cf     B73: #	out( B51 B74 ) <- in( B72 )  Freq: 2.11529
6cf     shrq    R11, #9
6d3     movq    RDI, 0x000000010ef09000	# ptr
6dd     addq    RDI, R11	# ptr
6e0     cmpb    [RDI], #4
6e3     je     B51  P=0.999000 C=-1.000000

6e9     B74: #	out( B51 B75 ) <- in( B73 )  Freq: 0.00211529
6e9     # TLS is in R15
6e9     movq    R10, [R15 + #80 (8-bit)]	# ptr
6ed     # TLS is in R15
6ed     movq    R11, [R15 + #64 (8-bit)]	# long
6f1     lock addl [rsp + #0], 0	! membar_volatile
6f7     cmpb    [RDI], #0
        nop 	# 6 bytes pad for loops and calls
700     je     B51  P=0.500000 C=-1.000000

706     B75: #	out( B77 B76 ) <- in( B74 )  Freq: 0.00105765
706     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
709     testq   R11, R11
70c     jne,s   B77  P=0.500000 C=-1.000000

70e     B76: #	out( B51 ) <- in( B75 )  Freq: 0.000528824
70e     # TLS is in R15
70e     movq    RSI, R15	# spill
711     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
        nop 	# 2 bytes pad for loops and calls
720     jmp     B51

725     B77: #	out( B51 ) <- in( B75 )  Freq: 0.000528824
725     movq    [R10 + #-8 + R11], RDI	# ptr
72a     addq    R11, #-8	# long
72e     # TLS is in R15
72e     movq    [R15 + #64 (8-bit)], R11	# long
732     jmp     B51

737     B78: #	out( B51 ) <- in( B70 )  Freq: 4.43107
737     movq    R10, [rsp + #24]	# spill
73c     movq    [rsp + #48], R10	# spill
741     movq    R14, [rsp + #24]	# spill
746     jmp     B51

74b     B79: #	out( B28 ) <- in( B60 )  Freq: 0.919266
74b     movl    RBX, [rsp + #4]	# spill
74f     movq    R13, [rsp + #8]	# spill
754     movq    R14, [rsp + #64]	# spill
759     jmp     B28

75e     B80: #	out( B120 B81 ) <- in( B30 )  Freq: 0.0136752
75e     # TLS is in R15
75e     movq    R11, [R15 + #32 (8-bit)]	# long
762     decode_heap_oop RDI,R9
78e     testq   R11, R11
791     je     B120  P=0.001000 C=-1.000000

797     B81: #	out( B31 ) <- in( B80 )  Freq: 0.0136615
797     # TLS is in R15
797     movq    R8, [R15 + #48 (8-bit)]	# ptr
79b     movq    [R8 + #-8 + R11], RDI	# ptr
7a0     addq    R11, #-8	# long
7a4     # TLS is in R15
7a4     movq    [R15 + #32 (8-bit)], R11	# long
7a8     jmp     B31

7ad     B82: #	out( B35 B83 ) <- in( B34 )  Freq: 0.00832494
7ad     movl    R8, [RBP]	# compressed ptr
7b1     testl   R8, R8	# compressed ptr
7b4     je     B35  P=0.500000 C=-1.000000

7ba     B83: #	out( B123 B84 ) <- in( B82 )  Freq: 0.00416247
7ba     # TLS is in R15
7ba     movq    R11, [R15 + #32 (8-bit)]	# long
7be     decode_heap_oop RDI,R8
7ea     testq   R11, R11
7ed     je     B123  P=0.001000 C=-1.000000

7f3     B84: #	out( B35 ) <- in( B83 )  Freq: 0.00415831
7f3     # TLS is in R15
7f3     movq    R8, [R15 + #48 (8-bit)]	# ptr
7f7     movq    [R8 + #-8 + R11], RDI	# ptr
7fc     addq    R11, #-8	# long
800     # TLS is in R15
800     movq    [R15 + #32 (8-bit)], R11	# long
804     jmp     B35

809     B85: #	out( B62 B86 ) <- in( B61 )  Freq: 0.00443101
809     movl    R11, [R14 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
80d     testl   R11, R11	# compressed ptr
810     je     B62  P=0.500000 C=-1.000000

816     B86: #	out( B125 B87 ) <- in( B85 )  Freq: 0.00221551
816     # TLS is in R15
816     movq    R8, [R15 + #32 (8-bit)]	# long
81a     decode_heap_oop RDI,R11
846     testq   R8, R8
849     je     B125  P=0.001000 C=-1.000000

84f     B87: #	out( B62 ) <- in( B86 )  Freq: 0.00221329
84f     # TLS is in R15
84f     movq    R11, [R15 + #48 (8-bit)]	# ptr
853     movq    [R11 + #-8 + R8], RDI	# ptr
858     addq    R8, #-8	# long
85c     # TLS is in R15
85c     movq    [R15 + #32 (8-bit)], R8	# long
860     jmp     B62

865     B88: #	out( B64 B89 ) <- in( B63 )  Freq: 0.00443101
865     movl    R8, [RBX]	# compressed ptr
868     testl   R8, R8	# compressed ptr
86b     je     B64  P=0.500000 C=-1.000000

871     B89: #	out( B126 B90 ) <- in( B88 )  Freq: 0.0022155
871     # TLS is in R15
871     movq    R11, [R15 + #32 (8-bit)]	# long
875     decode_heap_oop RDI,R8
8a1     testq   R11, R11
8a4     je     B126  P=0.001000 C=-1.000000

8aa     B90: #	out( B64 ) <- in( B89 )  Freq: 0.00221329
8aa     # TLS is in R15
8aa     movq    R8, [R15 + #48 (8-bit)]	# ptr
8ae     movq    [R8 + #-8 + R11], RDI	# ptr
8b3     addq    R11, #-8	# long
8b7     # TLS is in R15
8b7     movq    [R15 + #32 (8-bit)], R11	# long
        nop 	# 5 bytes pad for loops and calls
8c0     jmp     B64

8c5     B91: #	out( B67 B92 ) <- in( B66 )  Freq: 0.00442221
8c5     # TLS is in R15
8c5     movq    R11, [R15 + #80 (8-bit)]	# ptr
8c9     # TLS is in R15
8c9     movq    R8, [R15 + #64 (8-bit)]	# long
8cd     lock addl [rsp + #0], 0	! membar_volatile
8d3     cmpb    [RDI], #0
8d6     je     B67  P=0.500000 C=-1.000000

8dc     B92: #	out( B94 B93 ) <- in( B91 )  Freq: 0.0022111
8dc     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
        nop 	# 1 bytes pad for loops and calls
8e0     testq   R8, R8
8e3     jne,s   B94  P=0.500000 C=-1.000000

8e5     B93: #	out( B67 ) <- in( B92 )  Freq: 0.00110555
8e5     movl    RBP, R10	# spill
8e8     # TLS is in R15
8e8     movq    RSI, R15	# spill
8eb     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
8f8     movl    R10, RBP	# spill
        nop 	# 5 bytes pad for loops and calls
900     jmp     B67

905     B94: #	out( B67 ) <- in( B92 )  Freq: 0.00110555
905     movq    [R11 + #-8 + R8], RDI	# ptr
90a     addq    R8, #-8	# long
90e     # TLS is in R15
90e     movq    [R15 + #64 (8-bit)], R8	# long
912     jmp     B67

917     B95: #	out( B55 B96 ) <- in( B54 )  Freq: 0.00409533
917     movl    R11, [RBX + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
        nop 	# 5 bytes pad for loops and calls
920     testl   R11, R11	# compressed ptr
923     je     B55  P=0.500000 C=-1.000000

929     B96: #	out( B127 B97 ) <- in( B95 )  Freq: 0.00204767
929     # TLS is in R15
929     movq    R10, [R15 + #32 (8-bit)]	# long
92d     decode_heap_oop RDI,R11
959     testq   R10, R10
        nop 	# 4 bytes pad for loops and calls
960     je     B127  P=0.001000 C=-1.000000

966     B97: #	out( B55 ) <- in( B96 )  Freq: 0.00204562
966     # TLS is in R15
966     movq    R11, [R15 + #48 (8-bit)]	# ptr
96a     movq    [R11 + #-8 + R10], RDI	# ptr
96f     addq    R10, #-8	# long
973     # TLS is in R15
973     movq    [R15 + #32 (8-bit)], R10	# long
977     jmp     B55

97c     B98: #	out( B57 B99 ) <- in( B56 )  Freq: 0.00409533
97c     movl    R8, [RBP]	# compressed ptr
980     testl   R8, R8	# compressed ptr
983     je     B57  P=0.500000 C=-1.000000

989     B99: #	out( B128 B100 ) <- in( B98 )  Freq: 0.00204766
989     # TLS is in R15
989     movq    R11, [R15 + #32 (8-bit)]	# long
98d     decode_heap_oop RDI,R8
9b9     testq   R11, R11
        nop 	# 4 bytes pad for loops and calls
9c0     je     B128  P=0.001000 C=-1.000000

9c6     B100: #	out( B57 ) <- in( B99 )  Freq: 0.00204562
9c6     # TLS is in R15
9c6     movq    R8, [R15 + #48 (8-bit)]	# ptr
9ca     movq    [R8 + #-8 + R11], RDI	# ptr
9cf     addq    R11, #-8	# long
9d3     # TLS is in R15
9d3     movq    [R15 + #32 (8-bit)], R11	# long
9d7     jmp     B57

9dc     B101: #	out( B60 B102 ) <- in( B59 )  Freq: 0.00408719
9dc     # TLS is in R15
9dc     movq    R11, [R15 + #80 (8-bit)]	# ptr
9e0     # TLS is in R15
9e0     movq    R8, [R15 + #64 (8-bit)]	# long
9e4     lock addl [rsp + #0], 0	! membar_volatile
9ea     cmpb    [RDI], #0
9ed     je     B60  P=0.500000 C=-1.000000

9f3     B102: #	out( B104 B103 ) <- in( B101 )  Freq: 0.0020436
9f3     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
9f6     testq   R8, R8
9f9     jne,s   B104  P=0.500000 C=-1.000000

9fb     B103: #	out( B60 ) <- in( B102 )  Freq: 0.0010218
9fb     movl    RBP, R10	# spill
9fe     # TLS is in R15
9fe     movq    RSI, R15	# spill
a01     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
a0e     movl    R10, RBP	# spill
a11     jmp     B60

a16     B104: #	out( B60 ) <- in( B102 )  Freq: 0.0010218
a16     movq    [R11 + #-8 + R8], RDI	# ptr
a1b     addq    R8, #-8	# long
a1f     # TLS is in R15
a1f     movq    [R15 + #64 (8-bit)], R8	# long
a23     jmp     B60

a28     B105: #	out( B72 B106 ) <- in( B71 )  Freq: 0.00211738
a28     movl    R11, [R13 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
a2c     testl   R11, R11	# compressed ptr
a2f     je     B72  P=0.500000 C=-1.000000

a35     B106: #	out( B129 B107 ) <- in( B105 )  Freq: 0.00105869
a35     # TLS is in R15
a35     movq    R10, [R15 + #32 (8-bit)]	# long
a39     decode_heap_oop RDI,R11
a65     testq   R10, R10
a68     je     B129  P=0.001000 C=-1.000000

a6e     B107: #	out( B72 ) <- in( B106 )  Freq: 0.00105763
a6e     # TLS is in R15
a6e     movq    R11, [R15 + #48 (8-bit)]	# ptr
a72     movq    [R11 + #-8 + R10], RDI	# ptr
a77     addq    R10, #-8	# long
a7b     # TLS is in R15
a7b     movq    [R15 + #32 (8-bit)], R10	# long
        nop 	# 1 bytes pad for loops and calls
a80     jmp     B72

a85     B108: #	out( B42 B109 ) <- in( B41 )  Freq: 0.00173522
a85     movl    R10, [RBX + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
a89     testl   R10, R10	# compressed ptr
a8c     je     B42  P=0.500000 C=-1.000000

a92     B109: #	out( B131 B110 ) <- in( B108 )  Freq: 0.000867611
a92     # TLS is in R15
a92     movq    R11, [R15 + #32 (8-bit)]	# long
a96     decode_heap_oop RDI,R10
ac2     testq   R11, R11
ac5     je     B131  P=0.001000 C=-1.000000

acb     B110: #	out( B42 ) <- in( B109 )  Freq: 0.000866744
acb     # TLS is in R15
acb     movq    R10, [R15 + #48 (8-bit)]	# ptr
acf     movq    [R10 + #-8 + R11], RDI	# ptr
ad4     addq    R11, #-8	# long
ad8     # TLS is in R15
ad8     movq    [R15 + #32 (8-bit)], R11	# long
        nop 	# 4 bytes pad for loops and calls
ae0     jmp     B42

ae5     B111: #	out( B17 B112 ) <- in( B16 )  Freq: 0.000999986
ae5     movq    R10, [rsp + #32]	# spill
aea     movl    R11, [R10 + #36 (8-bit)]	# compressed ptr ! Field: java/util/HashMap.table
aee     testl   R11, R11	# compressed ptr
af1     je     B17  P=0.500000 C=-1.000000

af7     B112: #	out( B134 B113 ) <- in( B111 )  Freq: 0.000499993
af7     # TLS is in R15
af7     movq    R10, [R15 + #32 (8-bit)]	# long
afb     decode_heap_oop RDI,R11
b27     testq   R10, R10
b2a     je     B134  P=0.001000 C=-1.000000

b30     B113: #	out( B17 ) <- in( B112 )  Freq: 0.000499493
b30     # TLS is in R15
b30     movq    R11, [R15 + #48 (8-bit)]	# ptr
b34     movq    [R11 + #-8 + R10], RDI	# ptr
b39     addq    R10, #-8	# long
b3d     # TLS is in R15
b3d     movq    [R15 + #32 (8-bit)], R10	# long
b41     jmp     B17

b46     B114: #	out( B19 B115 ) <- in( B18 )  Freq: 0.000998999
b46     # TLS is in R15
b46     movq    R10, [R15 + #80 (8-bit)]	# ptr
b4a     # TLS is in R15
b4a     movq    R11, [R15 + #64 (8-bit)]	# long
b4e     lock addl [rsp + #0], 0	! membar_volatile
b54     cmpb    [RDI], #0
b57     je     B19  P=0.500000 C=-1.000000

b5d     B115: #	out( B117 B116 ) <- in( B114 )  Freq: 0.000499499
b5d     movb    [RDI], R12	# CMS card-mark byte 0 (R12_heapbase==0)
b60     testq   R11, R11
b63     jne,s   B117  P=0.500000 C=-1.000000

b65     B116: #	out( B19 ) <- in( B115 )  Freq: 0.00024975
b65     # TLS is in R15
b65     movq    RSI, R15	# spill
b68     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
b75     jmp     B19

b7a     B117: #	out( B19 ) <- in( B115 )  Freq: 0.00024975
b7a     movq    [R10 + #-8 + R11], RDI	# ptr
b7f     addq    R11, #-8	# long
b83     # TLS is in R15
b83     movq    [R15 + #64 (8-bit)], R11	# long
b87     jmp     B19

b8c     B118: #	out( B139 B119 ) <- in( B13 B14 )  Freq: 0.00010103
b8c     movl    [rsp + #4], R14	# spill
b91     movq    [rsp + #8], R13	# spill
b96     movl    [rsp + #0], RBX	# spill
b99     movq    RBP, RSI	# spill
b9c     movq    RSI, precise klass [Ljava/util/HashMap$Node;: 0x00007fafd07b3de0:Constant:exact *	# ptr
ba6     movl    RDX, R14	# spill
        nop 	# 2 bytes pad for loops and calls
bab     call,static  wrapper for: _new_array_Java
        # java.util.HashMap::resize @ bci:133 (line 704) L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=_ L[4]=rsp + #4 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_
        # OopMap {rbp=Oop [8]=Oop [32]=Oop off=2992/0xbb0}

bb0     B119: #	out( B16 ) <- in( B118 )  Freq: 0.000101028
        # Block is sole successor of call
bb0     movl    RBX, [rsp + #0]	# spill
bb3     movq    R13, [rsp + #8]	# spill
bb8     movl    R14, [rsp + #4]	# spill
bbd     movq    R8, RAX	# spill
bc0     jmp     B16

bc5     B120: #	out( B31 ) <- in( B80 )  Freq: 1.3675e-05
bc5     movl    [rsp + #24], R9	# spill
bca     movq    [rsp + #8], R13	# spill
bcf     movl    [rsp + #0], RBX	# spill
bd2     movl    R13, R10	# spill
bd5     # TLS is in R15
bd5     movq    RSI, R15	# spill
        nop 	# 8 bytes pad for loops and calls
be0     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
bed     movl    R10, R13	# spill
bf0     movl    RBX, [rsp + #0]	# spill
bf3     movq    R13, [rsp + #8]	# spill
bf8     movl    R9, [rsp + #24]	# spill
        nop 	# 3 bytes pad for loops and calls
c00     jmp     B31

c05     B121: #	out( N1957 ) <- in( B32 )  Freq: 5.42139e-06
c05     movl    RSI, #-187	# int
c0a     movq    [rsp + #0], R13	# spill
c0e     movl    [rsp + #8], RBX	# spill
c12     movl    [rsp + #24], R10	# spill
c17     movl    [rsp + #28], R9	# spill
        nop 	# 3 bytes pad for loops and calls
c1f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.util.HashMap::resize @ bci:203 (line 713) L[0]=rsp + #32 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=rsp + #16 L[7]=rsp + #24 L[8]=rsp + #28 L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=#1
        # OopMap {[0]=Oop [16]=Oop [28]=NarrowOop [32]=Oop off=3108/0xc24}
c24     stop	# ShouldNotReachHere

c38     B122: #	out( N1957 ) <- in( B62 )  Freq: 4.48991e-06
c38     movl    RSI, #-28	# int
c3d     movq    R11, [rsp + #32]	# spill
c42     movq    [rsp + #24], R11	# spill
c47     movl    R8, [rsp + #4]	# spill
c4c     movl    [rsp + #0], R8	# spill
c50     movl    R11, [rsp + #40]	# spill
c55     movl    [rsp + #4], R11	# spill
c5a     movl    [rsp + #32], R10	# spill
c5f     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.HashMap::resize @ bci:346 (line 742) L[0]=rsp + #24 L[1]=rsp + #8 L[2]=rsp + #0 L[3]=_ L[4]=rsp + #4 L[5]=_ L[6]=rsp + #16 L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=rsp + #16 STK[1]=RBP STK[2]=rsp + #48
        # OopMap {[8]=Oop [16]=Oop [24]=Oop [48]=Oop off=3172/0xc64}
c64     stop	# ShouldNotReachHere

c78     B123: #	out( B35 ) <- in( B83 )  Freq: 4.16242e-06
c78     movq    [rsp + #24], RCX	# spill
c7d     movq    [rsp + #0], R13	# spill
c81     movl    R13, RBX	# spill
c84     movl    R14, R10	# spill
c87     # TLS is in R15
c87     movq    RSI, R15	# spill
c8a     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
c97     movl    R10, R14	# spill
c9a     movl    RBX, R13	# spill
c9d     movq    R13, [rsp + #0]	# spill
ca1     movq    RCX, [rsp + #24]	# spill
ca6     jmp     B35

cab     B124: #	out( N1957 ) <- in( B55 )  Freq: 4.14977e-06
cab     movl    RSI, #-28	# int
cb0     movq    RBP, [rsp + #32]	# spill
cb5     movl    R11, [rsp + #4]	# spill
cba     movl    [rsp + #0], R11	# spill
cbe     movl    R8, [rsp + #40]	# spill
cc3     movl    [rsp + #4], R8	# spill
cc8     movq    R11, [rsp + #48]	# spill
ccd     movq    [rsp + #40], R11	# spill
cd2     movq    [rsp + #48], R14	# spill
cd7     movl    [rsp + #36], R10	# spill
        nop 	# 3 bytes pad for loops and calls
cdf     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # java.util.HashMap::resize @ bci:326 (line 738) L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #0 L[3]=_ L[4]=rsp + #4 L[5]=_ L[6]=rsp + #16 L[7]=rsp + #36 L[8]=_ L[9]=_ L[10]=_ L[11]=rsp + #40 L[12]=rsp + #48 L[13]=_ STK[0]=rsp + #16 STK[1]=rsp + #36 STK[2]=rsp + #56
        # OopMap {rbp=Oop [8]=Oop [16]=Oop [40]=Oop [48]=Oop [56]=Oop off=3300/0xce4}
ce4     stop	# ShouldNotReachHere

cf8     B125: #	out( B62 ) <- in( B86 )  Freq: 2.21548e-06
cf8     movl    R13, R10	# spill
cfb     # TLS is in R15
cfb     movq    RSI, R15	# spill
        nop 	# 2 bytes pad for loops and calls
d00     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
d0d     movl    R10, R13	# spill
d10     jmp     B62

d15     B126: #	out( B64 ) <- in( B89 )  Freq: 2.21547e-06
d15     movl    RBP, R10	# spill
d18     # TLS is in R15
d18     movq    RSI, R15	# spill
        nop 	# 5 bytes pad for loops and calls
d20     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
d2d     movl    R10, RBP	# spill
d30     jmp     B64

d35     B127: #	out( B55 ) <- in( B96 )  Freq: 2.04764e-06
d35     # TLS is in R15
d35     movq    RSI, R15	# spill
        nop 	# 8 bytes pad for loops and calls
d40     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
d4d     jmp     B55

d52     B128: #	out( B57 ) <- in( B99 )  Freq: 2.04764e-06
d52     movq    [rsp + #24], R14	# spill
d57     movl    R14, R10	# spill
d5a     # TLS is in R15
d5a     movq    RSI, R15	# spill
        nop 	# 3 bytes pad for loops and calls
d60     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
d6d     movl    R10, R14	# spill
d70     movq    R14, [rsp + #24]	# spill
d75     jmp     B57

d7a     B129: #	out( B72 ) <- in( B106 )  Freq: 1.05868e-06
d7a     # TLS is in R15
d7a     movq    RSI, R15	# spill
        nop 	# 3 bytes pad for loops and calls
d80     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
d8d     jmp     B72

d92     B130: #	out( B13 ) <- in( B11 )  Freq: 1.01328e-06
d92     movslq  RCX, R14	# i2l
d95     jmp     B13

d9a     B131: #	out( B42 ) <- in( B109 )  Freq: 8.676e-07
d9a     # TLS is in R15
d9a     movq    RSI, R15	# spill
        nop 	# 3 bytes pad for loops and calls
da0     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
dad     jmp     B42

db2     B132: #	out( N1957 ) <- in( B23 B22 )  Freq: 1.20957e-06
db2     movl    RSI, #-138	# int
db7     movq    RBP, [rsp + #32]	# spill
dbc     movq    [rsp + #0], R13	# spill
dc0     movl    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
dc7     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # java.util.HashMap::resize @ bci:154 (line 707) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #24 L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=rsp + #16 L[7]=#0 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=#0 STK[1]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=3532/0xdcc}
dcc     stop	# ShouldNotReachHere

de0     B133: #	out( N1957 ) <- in( B24 )  Freq: 6.00793e-07
de0     movl    RSI, #-66	# int
de5     movq    RBP, [rsp + #32]	# spill
dea     movq    [rsp + #0], R13	# spill
dee     movl    [rsp + #24], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
df3     call,static  wrapper for: uncommon_trap(reason='profile_predicate' action='maybe_recompile' debug_id='0')
        # java.util.HashMap::resize @ bci:154 (line 707) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #24 L[3]=_ L[4]=rsp + #40 L[5]=_ L[6]=rsp + #16 L[7]=#0 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=#0 STK[1]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=3576/0xdf8}
df8     stop	# ShouldNotReachHere

e0c     B134: #	out( B17 ) <- in( B112 )  Freq: 4.99987e-07
e0c     # TLS is in R15
e0c     movq    RSI, R15	# spill
e0f     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
        nop 	# 4 bytes pad for loops and calls
e20     jmp     B17

e25     B135: #	out( N1957 ) <- in( B10 )  Freq: 4.76837e-07
e25     movl    RSI, #-187	# int
e2a     movq    [rsp + #8], R13	# spill
e2f     movl    [rsp + #16], RBX	# spill
e33     movl    [rsp + #20], R14	# spill
        nop 	# 3 bytes pad for loops and calls
e3b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.util.HashMap::resize @ bci:87 (line 697) L[0]=rsp + #32 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=_ L[4]=rsp + #20 L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=RBP
        # OopMap {[8]=Oop [32]=Oop off=3648/0xe40}
e40     stop	# ShouldNotReachHere

e54     B136: #	out( N1957 ) <- in( B7 )  Freq: 2.93056e-07
e54     movl    RSI, #-187	# int
e59     movq    [rsp + #8], R13	# spill
e5e     movl    [rsp + #20], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
e63     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.util.HashMap::resize @ bci:31 (line 683) L[0]=rsp + #32 L[1]=rsp + #8 L[2]=rsp + #20 L[3]=RBP L[4]=_ L[5]=#0 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=rsp + #20 STK[1]=#1073741824
        # OopMap {[8]=Oop [32]=Oop off=3688/0xe68}
e68     stop	# ShouldNotReachHere

e7c     B137: #	out( N1957 ) <- in( B8 )  Freq: 2.93056e-07
e7c     movl    RSI, #-195	# int
e81     movq    [rsp + #8], R13	# spill
e86     movl    [rsp + #20], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
e8b     call,static  wrapper for: uncommon_trap(reason='unstable_fused_if' action='reinterpret' debug_id='0')
        # java.util.HashMap::resize @ bci:31 (line 683) L[0]=rsp + #32 L[1]=rsp + #8 L[2]=rsp + #20 L[3]=RBP L[4]=_ L[5]=#0 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=rsp + #20 STK[1]=#1073741824
        # OopMap {[8]=Oop [32]=Oop off=3728/0xe90}
e90     stop	# ShouldNotReachHere

ea4     B138: #	out( N1957 ) <- in( B5 )  Freq: 1.83781e-07
ea4     movl    RSI, #-187	# int
ea9     movq    [rsp + #8], R13	# spill
eae     movl    [rsp + #16], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
eb3     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.util.HashMap::resize @ bci:68 (line 691) L[0]=rsp + #32 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=RBP L[4]=_ L[5]=#0 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=RBP
        # OopMap {[8]=Oop [32]=Oop off=3768/0xeb8}
eb8     stop	# ShouldNotReachHere

ecc     B139: #	out( N1957 ) <- in( B118 )  Freq: 1.0103e-09
ecc     # exception oop is in rax; no code emitted
ecc     movq    RSI, RAX	# spill
ecf     addq    rsp, 112	# Destroy frame
	popq    rbp

ed4     jmp     rethrow_stub

--------------------------------------------------------------------------------
    172   21    b        java.lang.String::hashCode (60 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 21 ------------------------
{method}
 - this oop:          0x00000008004692c8
 - method holder:     'java/lang/String'
 - constants:         0x0000000800ba9068 constant pool [1379]/operands[28] {0x0000000800ba9068} for 'java/lang/String' cache=0x0000000800465df8
 - access:            0x81000001  public 
 - name:              'hashCode'
 - signature:         '()I'
 - max stack:         3
 - max locals:        2
 - size of params:    1
 - method size:       13
 - vtable index:      3
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a80: 0xb0000000 i2c: 0x000000010f027060 c2i: 0x000000010f02711e c2iUV: 0x000000010f0270e4 c2iNCI: 0x000000010f02715b
 - compiled entry     0x0000000800000280
 - code size:         60
 - code start:        0x0000000800bada88
 - code end (excl):   0x0000000800badac4
 - method data:       0x000000011582f378
 - checked ex length: 0
 - linenumber start:  0x0000000800badac4
 - localvar length:   2
 - localvar start:    0x0000000800badad6

------------------------ OptoAssembly for Compile_id = 21 -----------------------
#
#  int ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N341: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (272 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movl    RAX, [RSI + #12 (8-bit)]	# int ! Field: java/lang/String.hash
02f     testl   RAX, RAX
031     je,s   B3  P=0.019552 C=6700.000000

033     B2: #	out( N341 ) <- in( B1 B24 )  Freq: 1
033     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

045     ret

046     B3: #	out( B31 B4 ) <- in( B1 )  Freq: 0.0195522
046     movzbl  RBP, [RSI + #17 (8-bit)]	# ubyte ! Field: java/lang/String.hashIsZero
04a     testl   RBP, RBP
04c     jne     B31  P=0.000000 C=131.000000

052     B4: #	out( B32 B5 ) <- in( B3 )  Freq: 0.0195522
052     movsbl  R11, [RSI + #16 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
057     testl   R11, R11
        nop 	# 6 bytes pad for loops and calls
060     jne     B32  P=0.000000 C=131.000000

066     B5: #	out( B33 B6 ) <- in( B4 )  Freq: 0.0195522
066     movl    R9, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
06a     movl    R11, [R12 + R9 << 3 + #12] (compressed oop addressing)	# range
06f     NullCheck R9

06f     B6: #	out( B26 B7 ) <- in( B5 )  Freq: 0.0195522
06f     testl   R11, R11	# unsigned
072     jbe,u   B26  P=0.000001 C=-1.000000

078     B7: #	out( B25 B8 ) <- in( B6 )  Freq: 0.0195522
078     movl    R10, R11	# spill
07b     decl    R10	# int
        nop 	# 2 bytes pad for loops and calls
080     cmpl    R10, R11	# unsigned
083     jnb,u   B25  P=0.000001 C=-1.000000

089     B8: #	out( B20 B9 ) <- in( B7 )  Freq: 0.0195522
089     movzbl  R8, [R12 + R9 << 3 + #16] (compressed oop addressing)	# ubyte
08f     movl    R14, R11	# spill
092     addl    R14, #-7	# int
096     decode_heap_oop_not_null RDX,R9
09a     movl    R10, #1	# int
0a0     cmpl    R14, #1
0a4     jle     B20  P=0.000001 C=-1.000000

0aa     B9: #	out( B29 B10 ) <- in( B8 )  Freq: 0.0195521
0aa     cmpl    R11, #1	# unsigned
0ae     jbe,u   B29  P=0.000001 C=-1.000000

0b4     B10: #	out( B30 B11 ) <- in( B9 )  Freq: 0.0195521
0b4     cmpl    R11, #8	# unsigned
0b8     jbe,u   B30  P=0.000001 C=-1.000000

0be     B11: #	out( B16 ) <- in( B10 )  Freq: 0.0195521
0be     movl    RBP, R8	# spill
0c1     sall    RBP, #5
0c4     subl    RBP, R8	# int
0c7     # TLS is in R15
0c7     xorl    R9, R9	# int
0ca     jmp,s   B16

0cc     B12: #	out( B13 ) <- in( B13 ) top-of-loop Freq: 0.0879845
0cc     movl    R8, RAX	# spill

0cf     B13: #	out( B12 B14 ) <- in( B21 B12 ) Loop( B13-B12 inner post of N279) Freq: 0.0977605
0cf     movzbl  R9, [RDX + #16 + R10]	# ubyte
0d5     movl    RAX, R8	# spill
0d8     sall    RAX, #5
0db     subl    RAX, R8	# int
0de     addl    RAX, R9	# int
0e1     incl    R10	# int
0e4     cmpl    R10, R11
0e7     jl,s   B12	# loop end  P=0.900000 C=-1.000000

0e9     B14: #	out( B23 ) <- in( B13 )  Freq: 0.00977606
0e9     jmp     B23

0ee     B15: #	out( B16 ) <- in( B18 ) top-of-loop Freq: 0.175969
0ee     movdq   RSI, XMM0	# spill
0f3     movdl   R11, XMM2	# spill
0f8     movdl   R9, XMM1	# spill

0fd     B16: #	out( B17 ) <- in( B11 B15 ) Loop( B16-B15 ) Freq: 0.195521
0fd     movl    RAX, R11	# spill
100     subl    RAX, R10	# int
103     addl    RAX, #-7	# int
106     cmpl    R14, R10
109     cmovll RAX, R9	# signed, int
10d     cmpl    RAX, #8000	# unsigned
113     movl    R8, #8000	# int
119     cmovlnbe RAX, R8	# unsigned, int
11d     addl    RAX, R10	# int
120     movdq   XMM0, RSI	# spill
125     movdl   XMM2, R11	# spill
12a     movdl   XMM1, R9	# spill
        nop 	# 1 bytes pad for loops and calls

130     B17: #	out( B17 B18 ) <- in( B16 B17 ) Loop( B17-B17 inner main of N111 strip mined) Freq: 1.95521
130     movslq  RSI, R10	# i2l
133     movzbl  R8, [RDX + #16 + RSI]	# ubyte
139     movzbl  R11, [RDX + #23 + RSI]	# ubyte
13f     movzbl  RCX, [RDX + #17 + RSI]	# ubyte
144     movzbl  R9, [RDX + #22 + RSI]	# ubyte
14a     movzbl  RDI, [RDX + #21 + RSI]	# ubyte
14f     movzbl  RBX, [RDX + #20 + RSI]	# ubyte
154     movzbl  R13, [RDX + #19 + RSI]	# ubyte
15a     movzbl  RSI, [RDX + #18 + RSI]	# ubyte
15f     addl    RBP, R8	# int
162     movl    R8, RBP	# spill
165     sall    R8, #5
169     subl    R8, RBP	# int
16c     addl    R8, RCX	# int
16f     movl    RCX, R8	# spill
172     sall    RCX, #5
175     subl    RCX, R8	# int
178     addl    RCX, RSI	# int
17a     movl    RSI, RCX	# spill
17c     sall    RSI, #5
17f     subl    RSI, RCX	# int
181     addl    RSI, R13	# int
184     movl    R8, RSI	# spill
187     sall    R8, #5
18b     subl    R8, RSI	# int
18e     addl    R8, RBX	# int
191     movl    RCX, R8	# spill
194     sall    RCX, #5
197     subl    RCX, R8	# int
19a     addl    RCX, RDI	# int
19c     movl    RDI, RCX	# spill
19e     sall    RDI, #5
1a1     subl    RDI, RCX	# int
1a3     addl    RDI, R9	# int
1a6     movl    R8, RDI	# spill
1a9     sall    R8, #5
1ad     subl    R8, RDI	# int
1b0     addl    R8, R11	# int
1b3     movl    RBP, R8	# spill
1b6     sall    RBP, #5
1b9     subl    RBP, R8	# int
1bc     addl    R10, #8	# int
1c0     cmpl    R10, RAX
1c3     jl     B17	# loop end  P=0.900000 C=-1.000000

1c9     B18: #	out( B15 B19 ) <- in( B17 )  Freq: 0.195521
1c9     movq    R11, [R15 + #304 (32-bit)]	# ptr
1d0     testl   rax, [R11]	# Safepoint: poll for GC        # java.lang.StringLatin1::hashCode @ bci:37 (line 196) L[0]=_ L[1]=R8 L[2]=RDX L[3]=XMM2 L[4]=R10 L[5]=_
        # java.lang.String::hashCode @ bci:27 (line 2318) L[0]=XMM0 L[1]=_
        # OopMap {rdx=Oop xmm0=Oop off=464/0x1d0}
1d3     cmpl    R10, R14
1d6     jl     B15  P=0.900000 C=-1.000000

1dc     B19: #	out( B20 ) <- in( B18 )  Freq: 0.0195521
1dc     movdq   RSI, XMM0	# spill
1e1     movdl   R11, XMM2	# spill

1e6     B20: #	out( B22 B21 ) <- in( B8 B19 )  Freq: 0.0195521
1e6     cmpl    R10, R11
1e9     jge,s   B22  P=0.500000 C=-1.000000

1eb     B21: #	out( B13 ) <- in( B20 )  Freq: 0.00977606
1eb     # castII of R10
1eb     jmp     B13

1f0     B22: #	out( B23 ) <- in( B20 )  Freq: 0.00977606
1f0     movl    RAX, R8	# spill

1f3     B23: #	out( B27 B24 ) <- in( B14 B22 )  Freq: 0.0195521
1f3     testl   RAX, RAX
1f5     je,s   B27  P=0.000000 C=131.000000

1f7     B24: #	out( B2 ) <- in( B23 )  Freq: 0.0195521
1f7     movl    [RSI + #12 (8-bit)], RAX	# int ! Field: java/lang/String.hash
1fa     jmp     B2

1ff     B25: #	out( N341 ) <- in( B7 )  Freq: 1.98118e-08
1ff     movq    RBP, RSI	# spill
202     movl    [rsp + #0], R9	# spill
206     movl    [rsp + #8], R11	# spill
20b     movl    RSI, #-138	# int
        nop 	# 3 bytes pad for loops and calls
213     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::hashCode @ bci:13 (line 196) L[0]=_ L[1]=#0 L[2]=rsp + #0 L[3]=rsp + #8 L[4]=#0 L[5]=_ STK[0]=#0 STK[1]=rsp + #8
        # java.lang.String::hashCode @ bci:27 (line 2318) L[0]=RBP L[1]=_
        # OopMap {rbp=Oop [0]=NarrowOop off=536/0x218}
218     stop	# ShouldNotReachHere

22c     B26: #	out( B28 ) <- in( B6 )  Freq: 1.95522e-08
22c     xorl    R10, R10	# int
22f     jmp,s   B28

231     B27: #	out( B28 ) <- in( B23 )  Freq: 9.32317e-09
231     movl    R10, RAX	# spill

234     B28: #	out( N341 ) <- in( B27 B26 )  Freq: 2.88754e-08
234     movq    RBP, RSI	# spill
237     movl    [rsp + #4], R10	# spill
23c     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
243     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.String::hashCode @ bci:42 (line 2320) L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap {rbp=Oop off=584/0x248}
248     stop	# ShouldNotReachHere

25c     B29: #	out( N341 ) <- in( B9 )  Freq: 1.95521e-08
25c     stop	# ShouldNotReachHere

270     B30: #	out( N341 ) <- in( B10 )  Freq: 1.95521e-08
270     stop	# ShouldNotReachHere

284     B31: #	out( N341 ) <- in( B3 )  Freq: 9.77612e-09
284     movq    [rsp + #0], RSI	# spill
288     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
28f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.String::hashCode @ bci:13 (line 2317) L[0]=rsp + #0 L[1]=#0 STK[0]=RBP
        # OopMap {[0]=Oop off=660/0x294}
294     stop	# ShouldNotReachHere

2a8     B32: #	out( N341 ) <- in( B4 )  Freq: 9.77611e-09
2a8     testl   R11, R11	# ci2b
	setnz   RBP
	movzbl  RBP, RBP
2b3     xorl    RBP, #1	# int
2b6     movq    [rsp + #0], RSI	# spill
2ba     movl    RSI, #-187	# int
2bf     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.String::hashCode @ bci:20 (line 2318) L[0]=rsp + #0 L[1]=_ STK[0]=RBP
        # OopMap {[0]=Oop off=708/0x2c4}
2c4     stop	# ShouldNotReachHere

2d8     B33: #	out( N341 ) <- in( B5 )  Freq: 1.98118e-08
2d8     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
2df     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::hashCode @ bci:5 (line 196) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # java.lang.String::hashCode @ bci:27 (line 2318) L[0]=_ L[1]=_
        # OopMap {off=740/0x2e4}
2e4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    185   22    b        java.lang.StringLatin1::equals (36 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 22 ------------------------
{method}
 - this oop:          0x0000000800030930
 - method holder:     'java/lang/StringLatin1'
 - constants:         0x00000008006409a0 constant pool [380] {0x00000008006409a0} for 'java/lang/StringLatin1' cache=0x000000080002fc18
 - access:            0xc1000009  public static 
 - name:              'equals'
 - signature:         '([B[B)Z'
 - max stack:         4
 - max locals:        3
 - size of params:    2
 - method size:       13
 - intrinsic id:      109 _equalsL
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a30: 0xbb000000 i2c: 0x000000010f026d60 c2i: 0x000000010f026e22 c2iUV: 0x000000010f026de8 c2iNCI: 0x000000010f026e5f
 - compiled entry     0x00000008000002b0
 - code size:         36
 - code start:        0x00000008006454d8
 - code end (excl):   0x00000008006454fc
 - method data:       0x0000000115831980
 - checked ex length: 0
 - linenumber start:  0x00000008006454fc
 - localvar length:   3
 - localvar start:    0x000000080064550a

------------------------ OptoAssembly for Compile_id = 22 -----------------------
#
#  bool ( byte[int:>=0]:exact *, byte[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: byte[int:>=0]:exact *
#r016 rdx:rdx   : parm 1: byte[int:>=0]:exact *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B36 B37 B29 B33 B32 B4 B31 B35 B34 )  Freq: 1

000     B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    R9, [RSI + #12 (8-bit)]	# range
010     NullCheck RSI

010     B2: #	out( B37 B3 ) <- in( B1 )  Freq: 0.999999
010     movl    R11, [RDX + #12 (8-bit)]	# range
014     NullCheck RDX

014     B3: #	out( B5 B4 ) <- in( B2 )  Freq: 0.999998
014     xorl    RAX, RAX	# int
016     cmpl    R9, R11
019     je,s   B5  P=0.084819 C=3702.000000

01b     B4: #	out( N1 ) <- in( B26 B20 B9 B18 B19 B21 B28 B3 )  Freq: 0.999997
01b     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

02d     ret

02e     B5: #	out( B28 B6 ) <- in( B3 )  Freq: 0.0848188
02e     testl   R9, R9	# unsigned
031     jbe,u   B28  P=0.041365 C=3312.000000

037     B6: #	out( B29 B7 ) <- in( B5 )  Freq: 0.0813103
037     movl    RCX, R9	# spill
03a     decl    RCX	# int
        nop 	# 4 bytes pad for loops and calls
040     cmpl    RCX, R9	# unsigned
043     jnb,u   B29  P=0.000001 C=-1.000000

049     B7: #	out( B29 B8 ) <- in( B6 )  Freq: 0.0813103
049     testl   R11, R11	# unsigned
04c     jbe,u   B29  P=0.000001 C=-1.000000

052     B8: #	out( B29 B9 ) <- in( B7 )  Freq: 0.0813102
052     cmpl    RCX, R11	# unsigned
055     jnb,u   B29  P=0.000001 C=-1.000000

05b     B9: #	out( B4 B10 ) <- in( B8 )  Freq: 0.0813101
05b     movsbl  R10, [RDX + #16 (8-bit)]	# byte
060     movsbl  RBX, [RSI + #16 (8-bit)]	# byte
064     cmpl    RBX, R10
067     jne,s   B4  P=0.055748 C=3175.000000

069     B10: #	out( B30 B11 ) <- in( B9 )  Freq: 0.0767772
069     movl    R8, R9	# spill
06c     addl    R8, #-3	# int
070     movl    R10, #-2147483648	# int
076     cmpl    RCX, R8
079     cmovll R8, R10	# signed, int
        nop 	# 3 bytes pad for loops and calls
080     cmpl    R8, #1
084     jle     B30  P=0.000001 C=-1.000000

08a     B11: #	out( B31 B12 ) <- in( B10 )  Freq: 0.0767771
08a     cmpl    R11, #1	# unsigned
08e     jbe,u   B31  P=0.000001 C=-1.000000

094     B12: #	out( B32 B13 ) <- in( B11 )  Freq: 0.0767771
094     cmpl    R9, #1	# unsigned
098     jbe,u   B32  P=0.000001 C=-1.000000

09e     B13: #	out( B33 B14 ) <- in( B12 )  Freq: 0.076777
        nop 	# 2 bytes pad for loops and calls
0a0     cmpl    R9, #4	# unsigned
0a4     jbe,u   B33  P=0.000001 C=-1.000000

0aa     B14: #	out( B34 B15 ) <- in( B13 )  Freq: 0.0767769
0aa     cmpl    R11, #1	# unsigned
0ae     jbe,u   B34  P=0.000001 C=-1.000000

0b4     B15: #	out( B35 B16 ) <- in( B14 )  Freq: 0.0767768
0b4     cmpl    R11, #4	# unsigned
0b8     jbe,u   B35  P=0.000001 C=-1.000000

0be     B16: #	out( B17 ) <- in( B15 )  Freq: 0.0767767
0be     movl    R13, #4000	# int
0c4     movl    RBX, #1	# int

0c9     B17: #	out( B18 ) <- in( B16 B23 ) Loop( B17-B23 ) Freq: 0.0885035
0c9     movl    RCX, R8	# spill
0cc     subl    RCX, RBX	# int
0ce     cmpl    R8, RBX
0d1     cmovll RCX, RAX	# signed, int
0d4     cmpl    RCX, #4000	# unsigned
0da     cmovlnbe RCX, R13	# unsigned, int
0de     addl    RCX, RBX	# int

0e0     B18: #	out( B4 B19 ) <- in( B17 B22 ) Loop( B18-B22 inner main of N123 strip mined) Freq: 0.372001
0e0     movslq  RDI, RBX	# i2l
0e3     movsbl  R10, [RSI + #16 + RDI]	# byte
0e9     movsbl  R11, [RDX + #16 + RDI]	# byte
0ef     cmpl    R10, R11
0f2     jne     B4  P=0.055748 C=3175.000000

0f8     B19: #	out( B4 B20 ) <- in( B18 )  Freq: 0.351262
0f8     movsbl  R10, [RDX + #17 + RDI]	# byte
0fe     movsbl  R11, [RSI + #17 + RDI]	# byte
104     cmpl    R11, R10
107     jne     B4  P=0.055748 C=3175.000000

10d     B20: #	out( B4 B21 ) <- in( B19 )  Freq: 0.33168
10d     movsbl  R10, [RDX + #18 + RDI]	# byte
113     movsbl  R11, [RSI + #18 + RDI]	# byte
119     cmpl    R11, R10
        nop 	# 4 bytes pad for loops and calls
120     jne     B4  P=0.055748 C=3175.000000

126     B21: #	out( B4 B22 ) <- in( B20 )  Freq: 0.31319
126     movsbl  R11, [RDX + #19 + RDI]	# byte
12c     movsbl  R10, [RSI + #19 + RDI]	# byte
132     cmpl    R10, R11
135     jne     B4  P=0.055748 C=3175.000000

13b     B22: #	out( B18 B23 ) <- in( B21 )  Freq: 0.29573
13b     addl    RBX, #4	# int
        nop 	# 2 bytes pad for loops and calls
140     cmpl    RBX, RCX
142     jl,s   B18	# loop end  P=0.958635 C=2998.000000

144     B23: #	out( B17 B24 ) <- in( B22 )  Freq: 0.0122328
144     # TLS is in R15
144     movq    R10, [R15 + #304 (32-bit)]	# ptr
14b     testl   rax, [R10]	# Safepoint: poll for GC        # java.lang.StringLatin1::equals @ bci:29 (line 96) L[0]=RSI L[1]=RDX L[2]=RBX
        # OopMap {rdx=Oop rsi=Oop off=331/0x14b}
14e     cmpl    RBX, R8
151     jl     B17  P=0.958635 C=2998.000000

157     B24: #	out( B28 B25 ) <- in( B30 B23 )  Freq: 0.000506084
157     cmpl    RBX, R9
15a     jge,s   B28  P=0.500000 C=-1.000000

15c     B25: #	out( B26 ) <- in( B24 )  Freq: 0.000253042
15c     # castII of RBX

15c     B26: #	out( B4 B27 ) <- in( B25 B27 ) Loop( B26-B27 inner post of N209) Freq: 0.00047936
15c     movslq  R10, RBX	# i2l
15f     movsbl  R8, [RSI + #16 + R10]	# byte
165     movsbl  R10, [RDX + #16 + R10]	# byte
16b     cmpl    R8, R10
16e     jne     B4  P=0.055748 C=3175.000000

174     B27: #	out( B26 B28 ) <- in( B26 )  Freq: 0.000452637
174     incl    RBX	# int
176     cmpl    RBX, R9
179     jl,s   B26	# loop end  P=0.500000 C=2998.000000

17b     B28: #	out( B4 ) <- in( B24 B5 B27 )  Freq: 0.00398787
17b     movl    RAX, #1	# int
180     jmp     B4

185     B29: #	out( N1 ) <- in( B7 B8 B6 )  Freq: 2.4609e-07
185     movq    RBP, RSI	# spill
188     movq    [rsp + #0], RDX	# spill
18c     movl    [rsp + #8], R9	# spill
191     movl    RSI, #-138	# int
        nop 	# 1 bytes pad for loops and calls
197     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::equals @ bci:12 (line 96) L[0]=RBP L[1]=rsp + #0 L[2]=#0 STK[0]=#0 STK[1]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop off=412/0x19c}
19c     stop	# ShouldNotReachHere

1b0     B30: #	out( B24 ) <- in( B10 )  Freq: 7.77967e-08
1b0     movl    RBX, #1	# int
1b5     jmp,s   B24

1b7     B31: #	out( N1 ) <- in( B11 )  Freq: 7.67771e-08
1b7     stop	# ShouldNotReachHere

1cb     B32: #	out( N1 ) <- in( B12 )  Freq: 7.67771e-08
1cb     stop	# ShouldNotReachHere

1df     B33: #	out( N1 ) <- in( B13 )  Freq: 7.6777e-08
1df     stop	# ShouldNotReachHere

1f3     B34: #	out( N1 ) <- in( B14 )  Freq: 7.67769e-08
1f3     stop	# ShouldNotReachHere

207     B35: #	out( N1 ) <- in( B15 )  Freq: 7.67768e-08
207     stop	# ShouldNotReachHere

21b     B36: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
21b     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
223     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::equals @ bci:1 (line 95) L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap {off=552/0x228}
228     stop	# ShouldNotReachHere

23c     B37: #	out( N1 ) <- in( B2 )  Freq: 1.01328e-06
23c     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
243     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::equals @ bci:3 (line 95) L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=584/0x248}
248     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    195   23    b        java.util.ImmutableCollections$SetN$SetNIterator::hasNext (13 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 23 ------------------------
{method}
 - this oop:          0x000000080019d248
 - method holder:     'java/util/ImmutableCollections$SetN$SetNIterator'
 - constants:         0x00000008007daac8 constant pool [70] {0x00000008007daac8} for 'java/util/ImmutableCollections$SetN$SetNIterator' cache=0x000000080019cc30
 - access:            0x81000001  public 
 - name:              'hasNext'
 - signature:         '()Z'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a80: 0xb0000000 i2c: 0x000000010f027060 c2i: 0x000000010f02711e c2iUV: 0x000000010f0270e4 c2iNCI: 0x000000010f02715b
 - compiled entry     0x0000000800000280
 - code size:         13
 - code start:        0x00000008007dae38
 - code end (excl):   0x00000008007dae45
 - method data:       0x0000000115831b90
 - checked ex length: 0
 - linenumber start:  0x00000008007dae45
 - localvar length:   1
 - localvar start:    0x00000008007dae4a

------------------------ OptoAssembly for Compile_id = 23 -----------------------
#
#  bool ( java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N29: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B4 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    R11, [RSI + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining
030     testl   R11, R11
033     jle,s   B4  P=0.025224 C=6700.000000

035     B2: #	out( B3 ) <- in( B1 )  Freq: 0.974776
035     movl    RAX, #1	# int

03a     B3: #	out( N29 ) <- in( B4 B2 )  Freq: 1
03a     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

04c     ret

04d     B4: #	out( B3 ) <- in( B1 )  Freq: 0.0252239
04d     xorl    RAX, RAX	# int
04f     jmp,s   B3

--------------------------------------------------------------------------------
    197   20             java.util.HashMap::resize (356 bytes)   made not entrant
    237   21             java.lang.String::hashCode (60 bytes)   made not entrant
    264   24     n       java.lang.invoke.MethodHandle::linkToStatic(LILL)L (native)   (static)
    266   25     n       java.lang.invoke.MethodHandle::linkToStatic(LIIL)I (native)   (static)
    268   26     n       java.lang.invoke.MethodHandle::linkToStatic(LILL)V (native)   (static)
    269   27     n       java.lang.invoke.MethodHandle::linkToStatic(LIIIL)V (native)   (static)
    276   28    b        jdk.incubator.vector.IntVector::ldOp (47 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 28 ------------------------
{method}
 - this oop:          0x0000000115848df8
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0xc1000010  final 
 - name:              'ldOp'
 - signature:         '(Ljava/lang/Object;ILjdk/incubator/vector/IntVector$FLdOp;)Ljdk/incubator/vector/IntVector;'
 - max stack:         7
 - max locals:        6
 - size of params:    4
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b4e0: 0xbbab0000 i2c: 0x000000010efdc260 c2i: 0x000000010efdc34f c2iUV: 0x000000010efdc315 c2iNCI: 0x000000010efdc38c
 - compiled entry     0x000000010efdc34f
 - code size:         47
 - code start:        0x0000000115848d68
 - code end (excl):   0x0000000115848d97
 - method data:       0x0000000115930f88
 - checked ex length: 0
 - linenumber start:  0x0000000115848d97
 - localvar length:   6
 - localvar start:    0x0000000115848da4

------------------------ OptoAssembly for Compile_id = 28 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/IntVector:NotNull *, java/lang/Object *, int, jdk/incubator/vector/IntVector$FLdOp * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: jdk/incubator/vector/IntVector$FLdOp *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N277: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B21 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (376 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    [rsp + #16], R8	# spill
031     movl    [rsp + #8], RCX	# spill
035     movq    [rsp + #0], RDX	# spill
039     movq    R11, RSI	# spill
03c     movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
040     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd210a7f0:Constant:exact *	# compressed klass ptr
047     jne,u   B21  P=0.000001 C=-1.000000

04d     B2: #	out( B14 B3 ) <- in( B1 )  Freq: 0.999999
04d     # checkcastPP of R11
04d     movq    [rsp + #24], R11	# spill
052     # TLS is in R15
052     movq    RBP, [R15 + #328 (32-bit)]	# ptr
059     movq    R10, RBP	# spill
05c     addq    R10, #48	# ptr
060     # TLS is in R15
060     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
067     jnb,u   B14  P=0.000100 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.999899
06d     # TLS is in R15
06d     movq    [R15 + #328 (32-bit)], R10	# ptr
074     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
07c     movq    [RBP], #1	# long
084     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
08c     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
093     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09b     movl    [RBP + #12 (8-bit)], #8	# int
0a2     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0aa     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
0ae     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b2     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
0b6     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0ba     B4: #	out( B19 B5 ) <- in( B15 B3 )  Freq: 0.999999
0ba     
0ba     MEMBAR-storestore (empty encoding)
0ba     # checkcastPP of RBP
0ba     movq    R8, [rsp + #16]	# spill
        nop 	# 1 bytes pad for loops and calls
0c0     movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
0c4     NullCheck R8

0c4     B5: #	out( B22 B6 ) <- in( B4 )  Freq: 0.999998
0c4     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$25+0x000000080104e2b8: 0x00007fafd210a8c0:Constant:exact *	# compressed klass ptr
0cb     jne,u   B22  P=0.000001 C=-1.000000

0d1     B6: #	out( B18 B7 ) <- in( B5 )  Freq: 0.999997
0d1     movq    RCX, [rsp + #0]	# spill
0d5     movl    R11, [RCX + #8 (8-bit)]	# compressed klass ptr
0d9     NullCheck RCX

0d9     B7: #	out( B23 B8 ) <- in( B6 )  Freq: 0.999996
        nop 	# 7 bytes pad for loops and calls
0e0     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0e7     jne,u   B23  P=0.000001 C=-1.000000

0ed     B8: #	out( B20 B9 ) <- in( B7 )  Freq: 0.999995
0ed     movq    RBX, RCX	# spill
0f0     # checkcastPP of RBX
0f0     movl    R11, [RBX + #12 (8-bit)]	# range
0f4     movl    R10, [rsp + #8]	# spill
0f9     cmpl    R10, R11	# unsigned
        nop 	# 4 bytes pad for loops and calls
100     jnb,u   B20  P=0.000001 C=-1.000000

106     B9: #	out( B20 B10 ) <- in( B8 )  Freq: 0.999994
106     movslq  R11, R11	# i2l
109     movslq  RDI, R10	# i2l
10c     movq    R9, RDI	# spill
10f     addq    R9, #7	# long
113     cmpq    R9, R11	# unsigned
116     jnb,u   B20  P=0.000001 C=-1.000000

11c     B10: #	out( B20 B11 ) <- in( B9 )  Freq: 0.999993
        nop 	# 4 bytes pad for loops and calls
120     cmpq    RDI, R11	# unsigned
123     jnb,u   B20  P=0.000001 C=-1.000000

129     B11: #	out( B16 B12 ) <- in( B10 )  Freq: 0.999992
129     movl    R10, [RBX + #16 + R10 << #2]	# int
12e     movl    [RBP + #16 (8-bit)], R10	# int
132     movl    R11, [RBX + #20 + RDI << #2]	# int
137     movl    [RBP + #20 (8-bit)], R11	# int
13b     movl    R10, [RBX + #24 + RDI << #2]	# int
140     movl    [RBP + #24 (8-bit)], R10	# int
144     movl    R11, [RBX + #28 + RDI << #2]	# int
149     movl    [RBP + #28 (8-bit)], R11	# int
14d     movl    R10, [RBX + #32 + RDI << #2]	# int
152     movl    [RBP + #32 (8-bit)], R10	# int
156     movl    R11, [RBX + #36 + RDI << #2]	# int
15b     movl    [RBP + #36 (8-bit)], R11	# int
15f     movl    R10, [RBX + #40 + RDI << #2]	# int
164     movl    [RBP + #40 (8-bit)], R10	# int
168     movl    R11, [RBX + #44 + RDI << #2]	# int
16d     movl    [RBP + #44 (8-bit)], R11	# int
171     # TLS is in R15
171     movq    RAX, [R15 + #328 (32-bit)]	# ptr
178     movq    R10, RAX	# spill
17b     addq    R10, #16	# ptr
17f     # TLS is in R15
        nop 	# 1 bytes pad for loops and calls
180     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
187     jnb,u   B16  P=0.000100 C=-1.000000

18d     B12: #	out( B13 ) <- in( B11 )  Freq: 0.999892
18d     # TLS is in R15
18d     movq    [R15 + #328 (32-bit)], R10	# ptr
194     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
19c     movq    [RAX], #1	# long
1a3     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd210a7f0:Constant:exact *	# compressed klass ptr

1aa     B13: #	out( N277 ) <- in( B17 B12 )  Freq: 0.999992
1aa     encode_heap_oop_not_null R10,RBP
1f3     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
1f7     
1f7     # checkcastPP of RAX
1f7     MEMBAR-release ! (empty encoding)
1f7     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

209     ret

20a     B14: #	out( B24 B15 ) <- in( B2 )  Freq: 0.000100016
20a     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
214     movl    RDX, #8	# int
        nop 	# 2 bytes pad for loops and calls
21b     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::ldOp @ bci:4 (line 306) L[0]=rsp + #24 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_
        # OopMap {[0]=Oop [16]=Oop [24]=Oop off=544/0x220}

220     B15: #	out( B4 ) <- in( B14 )  Freq: 0.000100014
        # Block is sole successor of call
220     movq    RBP, RAX	# spill
223     jmp     B4

228     B16: #	out( B25 B17 ) <- in( B11 )  Freq: 0.000100016
228     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd210a7f0:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
233     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::ldOp @ bci:43 (line 310) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # OopMap {rbp=Oop off=568/0x238}

238     B17: #	out( B13 ) <- in( B16 )  Freq: 0.000100014
        # Block is sole successor of call
238     jmp     B13

23d     B18: #	out( B20 ) <- in( B6 )  Freq: 1.01328e-06
23d     movl    R10, [rsp + #8]	# spill
242     jmp,s   B20

244     B19: #	out( B20 ) <- in( B4 )  Freq: 1.01328e-06
244     movq    RCX, [rsp + #0]	# spill
248     movl    R10, [rsp + #8]	# spill

24d     B20: #	out( N277 ) <- in( B10 B19 B22 B18 B23 B8 B9 )  Freq: 7.06637e-06
24d     movl    RSI, #-138	# int
252     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #0]
25b     movq    [rsp + #8], RCX	# spill
260     movl    [rsp + #16], R10	# spill
265     movq    [rsp + #24], R8	# spill
        nop 	# 1 bytes pad for loops and calls
26b     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::ldOp @ bci:16 (line 307) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=RBP L[5]=#0 STK[0]=#0 STK[1]=#8
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [24]=Oop off=624/0x270}
270     stop	# ShouldNotReachHere

284     B21: #	out( N277 ) <- in( B1 )  Freq: 1e-06
284     movl    RSI, #-34	# int
289     movq    [rsp + #24], R11	# spill
        nop 	# 1 bytes pad for loops and calls
28f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::ldOp @ bci:1 (line 306) L[0]=rsp + #24 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_ STK[0]=rsp + #24
        # OopMap {[0]=Oop [16]=Oop [24]=Oop off=660/0x294}
294     stop	# ShouldNotReachHere

2a8     B22: #	out( B20 ) <- in( B5 )  Freq: 9.99998e-07
2a8     movq    RCX, [rsp + #0]	# spill
2ac     movl    R10, [rsp + #8]	# spill
2b1     jmp,s   B20

2b3     B23: #	out( B20 ) <- in( B7 )  Freq: 9.99996e-07
2b3     movl    R10, [rsp + #8]	# spill
2b8     jmp,s   B20

2ba     B24: #	out( B26 ) <- in( B14 )  Freq: 1.00016e-09
2ba     # exception oop is in rax; no code emitted
2ba     movq    RSI, RAX	# spill
2bd     jmp,s   B26

2bf     B25: #	out( B26 ) <- in( B16 )  Freq: 1.00016e-09
2bf     # exception oop is in rax; no code emitted
2bf     movq    RSI, RAX	# spill

2c2     B26: #	out( N277 ) <- in( B24 B25 )  Freq: 2.00032e-09
2c2     addq    rsp, 48	# Destroy frame
	popq    rbp

2c7     jmp     rethrow_stub

--------------------------------------------------------------------------------
    289   29    b        jdk.incubator.vector.IntVector::stOp (39 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 29 ------------------------
{method}
 - this oop:          0x00000001158490a0
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0xc1000010  final 
 - name:              'stOp'
 - signature:         '(Ljava/lang/Object;ILjdk/incubator/vector/IntVector$FStOp;)V'
 - max stack:         7
 - max locals:        6
 - size of params:    4
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b4e0: 0xbbab0000 i2c: 0x000000010efdc260 c2i: 0x000000010efdc34f c2iUV: 0x000000010efdc315 c2iNCI: 0x000000010efdc38c
 - compiled entry     0x000000010efdc34f
 - code size:         39
 - code start:        0x0000000115849018
 - code end (excl):   0x000000011584903f
 - method data:       0x0000000115931220
 - checked ex length: 0
 - linenumber start:  0x000000011584903f
 - localvar length:   6
 - localvar start:    0x000000011584904c

------------------------ OptoAssembly for Compile_id = 29 -----------------------
#
#  void ( jdk/incubator/vector/IntVector:NotNull *, java/lang/Object *, int, jdk/incubator/vector/IntVector$FStOp * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: jdk/incubator/vector/IntVector$FStOp *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N342: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B27 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (248 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    R11, RSI	# spill
02f     movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
        nop 	# 13 bytes pad for loops and calls
040     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2389790:Constant:exact *	# compressed klass ptr
047     jne,u   B27  P=0.000001 C=-1.000000

04d     B2: #	out( B36 B3 ) <- in( B1 )  Freq: 0.999999
04d     # checkcastPP of R11
04d     
04d     MEMBAR-acquire ! (empty encoding)
04d     # checkcastPP of R11
04d     movl    RBP, [R11 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
051     movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
056     NullCheck RBP

056     B3: #	out( B28 B4 ) <- in( B2 )  Freq: 0.999998
        nop 	# 10 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
067     jne,u   B28  P=0.000001 C=-1.000000

06d     B4: #	out( B26 B5 ) <- in( B3 )  Freq: 0.999997
06d     decode_heap_oop_not_null RAX,RBP
071     # checkcastPP of RAX
071     movl    RBX, [RAX + #12 (8-bit)]	# range
074     testl   RBX, RBX	# unsigned
076     jbe,u   B26  P=0.111194 C=6700.000000

07c     B5: #	out( B29 B6 ) <- in( B4 )  Freq: 0.888803
07c     movl    R11, RBX	# spill
07f     decl    R11	# int
082     cmpl    R11, RBX	# unsigned
085     jnb,u   B29  P=0.000001 C=-1.000000

08b     B6: #	out( B37 B7 ) <- in( B5 )  Freq: 0.888802
08b     movq    R9, R8	# spill
08e     movl    R8, [R8 + #8 (8-bit)]	# compressed klass ptr
092     NullCheck R8

092     B7: #	out( B33 B8 ) <- in( B6 )  Freq: 0.888801
        nop 	# 14 bytes pad for loops and calls
0a0     cmpl    R8, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$27+0x000000080104eb38: 0x00007fafd2389860:Constant:exact *	# compressed klass ptr
0a7     jne,u   B33  P=0.000001 C=-1.000000

0ad     B8: #	out( B30 B9 ) <- in( B7 )  Freq: 0.888801
0ad     movq    R10, RDX	# spill
0b0     movl    RDI, [RDX + #8 (8-bit)]	# compressed klass ptr
0b3     NullCheck RDX

0b3     B9: #	out( B30 B10 ) <- in( B8 )  Freq: 0.8888
0b3     cmpl    RDI, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0b9     jne,u   B30  P=0.000001 C=-1.000000

0bf     B10: #	out( B30 B11 ) <- in( B9 )  Freq: 0.888799
0bf     movq    RDI, RDX	# spill
0c2     # checkcastPP of RDI
0c2     movl    RDX, [RDI + #12 (8-bit)]	# range
0c5     cmpl    RCX, RDX	# unsigned
0c7     jnb,u   B30  P=0.000001 C=-1.000000

0cd     B11: #	out( B30 B12 ) <- in( B10 )  Freq: 0.888798
0cd     movslq  RBP, RDX	# i2l
0d0     movslq  R8, RBX	# i2l
0d3     movslq  RDX, RCX	# i2l
0d6     addq    R8, RDX	# long
0d9     decq    R8	# long
        nop 	# 4 bytes pad for loops and calls
0e0     cmpq    R8, RBP	# unsigned
0e3     jnb,u   B30  P=0.000001 C=-1.000000

0e9     B12: #	out( B23 B13 ) <- in( B11 )  Freq: 0.888797
0e9     movl    R10, [RAX + #16 (8-bit)]	# int
0ed     movl    [RDI + #16 + RDX << #2], R10	# int
0f2     movl    R10, RBX	# spill
0f5     addl    R10, #-3	# int
0f9     movl    RSI, #-2147483648	# int
0fe     cmpl    R11, R10
101     cmovll R10, RSI	# signed, int
105     movl    R8, #1	# int
10b     cmpl    R10, #1
10f     jle     B23  P=0.000001 C=-1.000000

115     B13: #	out( B31 B14 ) <- in( B12 )  Freq: 0.888796
115     movq    R11, RDX	# spill
118     addq    R11, #1	# long
        nop 	# 4 bytes pad for loops and calls
120     cmpq    R11, RBP	# unsigned
123     jnb,u   B31  P=0.000001 C=-1.000000

129     B14: #	out( B34 B15 ) <- in( B13 )  Freq: 0.888795
129     cmpl    RBX, #1	# unsigned
12c     jbe,u   B34  P=0.000001 C=-1.000000

132     B15: #	out( B35 B16 ) <- in( B14 )  Freq: 0.888794
132     cmpl    RBX, #4	# unsigned
135     jbe,u   B35  P=0.000001 C=-1.000000

13b     B16: #	out( B32 B17 ) <- in( B15 )  Freq: 0.888793
13b     movq    R11, RDX	# spill
13e     addq    R11, #4	# long
142     cmpq    R11, RBP	# unsigned
145     jnb,u   B32  P=0.000001 C=-1.000000

14b     B17: #	out( B19 ) <- in( B16 )  Freq: 0.888792
14b     # checkcastPP of R9
14b     movl    R14, #4000	# int
151     # TLS is in R15
151     xorl    R13, R13	# int
154     jmp,s   B19

156     B18: #	out( B19 ) <- in( B21 ) top-of-loop Freq: 7.10438
156     movdq   R9, XMM0	# spill
15b     movdl   RBX, XMM2	# spill

15f     B19: #	out( B20 ) <- in( B17 B18 ) Loop( B19-B18 ) Freq: 7.99317
15f     movl    R11, R10	# spill
162     subl    R11, R8	# int
165     cmpl    R10, R8
168     cmovll R11, R13	# signed, int
16c     cmpl    R11, #4000	# unsigned
173     cmovlnbe R11, R14	# unsigned, int
177     addl    R11, R8	# int
17a     movdq   XMM0, R9	# spill
17f     movdl   XMM2, RBX	# spill

183     B20: #	out( B20 B21 ) <- in( B19 B20 ) Loop( B20-B20 inner main of N112 strip mined) Freq: 71.8849
183     movl    RBX, RCX	# spill
185     addl    RBX, R8	# int
188     movslq  RSI, R8	# i2l
18b     movl    R9, [RAX + #16 + RSI << #2]	# int
190     movq    RBP, RDX	# spill
193     addq    RBP, RSI	# long
196     movl    [RDI + #16 + RBP << #2], R9	# int
19b     movl    R9, [RAX + #20 + RSI << #2]	# int
1a0     movl    [RDI + #20 + RBP << #2], R9	# int
1a5     movl    R9, [RAX + #24 + RSI << #2]	# int
1aa     movl    [RDI + #24 + RBP << #2], R9	# int
1af     movl    R9, [RAX + #28 + RSI << #2]	# int
1b4     movslq  RBX, RBX	# i2l
1b7     movl    [RDI + #28 + RBX << #2], R9	# int
1bc     addl    R8, #4	# int
1c0     cmpl    R8, R11
1c3     jl,s   B20	# loop end  P=0.888806 C=5955.000000

1c5     B21: #	out( B18 B22 ) <- in( B20 )  Freq: 7.99317
1c5     movq    R11, [R15 + #304 (32-bit)]	# ptr
1cc     testl   rax, [R11]	# Safepoint: poll for GC        # jdk.incubator.vector.IntVector::stOp @ bci:35 (line 340) L[0]=_ L[1]=RDI L[2]=RCX L[3]=XMM0 L[4]=RAX L[5]=R8
        # OopMap {rdi=Oop rax=Oop xmm0=Oop off=460/0x1cc}
1cf     cmpl    R8, R10
1d2     jl     B18  P=0.888806 C=5955.000000

1d8     B22: #	out( B23 ) <- in( B21 )  Freq: 0.888792
1d8     movdl   RBX, XMM2	# spill

1dc     B23: #	out( B26 B24 ) <- in( B12 B22 )  Freq: 0.888793
        nop 	# 4 bytes pad for loops and calls
1e0     cmpl    R8, RBX
1e3     jge,s   B26  P=0.500000 C=-1.000000

1e5     B24: #	out( B25 ) <- in( B23 )  Freq: 0.444397
1e5     # castII of R8
        nop 	# 3 bytes pad for loops and calls

1e8     B25: #	out( B25 B26 ) <- in( B24 B25 ) Loop( B25-B25 inner post of N450) Freq: 0.888793
1e8     movslq  R10, R8	# i2l
1eb     movl    R9, [RAX + #16 + R10 << #2]	# int
1f0     movq    R11, RDX	# spill
1f3     addq    R11, R10	# long
1f6     movl    [RDI + #16 + R11 << #2], R9	# int
1fb     incl    R8	# int
        nop 	# 2 bytes pad for loops and calls
200     cmpl    R8, RBX
203     jl,s   B25	# loop end  P=0.500000 C=5955.000000

205     B26: #	out( N342 ) <- in( B25 B23 B4 )  Freq: 0.999987
205     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

217     ret

218     B27: #	out( N342 ) <- in( B1 )  Freq: 1e-06
218     movl    RSI, #-34	# int
21d     movl    RBP, RCX	# spill
21f     movq    [rsp + #0], RDX	# spill
223     movq    [rsp + #8], R8	# spill
228     movq    [rsp + #16], R11	# spill
        nop 	# 2 bytes pad for loops and calls
22f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=rsp + #0 L[2]=RBP L[3]=rsp + #8 L[4]=_ L[5]=_ STK[0]=rsp + #16
        # OopMap {[0]=Oop [8]=Oop [16]=Oop off=564/0x234}
234     stop	# ShouldNotReachHere

248     B28: #	out( N342 ) <- in( B3 )  Freq: 9.99998e-07
248     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
24f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # OopMap {rbp=NarrowOop off=596/0x254}
254     stop	# ShouldNotReachHere

268     B29: #	out( B30 ) <- in( B5 )  Freq: 9.00606e-07
268     movq    R10, RDX	# spill
26b     movq    R9, R8	# spill

26e     B30: #	out( N342 ) <- in( B8 B9 B29 B10 B11 B37 B33 )  Freq: 6.28062e-06
26e     movl    RSI, #-138	# int
273     movl    RBP, RCX	# spill
275     movq    [rsp + #0], RAX	# spill
279     movq    [rsp + #8], R10	# spill
27e     movq    [rsp + #16], R9	# spill
283     movl    [rsp + #24], RBX	# spill
287     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:14 (line 340) L[0]=_ L[1]=rsp + #8 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #0 L[5]=#0 STK[0]=#0 STK[1]=rsp + #24
        # OopMap {[0]=Oop [8]=Oop [16]=Oop off=652/0x28c}
28c     stop	# ShouldNotReachHere

2a0     B31: #	out( N342 ) <- in( B13 )  Freq: 9.00598e-07
2a0     stop	# ShouldNotReachHere

2b4     B32: #	out( N342 ) <- in( B16 )  Freq: 9.00596e-07
2b4     stop	# ShouldNotReachHere

2c8     B33: #	out( B30 ) <- in( B7 )  Freq: 8.88801e-07
2c8     movq    R10, RDX	# spill
2cb     jmp,s   B30

2cd     B34: #	out( N342 ) <- in( B14 )  Freq: 8.88795e-07
2cd     stop	# ShouldNotReachHere

2e1     B35: #	out( N342 ) <- in( B15 )  Freq: 8.88794e-07
2e1     stop	# ShouldNotReachHere

2f5     B36: #	out( N342 ) <- in( B2 )  Freq: 1.01328e-06
2f5     movl    RSI, #-12	# int
2fa     movl    RBP, RCX	# spill
2fc     movq    [rsp + #0], RDX	# spill
300     movq    [rsp + #8], R8	# spill
        nop 	# 2 bytes pad for loops and calls
307     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=rsp + #0 L[2]=RBP L[3]=rsp + #8 L[4]=_ L[5]=_
        # OopMap {[0]=Oop [8]=Oop off=780/0x30c}
30c     stop	# ShouldNotReachHere

320     B37: #	out( B30 ) <- in( B6 )  Freq: 9.00605e-07
320     movq    R10, RDX	# spill
323     jmp     B30

--------------------------------------------------------------------------------
    305   30    b        java.lang.invoke.Invokers$Holder::linkToTargetMethod (8 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 30 ------------------------
{method}
 - this oop:          0x0000000800271e10
 - method holder:     'java/lang/invoke/Invokers$Holder'
 - constants:         0x00000008008e6018 constant pool [99] {0x00000008008e6018} for 'java/lang/invoke/Invokers$Holder' cache=0x0000000800271738
 - access:            0x81000008  static 
 - name:              'linkToTargetMethod'
 - signature:         '(Ljava/lang/Object;)Ljava/lang/Object;'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - intrinsic id:      343 _compiledLambdaForm
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a80: 0xb0000000 i2c: 0x000000010f027060 c2i: 0x000000010f02711e c2iUV: 0x000000010f0270e4 c2iNCI: 0x000000010f02715b
 - compiled entry     0x0000000800000280
 - code size:         8
 - code start:        0x00000008008e6900
 - code end (excl):   0x00000008008e6908
 - method data:       0x0000000115931bc0
 - checked ex length: 0
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 30 -----------------------
#
#  java/lang/Object * ( java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/lang/Object *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) <- in( B7 B5 B4 B6 )  Freq: 1

000     B1: #	out( B7 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
010     NullCheck RSI

010     B2: #	out( B5 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    R11, narrowklass: precise klass java/lang/invoke/BoundMethodHandle$Species_L: 0x00007fafd21b1640:Constant:exact *	# compressed klass ptr
017     jne,us  B5  P=0.000000 C=-1.000000

019     B3: #	out( B6 B4 ) <- in( B2 )  Freq: 0.999999
019     # checkcastPP of RSI
        nop 	# 2 bytes pad for loops and calls
01b     call,static  java.lang.invoke.MethodHandle::invokeBasic()L
        # java.lang.invoke.Invokers$Holder::linkToTargetMethod @ bci:4 L[0]=_
        # OopMap {off=32/0x20}

020     B4: #	out( N1 ) <- in( B3 )  Freq: 0.999979
        # Block is sole successor of call
020     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

032     ret

033     B5: #	out( N1 ) <- in( B2 )  Freq: 1e-35
033     movq    RBP, RSI	# spill
036     movl    RSI, #-154	# int
03b     call,static  wrapper for: uncommon_trap(reason='speculate_class_check' action='maybe_recompile' debug_id='0')
        # java.lang.invoke.Invokers$Holder::linkToTargetMethod @ bci:1 L[0]=_ STK[0]=RBP
        # OopMap {rbp=Oop off=64/0x40}
040     stop	# ShouldNotReachHere

054     B6: #	out( N1 ) <- in( B3 )  Freq: 9.99999e-06
054     # exception oop is in rax; no code emitted
054     movq    RSI, RAX	# spill
057     addq    rsp, 16	# Destroy frame
	popq    rbp

05c     jmp     rethrow_stub

061     B7: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
061     movl    RSI, #-164	# int
        nop 	# 1 bytes pad for loops and calls
067     call,static  wrapper for: uncommon_trap(reason='speculate_null_check' action='make_not_entrant' debug_id='0')
        # java.lang.invoke.Invokers$Holder::linkToTargetMethod @ bci:1 L[0]=_ STK[0]=#NULL
        # OopMap {off=108/0x6c}
06c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    307   31    b        java.lang.invoke.LambdaForm$MH/0x0000000801000400::invoke (8 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 31 ------------------------
{method}
 - this oop:          0x0000000115c00278
 - method holder:     'java/lang/invoke/LambdaForm$MH+0x0000000801000400'
 - constants:         0x0000000115c00030 constant pool [41] {0x0000000115c00030} for 'java/lang/invoke/LambdaForm$MH+0x0000000801000400' cache=0x0000000115c003b0
 - access:            0x81000008  static 
 - name:              'invoke'
 - signature:         '(Ljava/lang/Object;)Ljava/lang/Object;'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - intrinsic id:      343 _compiledLambdaForm
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         8
 - code start:        0x0000000115c00268
 - code end (excl):   0x0000000115c00270
 - method data:       0x0000000115c00508
 - checked ex length: 0
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 31 -----------------------
#
#  java/lang/Object * ( java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/lang/Object *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) <- in( B5 B4 B3 )  Freq: 1

000     B1: #	out( B5 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
010     NullCheck RSI

010     B2: #	out( B4 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    R11, narrowklass: precise klass java/lang/invoke/BoundMethodHandle$Species_L: 0x00007fafd1fa9620:Constant:exact *	# compressed klass ptr
017     jne,us  B4  P=0.000000 C=-1.000000

019     B3: #	out( N1 ) <- in( B2 )  Freq: 0.999999
019     # checkcastPP of RSI
019     movl    R11, [RSI + #28 (8-bit)]	# compressed ptr ! Field: java/lang/invoke/BoundMethodHandle$Species_L.argL0 (constant)
01d     decode_heap_oop RAX,R11
049     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

05b     ret

05c     B4: #	out( N1 ) <- in( B2 )  Freq: 1e-35
05c     movq    RBP, RSI	# spill
05f     movl    RSI, #-154	# int
        nop 	# 3 bytes pad for loops and calls
067     call,static  wrapper for: uncommon_trap(reason='speculate_class_check' action='maybe_recompile' debug_id='0')
        # java.lang.invoke.LambdaForm$MH/0x0000000801000400::invoke @ bci:1 L[0]=_ STK[0]=RBP
        # OopMap {rbp=Oop off=108/0x6c}
06c     stop	# ShouldNotReachHere

080     B5: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
080     movl    RSI, #-164	# int
        nop 	# 2 bytes pad for loops and calls
087     call,static  wrapper for: uncommon_trap(reason='speculate_null_check' action='make_not_entrant' debug_id='0')
        # java.lang.invoke.LambdaForm$MH/0x0000000801000400::invoke @ bci:1 L[0]=_ STK[0]=#NULL
        # OopMap {off=140/0x8c}
08c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    314   32    b        jdk.incubator.vector.IntVector$IntSpecies::elementType (4 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 32 ------------------------
{method}
 - this oop:          0x000000011586bda8
 - method holder:     'jdk/incubator/vector/IntVector$IntSpecies'
 - constants:         0x000000011586ae00 constant pool [372]/operands[14] {0x000000011586ae00} for 'jdk/incubator/vector/IntVector$IntSpecies' cache=0x00000001158761d0
 - access:            0x81000011  public final 
 - name:              'elementType'
 - signature:         '()Ljava/lang/Class;'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         4
 - code start:        0x000000011586bd80
 - code end (excl):   0x000000011586bd84
 - method data:       0x0000000115931e00
 - checked ex length: 0
 - linenumber start:  0x000000011586bd84
 - localvar length:   1
 - localvar start:    0x000000011586bd90

------------------------ OptoAssembly for Compile_id = 32 -----------------------
#
#  java/lang/Class:exact * ( jdk/incubator/vector/IntVector$IntSpecies:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector$IntSpecies:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N15: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N15 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movq    RAX, java/lang/Class:exact *	# ptr
036     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

048     ret

--------------------------------------------------------------------------------
    315   33    b        jdk.incubator.vector.IntVector$IntSpecies::dummyVector (8 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 33 ------------------------
{method}
 - this oop:          0x000000011586c828
 - method holder:     'jdk/incubator/vector/IntVector$IntSpecies'
 - constants:         0x000000011586ae00 constant pool [372]/operands[14] {0x000000011586ae00} for 'jdk/incubator/vector/IntVector$IntSpecies' cache=0x00000001158761d0
 - access:            0x81000010  final 
 - name:              'dummyVector'
 - signature:         '()Ljdk/incubator/vector/IntVector;'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         8
 - code start:        0x000000011586c800
 - code end (excl):   0x000000011586c808
 - method data:       0x0000000115931f80
 - checked ex length: 0
 - linenumber start:  0x000000011586c808
 - localvar length:   1
 - localvar start:    0x000000011586c812

------------------------ OptoAssembly for Compile_id = 33 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/IntVector$IntSpecies:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector$IntSpecies:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N50: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B5 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (216 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movl    R10, [RSI + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
030     movl    R8, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
035     NullCheck R10

035     B2: #	out( B4 B3 ) <- in( B1 )  Freq: 1
        nop 	# 11 bytes pad for loops and calls
040     cmpl    R8, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1fdf710:Constant:exact *	# compressed klass ptr
047     jne,us  B4  P=0.000000 C=-1.000000

049     B3: #	out( N50 ) <- in( B2 )  Freq: 1
049     decode_heap_oop_not_null RAX,R10
04d     # checkcastPP of RAX
04d     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

05f     ret

060     B4: #	out( N50 ) <- in( B2 )  Freq: 1e-35
060     movl    RSI, #-34	# int
065     movl    RBP, R10	# spill
        nop 	# 3 bytes pad for loops and calls
06b     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:4 (line 3574) L[0]=_ STK[0]=RBP
        # OopMap {rbp=NarrowOop off=112/0x70}
070     stop	# ShouldNotReachHere

084     B5: #	out( N50 ) <- in( B1 )  Freq: 4.76837e-07
084     movq    RBP, RSI	# spill
087     movl    [rsp + #4], R10	# spill
08c     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
093     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVector @ bci:6 (line 296) L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:1 (line 3574) L[0]=_
        # OopMap {rbp=Oop [4]=NarrowOop off=152/0x98}
098     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    317   34    b        jdk.incubator.vector.AbstractSpecies::dummyVector (16 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 34 ------------------------
{method}
 - this oop:          0x0000000115872f00
 - method holder:     'jdk/incubator/vector/AbstractSpecies'
 - constants:         0x000000011586e0c8 constant pool [654]/operands[45] {0x000000011586e0c8} for 'jdk/incubator/vector/AbstractSpecies' cache=0x00000001158753c0
 - access:            0x81000000  
 - name:              'dummyVector'
 - signature:         '()Ljdk/incubator/vector/AbstractVector;'
 - max stack:         2
 - max locals:        2
 - size of params:    1
 - method size:       13
 - vtable index:      12
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         16
 - code start:        0x0000000115872ec0
 - code end (excl):   0x0000000115872ed0
 - method data:       0x0000000115932168
 - checked ex length: 0
 - linenumber start:  0x0000000115872ed0
 - localvar length:   2
 - localvar start:    0x0000000115872edc

------------------------ OptoAssembly for Compile_id = 34 -----------------------
#
#  jdk/incubator/vector/AbstractVector * ( jdk/incubator/vector/AbstractSpecies:NotNull * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/AbstractSpecies:NotNull *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N34: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movl    R11, [RSI + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
030     testl   R11, R11	# compressed ptr
033     je,s   B3  P=0.000000 C=6700.000000

035     B2: #	out( N34 ) <- in( B1 )  Freq: 1
035     decode_heap_oop_not_null RAX,R11
039     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

04b     ret

04c     B3: #	out( N34 ) <- in( B1 )  Freq: 4.76837e-07
04c     movq    RBP, RSI	# spill
04f     movl    [rsp + #4], R11	# spill
054     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
05b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVector @ bci:6 (line 296) L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap {rbp=Oop [4]=NarrowOop off=96/0x60}
060     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    318   35    b        jdk.incubator.vector.AbstractSpecies::laneCount (5 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 35 ------------------------
{method}
 - this oop:          0x00000001158719f8
 - method holder:     'jdk/incubator/vector/AbstractSpecies'
 - constants:         0x000000011586e0c8 constant pool [654]/operands[45] {0x000000011586e0c8} for 'jdk/incubator/vector/AbstractSpecies' cache=0x00000001158753c0
 - access:            0x81000010  final 
 - name:              'laneCount'
 - signature:         '()I'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         5
 - code start:        0x00000001158719d8
 - code end (excl):   0x00000001158719dd
 - method data:       0x0000000115932360
 - checked ex length: 0
 - linenumber start:  0x00000001158719dd
 - localvar length:   1
 - localvar start:    0x00000001158719e2

------------------------ OptoAssembly for Compile_id = 35 -----------------------
#
#  int ( jdk/incubator/vector/AbstractSpecies:NotNull * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/AbstractSpecies:NotNull *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N16: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N16 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    RAX, [RSI + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
02f     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

041     ret

--------------------------------------------------------------------------------
    319   36    b        jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize (119 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 36 ------------------------
{method}
 - this oop:          0x00000001158c7108
 - method holder:     'jdk/incubator/vector/VectorIntrinsics'
 - constants:         0x00000001158c65d0 constant pool [194] {0x00000001158c65d0} for 'jdk/incubator/vector/VectorIntrinsics' cache=0x00000001158c79f8
 - access:            0x81000008  static 
 - name:              'checkFromIndexSize'
 - signature:         '(III)I'
 - max stack:         6
 - max locals:        4
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b030: 0xaaa00000 i2c: 0x000000010efd9d60 c2i: 0x000000010efd9e49 c2iUV: 0x000000010efd9e0f c2iNCI: 0x000000010efd9e86
 - compiled entry     0x000000010efd9e49
 - code size:         119
 - code start:        0x00000001158c7040
 - code end (excl):   0x00000001158c70b7
 - method data:       0x00000001159324e8
 - checked ex length: 0
 - linenumber start:  0x00000001158c70b7
 - localvar length:   4
 - localvar start:    0x00000001158c70ce

------------------------ OptoAssembly for Compile_id = 36 -----------------------
#
#  int ( int, int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B4 B5 B3 )  Freq: 1

000     B1: #	out( B4 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    RAX, RSI	# spill
00e     testl   RSI, RSI
010     jl,s   B4  P=0.000000 C=6700.000000

012     B2: #	out( B5 B3 ) <- in( B1 )  Freq: 1
012     movl    RBP, RCX	# spill
014     subl    RBP, RDX	# int
016     cmpl    RSI, RBP
018     jg,s   B5  P=0.000000 C=6700.000000

01a     B3: #	out( N1 ) <- in( B2 )  Freq: 0.999999
01a     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

02c     ret

02d     B4: #	out( N1 ) <- in( B1 )  Freq: 5e-07
02d     movl    RSI, #-187	# int
032     movl    [rsp + #0], RDX	# spill
035     movl    [rsp + #4], RCX	# spill
039     movl    [rsp + #8], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
03f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:52 (line 76) L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #8
        # OopMap {off=68/0x44}
044     stop	# ShouldNotReachHere

058     B5: #	out( N1 ) <- in( B2 )  Freq: 4.76837e-07
058     movl    RSI, #-187	# int
05d     movl    [rsp + #4], RDX	# spill
061     movl    [rsp + #8], RCX	# spill
065     movl    [rsp + #12], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
06b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #12 L[1]=rsp + #4 L[2]=rsp + #8 L[3]=_ STK[0]=rsp + #12 STK[1]=RBP
        # OopMap {off=112/0x70}
070     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    321   37    b        jdk.incubator.vector.Int256Vector::vspecies (4 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 37 ------------------------
{method}
 - this oop:          0x000000011589ef80
 - method holder:     'jdk/incubator/vector/Int256Vector'
 - constants:         0x000000011589d058 constant pool [746]/operands[52] {0x000000011589d058} for 'jdk/incubator/vector/Int256Vector' cache=0x00000001158a91c8
 - access:            0x81000011  public final 
 - name:              'vspecies'
 - signature:         '()Ljdk/incubator/vector/IntVector$IntSpecies;'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      117
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         4
 - code start:        0x000000011589ef60
 - code end (excl):   0x000000011589ef64
 - method data:       0x00000001159328a8
 - checked ex length: 0
 - linenumber start:  0x000000011589ef64
 - localvar length:   1
 - localvar start:    0x000000011589ef6a

------------------------ OptoAssembly for Compile_id = 37 -----------------------
#
#  jdk/incubator/vector/IntVector$IntSpecies:exact * ( jdk/incubator/vector/Int256Vector:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/Int256Vector:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N15: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N15 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movq    RAX, jdk/incubator/vector/IntVector$IntSpecies:exact *	# ptr
036     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

048     ret

--------------------------------------------------------------------------------
    322   38    b        jdk.incubator.vector.IntVector$IntSpecies::vectorType (5 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 38 ------------------------
{method}
 - this oop:          0x000000011586bf50
 - method holder:     'jdk/incubator/vector/IntVector$IntSpecies'
 - constants:         0x000000011586ae00 constant pool [372]/operands[14] {0x000000011586ae00} for 'jdk/incubator/vector/IntVector$IntSpecies' cache=0x00000001158761d0
 - access:            0x81000011  public final 
 - name:              'vectorType'
 - signature:         '()Ljava/lang/Class;'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      11
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         5
 - code start:        0x000000011586bf28
 - code end (excl):   0x000000011586bf2d
 - method data:       0x0000000115932a28
 - checked ex length: 0
 - linenumber start:  0x000000011586bf2d
 - localvar length:   1
 - localvar start:    0x000000011586bf38

------------------------ OptoAssembly for Compile_id = 38 -----------------------
#
#  java/lang/Class:exact * ( jdk/incubator/vector/IntVector$IntSpecies:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector$IntSpecies:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N18: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N18 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    R11, [RSI + #44 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.vectorType (constant)
030     decode_heap_oop RAX,R11
05c     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

06e     ret

--------------------------------------------------------------------------------
    323   39    b        jdk.incubator.vector.IntVector::arrayAddress (11 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 39 ------------------------
{method}
 - this oop:          0x0000000115852738
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x81000008  static 
 - name:              'arrayAddress'
 - signature:         '([II)J'
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044be0: 0xba000000 i2c: 0x000000010effae60 c2i: 0x000000010effaf47 c2iUV: 0x000000010effaf0d c2iNCI: 0x000000010effaf84
 - compiled entry     0x000000010effaf47
 - code size:         11
 - code start:        0x0000000115852700
 - code end (excl):   0x000000011585270b
 - method data:       0x0000000115932bb0
 - checked ex length: 0
 - linenumber start:  0x000000011585270b
 - localvar length:   2
 - localvar start:    0x0000000115852716

------------------------ OptoAssembly for Compile_id = 39 -----------------------
#
#  long/half ( int[int:>=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: int[int:>=0]:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) <- in( B1 )  Freq: 1

000     B1: #	out( N1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     movslq  RAX, RDX	# i2l
00f     salq    RAX, #2
013     addq    RAX, #16	# long
017     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

029     ret

--------------------------------------------------------------------------------
    329   40    b        jdk.incubator.vector.Int256Vector::length (4 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 40 ------------------------
{method}
 - this oop:          0x000000011589f2c0
 - method holder:     'jdk/incubator/vector/Int256Vector'
 - constants:         0x000000011589d058 constant pool [746]/operands[52] {0x000000011589d058} for 'jdk/incubator/vector/Int256Vector' cache=0x00000001158a91c8
 - access:            0x81000011  public final 
 - name:              'length'
 - signature:         '()I'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      7
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         4
 - code start:        0x000000011589f2a0
 - code end (excl):   0x000000011589f2a4
 - method data:       0x0000000115932d40
 - checked ex length: 0
 - linenumber start:  0x000000011589f2a4
 - localvar length:   1
 - localvar start:    0x000000011589f2aa

------------------------ OptoAssembly for Compile_id = 40 -----------------------
#
#  int ( jdk/incubator/vector/Int256Vector:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/Int256Vector:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N15: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N15 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    RAX, #8	# int
031     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

043     ret

--------------------------------------------------------------------------------
    331   41    b        Bar::testSimple (20 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 41 ------------------------
{method}
 - this oop:          0x0000000115c01578
 - method holder:     'Bar'
 - constants:         0x0000000115c01068 constant pool [97]/operands[10] {0x0000000115c01068} for 'Bar' cache=0x0000000115c01940
 - access:            0x81000009  public static 
 - name:              'testSimple'
 - signature:         '()V'
 - max stack:         4
 - max locals:        1
 - size of params:    0
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae00: 0x i2c: 0x000000010efe17e0 c2i: 0x000000010efe18c0 c2iUV: 0x000000010efe1886 c2iNCI: 0x000000010efe18fd
 - compiled entry     0x000000010efe18c0
 - code size:         20
 - code start:        0x0000000115c01558
 - code end (excl):   0x0000000115c0156c
 - method data:       0x0000000115c03800
 - checked ex length: 0
 - linenumber start:  0x0000000115c0156c
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 41 -----------------------
#
#  void (  )
#
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B8 B6 B7 B5 B9 )  Freq: 1

000     B1: #	out( B8 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (384 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

00c     movq    R10, java/lang/Class:exact *	# ptr
016     movl    R11, [R10 + #116 (8-bit)]	# compressed ptr ! Field: Bar.a
        nop 	# 6 bytes pad for loops and calls
020     movl    R9, [R12 + R11 << 3 + #12] (compressed oop addressing)	# range
025     NullCheck R11

025     B2: #	out( B6 B3 ) <- in( B1 )  Freq: 0.999999
025     movl    RBP, R9	# spill
028     addl    RBP, #-8	# int
02b     testl   RBP, RBP
02d     jl,s   B6  P=0.000000 C=6701.000000

02f     B3: #	out( B9 B4 ) <- in( B2 )  Freq: 0.999999
02f     movl    R8, [R10 + #120 (8-bit)]	# compressed ptr ! Field: Bar.b
033     movl    R10, [R12 + R8 << 3 + #12] (compressed oop addressing)	# range
038     NullCheck R8

038     B4: #	out( B7 B5 ) <- in( B3 )  Freq: 0.999997
038     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
03f     movl    RBP, R10	# spill
042     addl    RBP, #-8	# int
045     testl   RBP, RBP
047     jl,s   B7  P=0.000000 C=6701.000000

049     B5: #	out( N1 ) <- in( B4 )  Freq: 0.999997
049     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
050     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

065     ret

066     B6: #	out( N1 ) <- in( B2 )  Freq: 4.76837e-07
066     movl    RSI, #-187	# int
06b     movl    [rsp + #0], R11	# spill
06f     movl    [rsp + #4], R9	# spill
074     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=#0 L[1]=#8 L[2]=rsp + #4 L[3]=_ STK[0]=#0 STK[1]=RBP
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=#Ptr0x00007fafd239d880 L[1]=rsp + #0 L[2]=_ L[3]=_
        # Bar::testSimple @ bci:7 (line 11) L[0]=_
        # OopMap {[0]=NarrowOop off=124/0x7c}
07c     stop	# ShouldNotReachHere

090     B7: #	out( N1 ) <- in( B4 )  Freq: 4.76836e-07
090     movl    RSI, #-187	# int
095     movl    [rsp + #0], R8	# spill
099     movl    [rsp + #4], R10	# spill
09e     vmovdqu [rsp + 32],XMM0	# spill
0a4     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=#0 L[1]=#8 L[2]=rsp + #4 L[3]=_ STK[0]=#0 STK[1]=RBP
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=#ScObj0 L[1]=rsp + #0 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #32 }
        # Bar::testSimple @ bci:16 (line 12) L[0]=_
        # OopMap {[0]=NarrowOop off=172/0xac}
0ac     stop	# ShouldNotReachHere

0c0     B8: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
0c0     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
0c8     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:8 (line 2689) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # Bar::testSimple @ bci:7 (line 11) L[0]=_
        # OopMap {off=208/0xd0}
0d0     stop	# ShouldNotReachHere

0e4     B9: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
0e4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
0ec     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::intoArray @ bci:6 (line 2960) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # Bar::testSimple @ bci:16 (line 12) L[0]=_
        # OopMap {off=244/0xf4}
0f4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    336   42    b        jdk.incubator.vector.IntVector::fromArray (28 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 42 ------------------------
{method}
 - this oop:          0x0000000115850820
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x81000009  public static 
 - name:              'fromArray'
 - signature:         '(Ljdk/incubator/vector/VectorSpecies;[II)Ljdk/incubator/vector/IntVector;'
 - max stack:         4
 - max locals:        4
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81aef0: 0xbba00000 i2c: 0x000000010efd72e0 c2i: 0x000000010efd73cb c2iUV: 0x000000010efd7391 c2iNCI: 0x000000010efd7408
 - compiled entry     0x000000010efd73cb
 - code size:         28
 - code start:        0x00000001158507c0
 - code end (excl):   0x00000001158507dc
 - method data:       0x0000000115932ec0
 - checked ex length: 0
 - linenumber start:  0x00000001158507dc
 - localvar length:   4
 - localvar start:    0x00000001158507e4

------------------------ OptoAssembly for Compile_id = 42 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/VectorSpecies *, int[int:>=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorSpecies *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B21 B17 B22 B18 B19 B23 B20 B26 B12 )  Freq: 1

000     B1: #	out( B21 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (440 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c     movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
010     NullCheck RSI

010     B2: #	out( B17 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007fafd226e800:Constant:exact *	# compressed klass ptr
017     jne,u   B17  P=0.000001 C=-1.000000

01d     B3: #	out( B22 B4 ) <- in( B2 )  Freq: 0.999998
        nop 	# 3 bytes pad for loops and calls
020     movl    R9, [RDX + #12 (8-bit)]	# range
024     NullCheck RDX

024     B4: #	out( B18 B5 ) <- in( B3 )  Freq: 0.999997
024     # checkcastPP of RSI
024     movl    R11, [RSI + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
028     movl    R10, RCX	# spill
02b     testl   RCX, RCX
02d     jl     B18  P=0.000000 C=6701.000000

033     B5: #	out( B19 B6 ) <- in( B4 )  Freq: 0.999996
033     movl    RBP, R9	# spill
036     subl    RBP, R11	# int
039     cmpl    RCX, RBP
        nop 	# 5 bytes pad for loops and calls
040     jg     B19  P=0.000000 C=6701.000000

046     B6: #	out( B23 B7 ) <- in( B5 )  Freq: 0.999996
046     movl    RBP, [RSI + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
049     movl    R8, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
04e     NullCheck RBP

04e     B7: #	out( B20 B8 ) <- in( B6 )  Freq: 0.999996
04e     cmpl    R8, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd226e8d0:Constant:exact *	# compressed klass ptr
055     jne,u   B20  P=0.000000 C=-1.000000

05b     B8: #	out( B13 B9 ) <- in( B7 )  Freq: 0.999996
05b     movslq  R8, RCX	# i2l
05e     salq    R8, #2
062     movq    R11, R8	# spill
065     addq    R11, #16	# long
069     movq    [rsp + #24], R11	# spill
06e     # TLS is in R15
06e     movq    RBP, [R15 + #328 (32-bit)]	# ptr
075     movq    R11, RBP	# spill
078     addq    R11, #48	# ptr
07c     # TLS is in R15
        nop 	# 4 bytes pad for loops and calls
080     cmpq    R11, [R15 + #344 (32-bit)]	# raw ptr
087     jnb,u   B13  P=0.000100 C=-1.000000

08d     B9: #	out( B10 ) <- in( B8 )  Freq: 0.999896
08d     # TLS is in R15
08d     movq    [R15 + #328 (32-bit)], R11	# ptr
094     PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09c     movq    [RBP], #1	# long
0a4     PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ac     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0b3     PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0bb     movl    [RBP + #12 (8-bit)], #8	# int
0c2     PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ca     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
0ce     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
0d2     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
0d6     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0da     B10: #	out( B15 B11 ) <- in( B14 B9 )  Freq: 0.999996
0da     
0da     MEMBAR-storestore (empty encoding)
0da     # checkcastPP of RBP
0da     load_vector XMM0,[RDX + #16 + R8]
0e1     store_vector [RBP + #16 (8-bit)],XMM0
	
0e6     # TLS is in R15
0e6     movq    RAX, [R15 + #328 (32-bit)]	# ptr
0ed     movq    R11, RAX	# spill
0f0     addq    R11, #16	# ptr
0f4     # TLS is in R15
        nop 	# 12 bytes pad for loops and calls
100     cmpq    R11, [R15 + #344 (32-bit)]	# raw ptr
107     jnb,u   B15  P=0.000100 C=-1.000000

10d     B11: #	out( B12 ) <- in( B10 )  Freq: 0.999896
10d     # TLS is in R15
10d     movq    [R15 + #328 (32-bit)], R11	# ptr
114     PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
11c     movq    [RAX], #1	# long
123     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd226e8d0:Constant:exact *	# compressed klass ptr

12a     B12: #	out( N1 ) <- in( B16 B11 )  Freq: 0.999996
12a     encode_heap_oop_not_null R10,RBP
173     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
177     
177     MEMBAR-storestore (empty encoding)
177     # checkcastPP of RAX
177     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

18c     ret

18d     B13: #	out( B25 B14 ) <- in( B8 )  Freq: 0.000100016
18d     movq    [rsp + #8], R8	# spill
192     movl    [rsp + #0], RCX	# spill
195     movq    RBP, RDX	# spill
198     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
1a2     movl    RDX, #8	# int
        nop 	# 1 bytes pad for loops and calls
1a8     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::fromArray0Template @ bci:31 (line 3209) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fafd239c2f0 STK[1]=#Ptr0x00007fafd239dbe0 STK[2]=#8 STK[3]=RBP STK[4]=rsp + #24 STK[5]=_ STK[6]=RBP STK[7]=rsp + #0 STK[8]=#Ptr0x00007fafd239c350 STK[9]=#Ptr0x00007fafd23a1b60
        # jdk.incubator.vector.Int256Vector::fromArray0 @ bci:3 (line 789) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:24 (line 2691) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop off=432/0x1b0}

1b0     B14: #	out( B10 ) <- in( B13 )  Freq: 0.000100014
        # Block is sole successor of call
1b0     movq    RDX, RBP	# spill
1b3     movl    R10, [rsp + #0]	# spill
1b7     movq    R8, [rsp + #8]	# spill
1bc     movq    RBP, RAX	# spill
        nop 	# 1 bytes pad for loops and calls
1c0     jmp     B10

1c5     B15: #	out( B24 B16 ) <- in( B10 )  Freq: 0.000100016
1c5     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd226e8d0:Constant:exact *	# ptr
1cf     movq    [rsp + #8], RDX	# spill
1d4     movl    [rsp + #16], R10	# spill
        nop 	# 3 bytes pad for loops and calls
1dc     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.IntVector::fromArray0Template @ bci:31 (line 3209) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fafd239c2f0 STK[1]=#Ptr0x00007fafd239dbe0 STK[2]=#8 STK[3]=rsp + #8 STK[4]=rsp + #24 STK[5]=_ STK[6]=rsp + #8 STK[7]=rsp + #16 STK[8]=#Ptr0x00007fafd239c350 STK[9]=#Ptr0x00007fafd23a1b60
        # jdk.incubator.vector.Int256Vector::fromArray0 @ bci:3 (line 789) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:24 (line 2691) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [8]=Oop off=484/0x1e4}

1e4     B16: #	out( B12 ) <- in( B15 )  Freq: 0.000100014
        # Block is sole successor of call
1e4     jmp     B12

1e9     B17: #	out( N1 ) <- in( B2 )  Freq: 9.99999e-07
1e9     movq    [rsp + #0], RDX	# spill
1ed     movl    [rsp + #8], RCX	# spill
1f1     movq    [rsp + #16], RSI	# spill
1f6     movl    RSI, #-34	# int
        nop 	# 1 bytes pad for loops and calls
1fc     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:2 (line 2689) L[0]=rsp + #16 L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=rsp + #8 STK[1]=rsp + #16
        # OopMap {[0]=Oop [16]=Oop off=516/0x204}
204     stop	# ShouldNotReachHere

218     B18: #	out( N1 ) <- in( B4 )  Freq: 4.99998e-07
218     movq    RBP, RSI	# spill
21b     movq    [rsp + #0], RDX	# spill
21f     movl    [rsp + #12], RCX	# spill
223     movl    [rsp + #16], R11	# spill
228     movl    [rsp + #20], R9	# spill
22d     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
234     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:52 (line 76) L[0]=rsp + #12 L[1]=rsp + #16 L[2]=rsp + #20 L[3]=_ STK[0]=rsp + #12
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop off=572/0x23c}
23c     stop	# ShouldNotReachHere

250     B19: #	out( N1 ) <- in( B5 )  Freq: 4.76835e-07
250     movq    [rsp + #0], RSI	# spill
254     movq    [rsp + #8], RDX	# spill
259     movl    [rsp + #20], RCX	# spill
25d     movl    [rsp + #24], R11	# spill
262     movl    [rsp + #28], R9	# spill
267     movl    RSI, #-187	# int
26c     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #20 L[1]=rsp + #24 L[2]=rsp + #28 L[3]=_ STK[0]=rsp + #20 STK[1]=RBP
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=_
        # OopMap {[0]=Oop [8]=Oop off=628/0x274}
274     stop	# ShouldNotReachHere

288     B20: #	out( N1 ) <- in( B7 )  Freq: 1e-35
288     movl    RSI, #-34	# int
28d     movq    [rsp + #0], RDX	# spill
291     movl    [rsp + #8], RCX	# spill
        nop 	# 3 bytes pad for loops and calls
298     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:4 (line 3574) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::fromArray @ bci:19 (line 2691) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_
        # OopMap {rbp=NarrowOop [0]=Oop off=672/0x2a0}
2a0     stop	# ShouldNotReachHere

2b4     B21: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
2b4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
2bc     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:2 (line 2689) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=708/0x2c4}
2c4     stop	# ShouldNotReachHere

2d8     B22: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
2d8     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
2e0     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray @ bci:8 (line 2689) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap {off=744/0x2e8}
2e8     stop	# ShouldNotReachHere

2fc     B23: #	out( N1 ) <- in( B6 )  Freq: 4.76835e-07
2fc     movq    [rsp + #0], RDX	# spill
300     movl    [rsp + #8], RCX	# spill
304     movq    [rsp + #16], RSI	# spill
309     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
310     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVector @ bci:6 (line 296) L[0]=rsp + #16 L[1]=RBP STK[0]=RBP
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:1 (line 3574) L[0]=_
        # jdk.incubator.vector.IntVector::fromArray @ bci:19 (line 2691) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_
        # OopMap {rbp=NarrowOop [0]=Oop [16]=Oop off=792/0x318}
318     stop	# ShouldNotReachHere

32c     B24: #	out( B26 ) <- in( B15 )  Freq: 1.00016e-09
32c     # exception oop is in rax; no code emitted
32c     movq    RSI, RAX	# spill
32f     jmp,s   B26

331     B25: #	out( B26 ) <- in( B13 )  Freq: 1.00016e-09
331     # exception oop is in rax; no code emitted
331     movq    RSI, RAX	# spill

334     B26: #	out( N1 ) <- in( B25 B24 )  Freq: 2.00032e-09
334     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp

33c     jmp     rethrow_stub

--------------------------------------------------------------------------------
    345   43    b        jdk.incubator.vector.AbstractSpecies::length (5 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 43 ------------------------
{method}
 - this oop:          0x0000000115871928
 - method holder:     'jdk/incubator/vector/AbstractSpecies'
 - constants:         0x000000011586e0c8 constant pool [654]/operands[45] {0x000000011586e0c8} for 'jdk/incubator/vector/AbstractSpecies' cache=0x00000001158753c0
 - access:            0x81000011  public final 
 - name:              'length'
 - signature:         '()I'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         5
 - code start:        0x0000000115871908
 - code end (excl):   0x000000011587190d
 - method data:       0x0000000115933160
 - checked ex length: 0
 - linenumber start:  0x000000011587190d
 - localvar length:   1
 - localvar start:    0x0000000115871912

------------------------ OptoAssembly for Compile_id = 43 -----------------------
#
#  int ( jdk/incubator/vector/AbstractSpecies:NotNull * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/AbstractSpecies:NotNull *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N16: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N16 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    RAX, [RSI + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/AbstractSpecies.laneCount (constant)
02f     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

041     ret

--------------------------------------------------------------------------------
    346   44    b        jdk.incubator.vector.Int256Vector::fromArray0 (7 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 44 ------------------------
{method}
 - this oop:          0x00000001158a2600
 - method holder:     'jdk/incubator/vector/Int256Vector'
 - constants:         0x000000011589d058 constant pool [746]/operands[52] {0x000000011589d058} for 'jdk/incubator/vector/Int256Vector' cache=0x00000001158a91c8
 - access:            0x81000010  final 
 - name:              'fromArray0'
 - signature:         '([II)Ljdk/incubator/vector/IntVector;'
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      124
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81aef0: 0xbba00000 i2c: 0x000000010efd72e0 c2i: 0x000000010efd73cb c2iUV: 0x000000010efd7391 c2iNCI: 0x000000010efd7408
 - compiled entry     0x000000010efd73cb
 - code size:         7
 - code start:        0x00000001158a25c0
 - code end (excl):   0x00000001158a25c7
 - method data:       0x00000001159332e8
 - checked ex length: 0
 - linenumber start:  0x00000001158a25c7
 - localvar length:   3
 - localvar start:    0x00000001158a25d2

------------------------ OptoAssembly for Compile_id = 44 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/Int256Vector:NotNull:exact *, int[int:>=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/Int256Vector:NotNull:exact *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N184: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B8 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (320 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c     movl    [rsp + #24], RCX	# spill
030     movq    [rsp + #0], RDX	# spill
034     movq    R10, RDX	# spill
037     # checkcastPP of R10
037     
037     movslq  R11, RCX	# i2l
03a     salq    R11, #2
03e     load_vector XMM0,[R10 + #16 + R11]
045     addq    R11, #16	# long
049     movq    [rsp + #16], R11	# spill
04e     # TLS is in R15
04e     movq    RBP, [R15 + #328 (32-bit)]	# ptr
055     movq    R10, RBP	# spill
058     addq    R10, #48	# ptr
05c     # TLS is in R15
        nop 	# 4 bytes pad for loops and calls
060     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
067     jnb,u   B8  P=0.000100 C=-1.000000

06d     B2: #	out( B3 ) <- in( B1 )  Freq: 0.9999
06d     # TLS is in R15
06d     movq    [R15 + #328 (32-bit)], R10	# ptr
074     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
07c     movq    [RBP], #1	# long
084     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
08c     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
093     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09b     movl    [RBP + #12 (8-bit)], #8	# int
0a2     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0aa     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
0ae     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b2     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
0b6     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0ba     B3: #	out( B6 B4 ) <- in( B9 B2 )  Freq: 1
0ba     
0ba     MEMBAR-storestore (empty encoding)
0ba     # checkcastPP of RBP
0ba     store_vector [RBP + #16 (8-bit)],XMM0
	
0bf     # TLS is in R15
0bf     movq    RAX, [R15 + #328 (32-bit)]	# ptr
0c6     movq    R10, RAX	# spill
0c9     addq    R10, #16	# ptr
0cd     # TLS is in R15
0cd     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
0d4     jnb,u   B6  P=0.000100 C=-1.000000

0da     B4: #	out( B5 ) <- in( B3 )  Freq: 0.9999
0da     # TLS is in R15
0da     movq    [R15 + #328 (32-bit)], R10	# ptr
0e1     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0e9     movq    [RAX], #1	# long
0f0     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2388a20:Constant:exact *	# compressed klass ptr

0f7     B5: #	out( N184 ) <- in( B7 B4 )  Freq: 1
0f7     encode_heap_oop_not_null R11,RBP
140     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
144     
144     MEMBAR-storestore (empty encoding)
144     # checkcastPP of RAX
144     
144     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

159     ret

15a     B6: #	out( B10 B7 ) <- in( B3 )  Freq: 0.000100017
15a     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2388a20:Constant:exact *	# ptr
164     pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
        nop 	# 2 bytes pad for loops and calls
170     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.IntVector::fromArray0Template @ bci:31 (line 3209) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fafd238e7f0 STK[1]=#Ptr0x00007fafd1f3c110 STK[2]=#8 STK[3]=rsp + #0 STK[4]=rsp + #8 STK[5]=_ STK[6]=rsp + #0 STK[7]=rsp + #24 STK[8]=#Ptr0x00007fafd238e850 STK[9]=#Ptr0x00007fafd1f40290
        # jdk.incubator.vector.Int256Vector::fromArray0 @ bci:3 (line 789) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop off=376/0x178}

178     B7: #	out( B5 ) <- in( B6 )  Freq: 0.000100015
        # Block is sole successor of call
178     jmp     B5

17d     B8: #	out( B11 B9 ) <- in( B1 )  Freq: 0.000100017
17d     vmovdqu [rsp + 32],XMM0	# spill
183     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
18d     movl    RDX, #8	# int
192     movq    RBP, [rsp + #0]	# spill
        nop 	# 2 bytes pad for loops and calls
198     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::fromArray0Template @ bci:31 (line 3209) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fafd238e7f0 STK[1]=#Ptr0x00007fafd1f3c110 STK[2]=#8 STK[3]=RBP STK[4]=rsp + #16 STK[5]=_ STK[6]=RBP STK[7]=rsp + #24 STK[8]=#Ptr0x00007fafd238e850 STK[9]=#Ptr0x00007fafd1f40290
        # jdk.incubator.vector.Int256Vector::fromArray0 @ bci:3 (line 789) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop off=416/0x1a0}

1a0     B9: #	out( B3 ) <- in( B8 )  Freq: 0.000100015
        # Block is sole successor of call
1a0     vmovdqu XMM0,[rsp + 32]	# spill
1a6     movq    RBP, RAX	# spill
1a9     jmp     B3

1ae     B10: #	out( B12 ) <- in( B6 )  Freq: 1.00017e-09
1ae     # exception oop is in rax; no code emitted
1ae     movq    RSI, RAX	# spill
1b1     jmp,s   B12

1b3     B11: #	out( B12 ) <- in( B8 )  Freq: 1.00017e-09
1b3     # exception oop is in rax; no code emitted
1b3     movq    RSI, RAX	# spill

1b6     B12: #	out( N184 ) <- in( B11 B10 )  Freq: 2.00033e-09
1b6     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp

1be     jmp     rethrow_stub

--------------------------------------------------------------------------------
    352   45    b        jdk.incubator.vector.IntVector::fromArray0Template (38 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 45 ------------------------
{method}
 - this oop:          0x0000000115851ae0
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x81000010  final 
 - name:              'fromArray0Template'
 - signature:         '([II)Ljdk/incubator/vector/IntVector;'
 - max stack:         11
 - max locals:        4
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81aef0: 0xbba00000 i2c: 0x000000010efd72e0 c2i: 0x000000010efd73cb c2iUV: 0x000000010efd7391 c2iNCI: 0x000000010efd7408
 - compiled entry     0x000000010efd73cb
 - code size:         38
 - code start:        0x0000000115851a70
 - code end (excl):   0x0000000115851a96
 - method data:       0x0000000115933488
 - checked ex length: 0
 - linenumber start:  0x0000000115851a96
 - localvar length:   4
 - localvar start:    0x0000000115851aa6

------------------------ OptoAssembly for Compile_id = 45 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/IntVector:NotNull *, int[int:>=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector:NotNull *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N203: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B11 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (208 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c     movl    [rsp + #16], RCX	# spill
030     movq    [rsp + #0], RDX	# spill
034     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
        nop 	# 8 bytes pad for loops and calls
040     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23da760:Constant:exact *	# compressed klass ptr
047     jne,u   B11  P=0.000001 C=-1.000000

04d     B2: #	out( B7 B3 ) <- in( B1 )  Freq: 0.999999
04d     movq    R10, RDX	# spill
050     # checkcastPP of R10
050     
050     movslq  R11, RCX	# i2l
053     salq    R11, #2
057     load_vector XMM0,[R10 + #16 + R11]
05e     addq    R11, #16	# long
062     movq    [rsp + #24], R11	# spill
067     # TLS is in R15
067     movq    RBP, [R15 + #328 (32-bit)]	# ptr
06e     movq    R10, RBP	# spill
071     addq    R10, #48	# ptr
075     # TLS is in R15
        nop 	# 11 bytes pad for loops and calls
080     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
087     jnb,u   B7  P=0.000100 C=-1.000000

08d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.999899
08d     # TLS is in R15
08d     movq    [R15 + #328 (32-bit)], R10	# ptr
094     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09c     movq    [RBP], #1	# long
0a4     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ac     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0b3     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0bb     movl    [RBP + #12 (8-bit)], #8	# int
0c2     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ca     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
0ce     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
0d2     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
0d6     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0da     B4: #	out( B9 B5 ) <- in( B8 B3 )  Freq: 0.999999
0da     
0da     MEMBAR-storestore (empty encoding)
0da     # checkcastPP of RBP
0da     store_vector [RBP + #16 (8-bit)],XMM0
	
0df     # TLS is in R15
0df     movq    RAX, [R15 + #328 (32-bit)]	# ptr
0e6     movq    R10, RAX	# spill
0e9     addq    R10, #16	# ptr
0ed     # TLS is in R15
0ed     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
0f4     jnb,u   B9  P=0.000100 C=-1.000000

0fa     B5: #	out( B6 ) <- in( B4 )  Freq: 0.999899
0fa     # TLS is in R15
0fa     movq    [R15 + #328 (32-bit)], R10	# ptr
101     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
109     movq    [RAX], #1	# long
110     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23da760:Constant:exact *	# compressed klass ptr

117     B6: #	out( N203 ) <- in( B10 B5 )  Freq: 0.999999
117     encode_heap_oop_not_null R11,RBP
160     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
164     
164     MEMBAR-storestore (empty encoding)
164     # checkcastPP of RAX
164     
164     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

179     ret

17a     B7: #	out( B13 B8 ) <- in( B2 )  Freq: 0.000100016
17a     vmovdqu [rsp + 32],XMM0	# spill
180     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
18a     movl    RDX, #8	# int
18f     movq    RBP, [rsp + #0]	# spill
        nop 	# 1 bytes pad for loops and calls
194     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::fromArray0Template @ bci:31 (line 3209) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fafd23de880 STK[1]=#Ptr0x00007fafd23e0170 STK[2]=#8 STK[3]=RBP STK[4]=rsp + #24 STK[5]=_ STK[6]=RBP STK[7]=rsp + #16 STK[8]=#Ptr0x00007fafd23de8e0 STK[9]=#Ptr0x00007fafd235e350
        # OopMap {rbp=Oop [0]=Oop off=412/0x19c}

19c     B8: #	out( B4 ) <- in( B7 )  Freq: 0.000100014
        # Block is sole successor of call
19c     vmovdqu XMM0,[rsp + 32]	# spill
1a2     movq    RBP, RAX	# spill
1a5     jmp     B4

1aa     B9: #	out( B12 B10 ) <- in( B4 )  Freq: 0.000100016
1aa     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23da760:Constant:exact *	# ptr
1b4     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.IntVector::fromArray0Template @ bci:31 (line 3209) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x00007fafd23de880 STK[1]=#Ptr0x00007fafd23e0170 STK[2]=#8 STK[3]=rsp + #0 STK[4]=rsp + #24 STK[5]=_ STK[6]=rsp + #0 STK[7]=rsp + #16 STK[8]=#Ptr0x00007fafd23de8e0 STK[9]=#Ptr0x00007fafd235e350
        # OopMap {rbp=Oop [0]=Oop off=444/0x1bc}

1bc     B10: #	out( B6 ) <- in( B9 )  Freq: 0.000100014
        # Block is sole successor of call
        nop 	# 4 bytes pad for loops and calls
1c0     jmp     B6

1c5     B11: #	out( N203 ) <- in( B1 )  Freq: 1e-06
1c5     movq    RBP, RDX	# spill
1c8     movq    [rsp + #8], RSI	# spill
1cd     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
1d4     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::fromArray0Template @ bci:1 (line 3208) L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #8
        # OopMap {rbp=Oop [8]=Oop off=476/0x1dc}
1dc     stop	# ShouldNotReachHere

1f0     B12: #	out( B14 ) <- in( B9 )  Freq: 1.00016e-09
1f0     # exception oop is in rax; no code emitted
1f0     movq    RSI, RAX	# spill
1f3     jmp,s   B14

1f5     B13: #	out( B14 ) <- in( B7 )  Freq: 1.00016e-09
1f5     # exception oop is in rax; no code emitted
1f5     movq    RSI, RAX	# spill

1f8     B14: #	out( N203 ) <- in( B13 B12 )  Freq: 2.00033e-09
1f8     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp

200     jmp     rethrow_stub

--------------------------------------------------------------------------------
    358   46    b        jdk.internal.vm.vector.VectorSupport::load (38 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 46 ------------------------
{method}
 - this oop:          0x000000080000bfe0
 - method holder:     'jdk/internal/vm/vector/VectorSupport'
 - constants:         0x00000008006215c8 constant pool [425] {0x00000008006215c8} for 'jdk/internal/vm/vector/VectorSupport' cache=0x000000080000b7a0
 - access:            0x81000009  public static 
 - name:              'load'
 - signature:         '(Ljava/lang/Class;Ljava/lang/Class;ILjava/lang/Object;JLjava/lang/Object;ILjdk/internal/vm/vector/VectorSupport$VectorSpecies;Ljdk/internal/vm/vector/VectorSupport$LoadOperation;)Ljava/lang/Object;'
 - max stack:         5
 - max locals:        10
 - size of params:    10
 - method size:       13
 - intrinsic id:      302 _VectorLoadOp
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf043930: 0xbbabbebabb000000 i2c: 0x000000010f0b5560 c2i: 0x000000010f0b5650 c2iUV: 0x000000010f0b5616 c2iNCI: 0x000000010f0b568d
 - compiled entry     0x0000000800001498
 - code size:         38
 - code start:        0x0000000800bd3188
 - code end (excl):   0x0000000800bd31ae
 - method data:       0x0000000115933790
 - checked ex length: 0
 - linenumber start:  0x0000000800bd31ae
 - localvar length:   9
 - localvar start:    0x0000000800bd31b8

------------------------ OptoAssembly for Compile_id = 46 -----------------------
#
#  java/lang/Object * ( java/lang/Class:exact *, java/lang/Class:exact *, int, java/lang/Object *, long, half, java/lang/Object *, int, jdk/internal/vm/vector/VectorSupport$VectorSpecies *, jdk/internal/vm/vector/VectorSupport$LoadOperation * )
#
#r018 rsi:rsi   : parm 0: java/lang/Class:exact *
#r016 rdx:rdx   : parm 1: java/lang/Class:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/Object *
#r006 r9:r9   : parm 4: long
#r014 rdi:rdi   : parm 6: java/lang/Object *
#r589 rsp+52: parm 9: jdk/internal/vm/vector/VectorSupport$LoadOperation *
#r588 rsp+48: parm 9: jdk/internal/vm/vector/VectorSupport$LoadOperation *
#r587 rsp+44: parm 8: jdk/internal/vm/vector/VectorSupport$VectorSpecies *
#r586 rsp+40: parm 8: jdk/internal/vm/vector/VectorSupport$VectorSpecies *
#r585 rsp+36: HOLE, owned by SELF
#r584 rsp+32: parm 7: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) <- in( B29 B25 B30 B26 B31 B27 B32 B28 B24 B35 B19 )  Freq: 1

000     B1: #	out( B29 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (896 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     movq    R10, [rsp + #48]	# spill
011     movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
015     NullCheck R10

015     B2: #	out( B25 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 11 bytes pad for loops and calls
020     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$24+0x000000080104de78: 0x00007fafd1ff1800:Constant:exact *	# compressed klass ptr
027     jne,u   B25  P=0.000001 C=-1.000000

02d     B3: #	out( B30 B4 ) <- in( B2 )  Freq: 0.999998
02d     movl    R11, [RDI + #8 (8-bit)]	# compressed klass ptr
031     NullCheck RDI

031     B4: #	out( B26 B5 ) <- in( B3 )  Freq: 0.999997
031     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
038     jne,u   B26  P=0.000000 C=-1.000000

03e     B5: #	out( B31 B6 ) <- in( B4 )  Freq: 0.999997
03e     # checkcastPP of RDI
03e     movq    [rsp + #48], RDI	# spill
043     movq    R10, [rsp + #40]	# spill
048     movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
04c     NullCheck R10

04c     B6: #	out( B27 B7 ) <- in( B5 )  Freq: 0.999996
04c     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007fafd1ff57a0:Constant:exact *	# compressed klass ptr
053     jne,u   B27  P=0.000000 C=-1.000000

059     B7: #	out( B32 B8 ) <- in( B6 )  Freq: 0.999996
059     # checkcastPP of R10
059     movl    RBP, [R10 + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
        nop 	# 3 bytes pad for loops and calls
060     movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
065     NullCheck RBP

065     B8: #	out( B28 B9 ) <- in( B7 )  Freq: 0.999995
065     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23dd160:Constant:exact *	# compressed klass ptr
06c     jne,u   B28  P=0.000000 C=-1.000000

072     B9: #	out( B20 B10 ) <- in( B8 )  Freq: 0.999995
072     decode_heap_oop_not_null RCX,RBP
076     # checkcastPP of RCX
076     # TLS is in R15
076     movq    RBP, [R15 + #328 (32-bit)]	# ptr
07d     movq    R10, RBP	# spill
080     addq    R10, #48	# ptr
084     # TLS is in R15
084     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
08b     jnb,u   B20  P=0.000100 C=-1.000000

091     B10: #	out( B11 ) <- in( B9 )  Freq: 0.999895
091     # TLS is in R15
091     movq    [R15 + #328 (32-bit)], R10	# ptr
098     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0a0     movq    [RBP], #1	# long
0a8     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b0     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0b7     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0bf     movl    [RBP + #12 (8-bit)], #8	# int
0c6     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ce     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
0d2     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
0d6     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
0da     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0de     B11: #	out( B24 B12 ) <- in( B21 B10 )  Freq: 0.999995
0de     
0de     MEMBAR-storestore (empty encoding)
0de     # checkcastPP of RBP
0de     movq    R10, [rsp + #48]	# spill
0e3     movl    R10, [R10 + #12 (8-bit)]	# range
0e7     movl    R9, [rsp + #32]	# spill
0ec     cmpl    R9, R10	# unsigned
0ef     jnb,u   B24  P=0.000001 C=-1.000000

0f5     B12: #	out( B24 B13 ) <- in( B11 )  Freq: 0.999994
0f5     movslq  RDI, [RSP + #32 (32-bit)]	# int -> long
0fa     movslq  R11, R10	# i2l
0fd     movq    R8, RDI	# spill
100     addq    R8, #6	# long
104     cmpq    R8, R11	# unsigned
107     jnb,u   B24  P=0.000001 C=-1.000000

10d     B13: #	out( B24 B14 ) <- in( B12 )  Freq: 0.999993
10d     cmpq    RDI, R11	# unsigned
110     jnb,u   B24  P=0.000001 C=-1.000000

116     B14: #	out( B24 B15 ) <- in( B13 )  Freq: 0.999992
116     movl    RBX, [rsp + #32]	# spill
11a     incl    RBX	# int
        nop 	# 4 bytes pad for loops and calls
120     cmpl    RBX, R10	# unsigned
123     jnb,u   B24  P=0.000001 C=-1.000000

129     B15: #	out( B24 B16 ) <- in( B14 )  Freq: 0.999991
129     movslq  R10, RBX	# i2l
12c     movq    R8, R10	# spill
12f     addq    R8, #6	# long
133     cmpq    R8, R11	# unsigned
136     jnb,u   B24  P=0.000001 C=-1.000000

13c     B16: #	out( B24 B17 ) <- in( B15 )  Freq: 0.99999
        nop 	# 4 bytes pad for loops and calls
140     cmpq    R10, R11	# unsigned
143     jnb,u   B24  P=0.000001 C=-1.000000

149     B17: #	out( B22 B18 ) <- in( B16 )  Freq: 0.999989
149     movq    R10, [rsp + #48]	# spill
14e     movl    R11, [R10 + #16 + R9 << #2]	# int
153     movl    [RBP + #16 (8-bit)], R11	# int
157     movl    R10, [R10 + #20 + RDI << #2]	# int
15c     movl    [RBP + #20 (8-bit)], R10	# int
160     movq    R10, [rsp + #48]	# spill
165     movl    R11, [R10 + #24 + RDI << #2]	# int
16a     movl    [RBP + #24 (8-bit)], R11	# int
16e     movl    R10, [R10 + #28 + RDI << #2]	# int
173     movl    [RBP + #28 (8-bit)], R10	# int
177     movq    R10, [rsp + #48]	# spill
17c     movl    R11, [R10 + #32 + RDI << #2]	# int
181     movl    [RBP + #32 (8-bit)], R11	# int
185     movl    R10, [R10 + #36 + RDI << #2]	# int
18a     movl    [RBP + #36 (8-bit)], R10	# int
18e     movq    R10, [rsp + #48]	# spill
193     movl    R11, [R10 + #40 + RDI << #2]	# int
198     movl    [RBP + #40 (8-bit)], R11	# int
19c     movl    R10, [R10 + #44 + RDI << #2]	# int
1a1     movl    [RBP + #44 (8-bit)], R10	# int
1a5     # TLS is in R15
1a5     movq    RAX, [R15 + #328 (32-bit)]	# ptr
1ac     movq    R10, RAX	# spill
1af     addq    R10, #16	# ptr
1b3     # TLS is in R15
        nop 	# 13 bytes pad for loops and calls
1c0     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
1c7     jnb,u   B22  P=0.000100 C=-1.000000

1cd     B18: #	out( B19 ) <- in( B17 )  Freq: 0.999889
1cd     # TLS is in R15
1cd     movq    [R15 + #328 (32-bit)], R10	# ptr
1d4     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1dc     movq    [RAX], #1	# long
1e3     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23dd160:Constant:exact *	# compressed klass ptr

1ea     B19: #	out( N1 ) <- in( B23 B18 )  Freq: 0.999989
1ea     encode_heap_oop_not_null R11,RBP
233     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
237     
237     # checkcastPP of RAX
237     MEMBAR-release ! (empty encoding)
237     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

249     ret

24a     B20: #	out( B33 B21 ) <- in( B9 )  Freq: 0.000100016
24a     movq    [rsp + #40], RCX	# spill
24f     movl    RDX, #8	# int
254     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
25e     movq    RBP, RDI	# spill
        nop 	# 2 bytes pad for loops and calls
263     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::ldOp @ bci:4 (line 306) L[0]=rsp + #40 L[1]=RBP L[2]=rsp + #32 L[3]=#Ptr0x00007fafd23dae80 L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [40]=Oop [48]=Oop off=616/0x268}

268     B21: #	out( B11 ) <- in( B20 )  Freq: 0.000100014
        # Block is sole successor of call
268     movq    RBP, RAX	# spill
26b     movq    RCX, [rsp + #40]	# spill
270     jmp     B11

275     B22: #	out( B34 B23 ) <- in( B17 )  Freq: 0.000100016
275     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23dd160:Constant:exact *	# ptr
27f     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::ldOp @ bci:43 (line 310) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=644/0x284}

284     B23: #	out( B19 ) <- in( B22 )  Freq: 0.000100014
        # Block is sole successor of call
284     jmp     B19

289     B24: #	out( N1 ) <- in( B16 B11 B12 B13 B14 B15 )  Freq: 6.07963e-06
289     movl    RSI, #-138	# int
28e     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #32]
298     movl    [rsp + #40], R9	# spill
29d     movq    [rsp + #48], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
2a3     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::ldOp @ bci:16 (line 307) L[0]=rsp + #48 L[1]=rsp + #32 L[2]=rsp + #40 L[3]=#Ptr0x00007fafd23dae80 L[4]=RBP L[5]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [32]=Oop [48]=Oop off=680/0x2a8}
2a8     stop	# ShouldNotReachHere

2bc     B25: #	out( N1 ) <- in( B2 )  Freq: 9.99999e-07
2bc     movl    RSI, #-34	# int
2c1     movq    RBP, [rsp + #48]	# spill
2c6     movq    [rsp + #48], RDI	# spill
2cb     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP STK[1]=rsp + #48 STK[2]=rsp + #32 STK[3]=rsp + #40
        # OopMap {rbp=Oop [40]=Oop [48]=Oop off=720/0x2d0}
2d0     stop	# ShouldNotReachHere

2e4     B26: #	out( N1 ) <- in( B4 )  Freq: 1e-35
2e4     movl    RSI, #-34	# int
2e9     movl    RBP, [rsp + #32]	# spill
2ed     movq    R10, [rsp + #40]	# spill
2f2     movq    [rsp + #32], R10	# spill
2f7     movq    [rsp + #40], RDI	# spill
        nop 	# 3 bytes pad for loops and calls
2ff     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:1 L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #32 STK[0]=rsp + #40
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop [40]=Oop off=772/0x304}
304     stop	# ShouldNotReachHere

318     B27: #	out( N1 ) <- in( B6 )  Freq: 1e-35
318     movl    RSI, #-34	# int
31d     movq    RBP, RDI	# spill
        nop 	# 3 bytes pad for loops and calls
323     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:6 L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #32 STK[2]=rsp + #40
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [40]=Oop off=808/0x328}
328     stop	# ShouldNotReachHere

33c     B28: #	out( N1 ) <- in( B8 )  Freq: 1e-35
33c     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
343     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:4 (line 3574) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:1 (line 3612) L[0]=_ L[1]=rsp + #48 L[2]=rsp + #32 L[3]=#Ptr0x00007fafd23dae80
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=NarrowOop [48]=Oop off=840/0x348}
348     stop	# ShouldNotReachHere

35c     B29: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
35c     movl    RSI, #-10	# int
361     movq    RBP, RDI	# spill
        nop 	# 3 bytes pad for loops and calls
367     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #32 STK[3]=rsp + #40
        # OopMap {rbp=Oop [40]=Oop off=876/0x36c}
36c     stop	# ShouldNotReachHere

380     B30: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
380     movl    RSI, #-12	# int
385     movl    RBP, [rsp + #32]	# spill
        nop 	# 2 bytes pad for loops and calls
38b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:1 L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #40 STK[0]=#NULL
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[40]=Oop off=912/0x390}
390     stop	# ShouldNotReachHere

3a4     B31: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
3a4     movl    RSI, #-12	# int
3a9     movq    RBP, RDI	# spill
        nop 	# 3 bytes pad for loops and calls
3af     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:6 L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #32 STK[2]=#NULL
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=948/0x3b4}
3b4     stop	# ShouldNotReachHere

3c8     B32: #	out( N1 ) <- in( B7 )  Freq: 4.76835e-07
3c8     movl    RSI, #-187	# int
3cd     movq    [rsp + #40], RDI	# spill
3d2     movq    [rsp + #48], R10	# spill
3d7     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVector @ bci:6 (line 296) L[0]=rsp + #48 L[1]=RBP STK[0]=RBP
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:1 (line 3574) L[0]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:1 (line 3612) L[0]=_ L[1]=rsp + #40 L[2]=rsp + #32 L[3]=#Ptr0x00007fafd23dae80
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::load @ bci:32 (line 279) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=NarrowOop [40]=Oop [48]=Oop off=988/0x3dc}
3dc     stop	# ShouldNotReachHere

3f0     B33: #	out( B35 ) <- in( B20 )  Freq: 1.00016e-09
3f0     # exception oop is in rax; no code emitted
3f0     movq    RSI, RAX	# spill
3f3     jmp,s   B35

3f5     B34: #	out( B35 ) <- in( B22 )  Freq: 1.00016e-09
3f5     # exception oop is in rax; no code emitted
3f5     movq    RSI, RAX	# spill

3f8     B35: #	out( N1 ) <- in( B33 B34 )  Freq: 2.00032e-09
3f8     addq    rsp, 16	# Destroy frame
	popq    rbp

3fd     jmp     rethrow_stub

--------------------------------------------------------------------------------
    372   47    b        jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load (13 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 47 ------------------------
{method}
 - this oop:          0x000000011592f200
 - method holder:     'jdk/incubator/vector/IntVector$$Lambda$24+0x000000080104de78'
 - constants:         0x000000011592ef88 constant pool [25] {0x000000011592ef88} for 'jdk/incubator/vector/IntVector$$Lambda$24+0x000000080104de78' cache=0x000000011592f290
 - access:            0x81000001  public 
 - name:              'load'
 - signature:         '(Ljava/lang/Object;ILjdk/internal/vm/vector/VectorSupport$VectorSpecies;)Ljava/lang/Object;'
 - max stack:         4
 - max locals:        4
 - size of params:    4
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b4e0: 0xbbab0000 i2c: 0x000000010efdc260 c2i: 0x000000010efdc34f c2iUV: 0x000000010efdc315 c2iNCI: 0x000000010efdc38c
 - compiled entry     0x000000010efdc34f
 - code size:         13
 - code start:        0x000000011592f1f0
 - code end (excl):   0x000000011592f1fd
 - method data:       0x0000000115933a10
 - checked ex length: 0
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 47 -----------------------
#
#  java/lang/Object * ( jdk/incubator/vector/IntVector$$Lambda$24+0x000000080104de78:NotNull:exact *, java/lang/Object *, int, jdk/internal/vm/vector/VectorSupport$VectorSpecies * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector$$Lambda$24+0x000000080104de78:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: jdk/internal/vm/vector/VectorSupport$VectorSpecies *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N357: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B26 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (728 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movl    [rsp + #8], RCX	# spill
030     movq    R11, RDX	# spill
033     movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
037     NullCheck RDX

037     B2: #	out( B23 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 9 bytes pad for loops and calls
040     cmpl    R10, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
047     jne,u   B23  P=0.000000 C=-1.000000

04d     B3: #	out( B27 B4 ) <- in( B2 )  Freq: 0.999999
04d     # checkcastPP of R11
04d     movq    [rsp + #16], R11	# spill
052     movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
056     NullCheck R8

056     B4: #	out( B24 B5 ) <- in( B3 )  Freq: 0.999998
        nop 	# 10 bytes pad for loops and calls
060     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/IntVector$IntSpecies: 0x00007fafd221d730:Constant:exact *	# compressed klass ptr
067     jne,u   B24  P=0.000000 C=-1.000000

06d     B5: #	out( B28 B6 ) <- in( B4 )  Freq: 0.999998
06d     # checkcastPP of R8
06d     movl    RBP, [R8 + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
071     movl    R10, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
076     NullCheck RBP

076     B6: #	out( B25 B7 ) <- in( B5 )  Freq: 0.999997
        nop 	# 10 bytes pad for loops and calls
080     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1f974f0:Constant:exact *	# compressed klass ptr
087     jne,u   B25  P=0.000000 C=-1.000000

08d     B7: #	out( B18 B8 ) <- in( B6 )  Freq: 0.999997
08d     decode_heap_oop_not_null R9,RBP
091     # checkcastPP of R9
091     # TLS is in R15
091     movq    RBP, [R15 + #328 (32-bit)]	# ptr
098     movq    R10, RBP	# spill
09b     addq    R10, #48	# ptr
09f     # TLS is in R15
        nop 	# 1 bytes pad for loops and calls
0a0     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
0a7     jnb,u   B18  P=0.000100 C=-1.000000

0ad     B8: #	out( B9 ) <- in( B7 )  Freq: 0.999897
0ad     # TLS is in R15
0ad     movq    [R15 + #328 (32-bit)], R10	# ptr
0b4     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0bc     movq    [RBP], #1	# long
0c4     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0cc     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0d3     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0db     movl    [RBP + #12 (8-bit)], #8	# int
0e2     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ea     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
0ee     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
0f2     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
0f6     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0fa     B9: #	out( B22 B10 ) <- in( B19 B8 )  Freq: 0.999997
0fa     
0fa     MEMBAR-storestore (empty encoding)
0fa     # checkcastPP of RBP
0fa     movq    R10, [rsp + #16]	# spill
0ff     movl    R11, [R10 + #12 (8-bit)]	# range
103     movl    RCX, [rsp + #8]	# spill
107     cmpl    RCX, R11	# unsigned
10a     jnb,u   B22  P=0.000001 C=-1.000000

110     B10: #	out( B22 B11 ) <- in( B9 )  Freq: 0.999996
110     movslq  RDI, RCX	# i2l
113     movslq  R10, R11	# i2l
116     movq    R8, RDI	# spill
119     addq    R8, #6	# long
        nop 	# 3 bytes pad for loops and calls
120     cmpq    R8, R10	# unsigned
123     jnb,u   B22  P=0.000001 C=-1.000000

129     B11: #	out( B22 B12 ) <- in( B10 )  Freq: 0.999995
129     cmpq    RDI, R10	# unsigned
12c     jnb,u   B22  P=0.000001 C=-1.000000

132     B12: #	out( B22 B13 ) <- in( B11 )  Freq: 0.999994
132     movl    RBX, RCX	# spill
134     incl    RBX	# int
136     cmpl    RBX, R11	# unsigned
139     jnb,u   B22  P=0.000001 C=-1.000000

13f     B13: #	out( B22 B14 ) <- in( B12 )  Freq: 0.999993
13f     movslq  R11, RBX	# i2l
142     movq    R8, R11	# spill
145     addq    R8, #6	# long
149     cmpq    R8, R10	# unsigned
14c     jnb,u   B22  P=0.000001 C=-1.000000

152     B14: #	out( B22 B15 ) <- in( B13 )  Freq: 0.999992
152     cmpq    R11, R10	# unsigned
155     jnb,u   B22  P=0.000001 C=-1.000000

15b     B15: #	out( B20 B16 ) <- in( B14 )  Freq: 0.999991
15b     movq    R10, [rsp + #16]	# spill
160     movl    R11, [R10 + #16 + RCX << #2]	# int
165     movl    [RBP + #16 (8-bit)], R11	# int
169     movl    R10, [R10 + #20 + RDI << #2]	# int
16e     movl    [RBP + #20 (8-bit)], R10	# int
172     movq    R10, [rsp + #16]	# spill
177     movl    R11, [R10 + #24 + RDI << #2]	# int
17c     movl    [RBP + #24 (8-bit)], R11	# int
180     movl    R10, [R10 + #28 + RDI << #2]	# int
185     movl    [RBP + #28 (8-bit)], R10	# int
189     movq    R10, [rsp + #16]	# spill
18e     movl    R11, [R10 + #32 + RDI << #2]	# int
193     movl    [RBP + #32 (8-bit)], R11	# int
197     movl    R10, [R10 + #36 + RDI << #2]	# int
19c     movl    [RBP + #36 (8-bit)], R10	# int
1a0     movq    R10, [rsp + #16]	# spill
1a5     movl    R11, [R10 + #40 + RDI << #2]	# int
1aa     movl    [RBP + #40 (8-bit)], R11	# int
1ae     movl    R10, [R10 + #44 + RDI << #2]	# int
1b3     movl    [RBP + #44 (8-bit)], R10	# int
1b7     # TLS is in R15
1b7     movq    RAX, [R15 + #328 (32-bit)]	# ptr
1be     movq    R10, RAX	# spill
1c1     addq    R10, #16	# ptr
1c5     # TLS is in R15
1c5     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
1cc     jnb,u   B20  P=0.000100 C=-1.000000

1d2     B16: #	out( B17 ) <- in( B15 )  Freq: 0.999891
1d2     # TLS is in R15
1d2     movq    [R15 + #328 (32-bit)], R10	# ptr
1d9     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1e1     movq    [RAX], #1	# long
1e8     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1f974f0:Constant:exact *	# compressed klass ptr

1ef     B17: #	out( N357 ) <- in( B21 B16 )  Freq: 0.999991
1ef     encode_heap_oop_not_null R11,RBP
238     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
23c     
23c     # checkcastPP of RAX
23c     MEMBAR-release ! (empty encoding)
23c     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

24e     ret

24f     B18: #	out( B29 B19 ) <- in( B7 )  Freq: 0.000100016
24f     movq    [rsp + #24], R9	# spill
254     movl    RDX, #8	# int
259     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
263     movq    RBP, R11	# spill
        nop 	# 1 bytes pad for loops and calls
267     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::ldOp @ bci:4 (line 306) L[0]=rsp + #24 L[1]=RBP L[2]=rsp + #8 L[3]=#Ptr0x00007fafd22231e0 L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop off=620/0x26c}

26c     B19: #	out( B9 ) <- in( B18 )  Freq: 0.000100014
        # Block is sole successor of call
26c     movq    RBP, RAX	# spill
26f     movq    R9, [rsp + #24]	# spill
274     jmp     B9

279     B20: #	out( B30 B21 ) <- in( B15 )  Freq: 0.000100016
279     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1f974f0:Constant:exact *	# ptr
283     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::ldOp @ bci:43 (line 310) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop off=648/0x288}

288     B21: #	out( B17 ) <- in( B20 )  Freq: 0.000100014
        # Block is sole successor of call
288     jmp     B17

28d     B22: #	out( N357 ) <- in( B13 B9 B10 B11 B12 B14 )  Freq: 6.07964e-06
28d     movl    RSI, #-138	# int
292     pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #0]
29b     movq    [rsp + #16], R9	# spill
        nop 	# 3 bytes pad for loops and calls
2a3     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::ldOp @ bci:16 (line 307) L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=#Ptr0x00007fafd22231e0 L[4]=RBP L[5]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=680/0x2a8}
2a8     stop	# ShouldNotReachHere

2bc     B23: #	out( N357 ) <- in( B2 )  Freq: 1e-35
2bc     movl    RSI, #-34	# int
2c1     movl    RBP, RCX	# spill
2c3     movq    [rsp + #0], R8	# spill
2c7     movq    [rsp + #8], RDX	# spill
        nop 	# 3 bytes pad for loops and calls
2cf     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:1 L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 STK[0]=rsp + #8
        # OopMap {[0]=Oop [8]=Oop off=724/0x2d4}
2d4     stop	# ShouldNotReachHere

2e8     B24: #	out( N357 ) <- in( B4 )  Freq: 1e-35
2e8     movl    RSI, #-34	# int
2ed     movq    RBP, R11	# spill
2f0     movl    [rsp + #0], RCX	# spill
2f3     movq    [rsp + #8], R8	# spill
        nop 	# 3 bytes pad for loops and calls
2fb     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:6 L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8
        # OopMap {rbp=Oop [8]=Oop off=768/0x300}
300     stop	# ShouldNotReachHere

314     B25: #	out( N357 ) <- in( B6 )  Freq: 1e-35
314     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
31b     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:4 (line 3574) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:1 (line 3612) L[0]=_ L[1]=rsp + #16 L[2]=rsp + #8 L[3]=#Ptr0x00007fafd22231e0
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=NarrowOop [16]=Oop off=800/0x320}
320     stop	# ShouldNotReachHere

334     B26: #	out( N357 ) <- in( B1 )  Freq: 1.01328e-06
334     movl    RSI, #-12	# int
339     movl    RBP, RCX	# spill
33b     movq    [rsp + #0], R8	# spill
33f     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:1 L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 STK[0]=#NULL
        # OopMap {[0]=Oop off=836/0x344}
344     stop	# ShouldNotReachHere

358     B27: #	out( N357 ) <- in( B3 )  Freq: 1.01328e-06
358     movl    RSI, #-12	# int
35d     movq    RBP, R11	# spill
        nop 	# 3 bytes pad for loops and calls
363     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:6 L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=#NULL
        # OopMap {rbp=Oop off=872/0x368}
368     stop	# ShouldNotReachHere

37c     B28: #	out( N357 ) <- in( B5 )  Freq: 4.76836e-07
37c     movl    RSI, #-187	# int
381     movq    [rsp + #0], R11	# spill
385     movq    [rsp + #16], R8	# spill
        nop 	# 1 bytes pad for loops and calls
38b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVector @ bci:6 (line 296) L[0]=rsp + #16 L[1]=RBP STK[0]=RBP
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:1 (line 3574) L[0]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:1 (line 3612) L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=#Ptr0x00007fafd22231e0
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$24/0x000000080104de78::load @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=NarrowOop [0]=Oop [16]=Oop off=912/0x390}
390     stop	# ShouldNotReachHere

3a4     B29: #	out( B31 ) <- in( B18 )  Freq: 1.00016e-09
3a4     # exception oop is in rax; no code emitted
3a4     movq    RSI, RAX	# spill
3a7     jmp,s   B31

3a9     B30: #	out( B31 ) <- in( B20 )  Freq: 1.00016e-09
3a9     # exception oop is in rax; no code emitted
3a9     movq    RSI, RAX	# spill

3ac     B31: #	out( N357 ) <- in( B29 B30 )  Freq: 2.00032e-09
3ac     addq    rsp, 48	# Destroy frame
	popq    rbp

3b1     jmp     rethrow_stub

--------------------------------------------------------------------------------
    385   48    b        jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 (12 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 48 ------------------------
{method}
 - this oop:          0x0000000115855e60
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x8100100a  private static synthetic 
 - name:              'lambda$fromArray0Template$89'
 - signature:         '([IILjdk/incubator/vector/IntVector$IntSpecies;)Ljdk/incubator/vector/IntVector;'
 - max stack:         5
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b0d0: 0xbab00000 i2c: 0x000000010efd9660 c2i: 0x000000010efd974b c2iUV: 0x000000010efd9711 c2iNCI: 0x000000010efd9788
 - compiled entry     0x000000010efd974b
 - code size:         12
 - code start:        0x0000000115855e28
 - code end (excl):   0x0000000115855e34
 - method data:       0x0000000115933c48
 - checked ex length: 0
 - linenumber start:  0x0000000115855e34
 - localvar length:   3
 - localvar start:    0x0000000115855e3a

------------------------ OptoAssembly for Compile_id = 48 -----------------------
#
#  jdk/incubator/vector/IntVector * ( int[int:>=0]:exact *, int, jdk/incubator/vector/IntVector$IntSpecies:exact * )
#
#r018 rsi:rsi   : parm 0: int[int:>=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx:rcx   : parm 2: jdk/incubator/vector/IntVector$IntSpecies:exact *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B21 B22 B20 B19 B13 B25 )  Freq: 1

000     B1: #	out( B21 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (608 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c     movl    [rsp + #8], RDX	# spill
010     movq    [rsp + #0], RSI	# spill
014     movl    R11, [RCX + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
018     NullCheck RCX

018     B2: #	out( B22 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 8 bytes pad for loops and calls
020     movl    R10, [R12 + R11 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
025     NullCheck R11

025     B3: #	out( B20 B4 ) <- in( B2 )  Freq: 0.999999
025     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2352300:Constant:exact *	# compressed klass ptr
02c     jne,u   B20  P=0.000000 C=-1.000000

032     B4: #	out( B14 B5 ) <- in( B3 )  Freq: 0.999999
032     decode_heap_oop_not_null R10,R11
036     # checkcastPP of R10
036     movq    [rsp + #16], R10	# spill
03b     # TLS is in R15
03b     movq    RBP, [R15 + #328 (32-bit)]	# ptr
042     movq    R10, RBP	# spill
045     addq    R10, #48	# ptr
049     # TLS is in R15
049     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
050     jnb,u   B14  P=0.000100 C=-1.000000

056     B5: #	out( B6 ) <- in( B4 )  Freq: 0.999898
056     # TLS is in R15
056     movq    [R15 + #328 (32-bit)], R10	# ptr
05d     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
065     movq    [RBP], #1	# long
06d     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
075     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
07c     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
084     movl    [RBP + #12 (8-bit)], #8	# int
08b     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
093     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
097     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
09b     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
09f     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0a3     B6: #	out( B18 B7 ) <- in( B15 B5 )  Freq: 0.999999
0a3     
0a3     MEMBAR-storestore (empty encoding)
0a3     # checkcastPP of RBP
0a3     movq    R8, [rsp + #0]	# spill
0a7     movl    R10, [R8 + #12 (8-bit)]	# range
0ab     NullCheck R8

0ab     B7: #	out( B19 B8 ) <- in( B6 )  Freq: 0.999997
0ab     movl    R9, [rsp + #8]	# spill
0b0     cmpl    R9, R10	# unsigned
0b3     jnb,u   B19  P=0.000001 C=-1.000000

0b9     B8: #	out( B19 B9 ) <- in( B7 )  Freq: 0.999996
0b9     movslq  R10, R10	# i2l
0bc     movslq  RCX, R9	# i2l
0bf     movq    R11, RCX	# spill
0c2     addq    R11, #7	# long
0c6     cmpq    R11, R10	# unsigned
0c9     jnb,u   B19  P=0.000001 C=-1.000000

0cf     B9: #	out( B19 B10 ) <- in( B8 )  Freq: 0.999995
0cf     cmpq    RCX, R10	# unsigned
0d2     jnb,u   B19  P=0.000001 C=-1.000000

0d8     B10: #	out( B19 B11 ) <- in( B9 )  Freq: 0.999994
0d8     cmpq    RCX, R10	# unsigned
        nop 	# 5 bytes pad for loops and calls
0e0     jnb,u   B19  P=0.000001 C=-1.000000

0e6     B11: #	out( B16 B12 ) <- in( B10 )  Freq: 0.999993
0e6     movl    R10, [R8 + #16 + R9 << #2]	# int
0eb     movl    [RBP + #16 (8-bit)], R10	# int
0ef     movl    R11, [R8 + #20 + RCX << #2]	# int
0f4     movl    [RBP + #20 (8-bit)], R11	# int
0f8     movl    R10, [R8 + #24 + RCX << #2]	# int
0fd     movl    [RBP + #24 (8-bit)], R10	# int
101     movl    R11, [R8 + #28 + RCX << #2]	# int
106     movl    [RBP + #28 (8-bit)], R11	# int
10a     movl    R10, [R8 + #32 + RCX << #2]	# int
10f     movl    [RBP + #32 (8-bit)], R10	# int
113     movl    R11, [R8 + #36 + RCX << #2]	# int
118     movl    [RBP + #36 (8-bit)], R11	# int
11c     movl    R10, [R8 + #40 + RCX << #2]	# int
121     movl    [RBP + #40 (8-bit)], R10	# int
125     movl    R11, [R8 + #44 + RCX << #2]	# int
12a     movl    [RBP + #44 (8-bit)], R11	# int
12e     # TLS is in R15
12e     movq    RAX, [R15 + #328 (32-bit)]	# ptr
135     movq    R10, RAX	# spill
138     addq    R10, #16	# ptr
13c     # TLS is in R15
        nop 	# 4 bytes pad for loops and calls
140     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
147     jnb,u   B16  P=0.000100 C=-1.000000

14d     B12: #	out( B13 ) <- in( B11 )  Freq: 0.999893
14d     # TLS is in R15
14d     movq    [R15 + #328 (32-bit)], R10	# ptr
154     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
15c     movq    [RAX], #1	# long
163     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2352300:Constant:exact *	# compressed klass ptr

16a     B13: #	out( N1 ) <- in( B17 B12 )  Freq: 0.999993
16a     encode_heap_oop_not_null R10,RBP
1b3     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
1b7     
1b7     # checkcastPP of RAX
1b7     MEMBAR-release ! (empty encoding)
1b7     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

1c9     ret

1ca     B14: #	out( B23 B15 ) <- in( B4 )  Freq: 0.000100016
1ca     movl    RDX, #8	# int
1cf     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
1d9     movq    RBP, [rsp + #0]	# spill
        nop 	# 2 bytes pad for loops and calls
1df     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::ldOp @ bci:4 (line 306) L[0]=rsp + #16 L[1]=RBP L[2]=rsp + #8 L[3]=#Ptr0x00007fafd2272e80 L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=484/0x1e4}

1e4     B15: #	out( B6 ) <- in( B14 )  Freq: 0.000100014
        # Block is sole successor of call
1e4     movq    RBP, RAX	# spill
1e7     jmp     B6

1ec     B16: #	out( B24 B17 ) <- in( B11 )  Freq: 0.000100016
1ec     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2352300:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
1f7     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::ldOp @ bci:43 (line 310) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop off=508/0x1fc}

1fc     B17: #	out( B13 ) <- in( B16 )  Freq: 0.000100014
        # Block is sole successor of call
        nop 	# 4 bytes pad for loops and calls
200     jmp     B13

205     B18: #	out( B19 ) <- in( B6 )  Freq: 1.01328e-06
205     movl    R9, [rsp + #8]	# spill

20a     B19: #	out( N1 ) <- in( B10 B18 B7 B8 B9 )  Freq: 5.06638e-06
20a     movl    RSI, #-138	# int
20f     movl    [rsp + #8], R9	# spill
        nop 	# 3 bytes pad for loops and calls
217     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::ldOp @ bci:16 (line 307) L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=#Ptr0x00007fafd2272e80 L[4]=RBP L[5]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=540/0x21c}
21c     stop	# ShouldNotReachHere

230     B20: #	out( N1 ) <- in( B3 )  Freq: 1e-35
230     movl    RSI, #-34	# int
235     movq    RBP, [rsp + #0]	# spill
239     movl    [rsp + #4], R11	# spill
        nop 	# 1 bytes pad for loops and calls
23f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:4 (line 3574) L[0]=_ STK[0]=rsp + #4
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:1 (line 3612) L[0]=_ L[1]=RBP L[2]=rsp + #8 L[3]=#Ptr0x00007fafd2272e80
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [4]=NarrowOop off=580/0x244}
244     stop	# ShouldNotReachHere

258     B21: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
258     movl    RSI, #-10	# int
25d     movq    RBP, [rsp + #0]	# spill
        nop 	# 2 bytes pad for loops and calls
263     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #8 STK[3]=#Ptr0x00007fafd2272e80
        # OopMap {rbp=Oop off=616/0x268}
268     stop	# ShouldNotReachHere

27c     B22: #	out( N1 ) <- in( B2 )  Freq: 4.76837e-07
27c     movl    RSI, #-187	# int
281     movq    RBP, [rsp + #0]	# spill
285     movl    [rsp + #0], RDX	# spill
288     movq    [rsp + #8], RCX	# spill
28d     movl    [rsp + #16], R11	# spill
        nop 	# 1 bytes pad for loops and calls
293     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVector @ bci:6 (line 296) L[0]=rsp + #8 L[1]=rsp + #16 STK[0]=rsp + #16
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:1 (line 3574) L[0]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:1 (line 3612) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=#Ptr0x00007fafd2272e80
        # jdk.incubator.vector.IntVector::lambda$fromArray0Template$89 @ bci:8 (line 3213) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [16]=NarrowOop off=664/0x298}
298     stop	# ShouldNotReachHere

2ac     B23: #	out( B25 ) <- in( B14 )  Freq: 1.00016e-09
2ac     # exception oop is in rax; no code emitted
2ac     movq    RSI, RAX	# spill
2af     jmp,s   B25

2b1     B24: #	out( B25 ) <- in( B16 )  Freq: 1.00016e-09
2b1     # exception oop is in rax; no code emitted
2b1     movq    RSI, RAX	# spill

2b4     B25: #	out( N1 ) <- in( B23 B24 )  Freq: 2.00032e-09
2b4     addq    rsp, 48	# Destroy frame
	popq    rbp

2b9     jmp     rethrow_stub

--------------------------------------------------------------------------------
    397   49    b        jdk.incubator.vector.IntVector$IntSpecies::ldOp (11 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 49 ------------------------
{method}
 - this oop:          0x000000011586cca0
 - method holder:     'jdk/incubator/vector/IntVector$IntSpecies'
 - constants:         0x000000011586ae00 constant pool [372]/operands[14] {0x000000011586ae00} for 'jdk/incubator/vector/IntVector$IntSpecies' cache=0x00000001158761d0
 - access:            0x81000000  
 - name:              'ldOp'
 - signature:         '(Ljava/lang/Object;ILjdk/incubator/vector/IntVector$FLdOp;)Ljdk/incubator/vector/IntVector;'
 - max stack:         5
 - max locals:        4
 - size of params:    4
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b4e0: 0xbbab0000 i2c: 0x000000010efdc260 c2i: 0x000000010efdc34f c2iUV: 0x000000010efdc315 c2iNCI: 0x000000010efdc38c
 - compiled entry     0x000000010efdc34f
 - code size:         11
 - code start:        0x000000011586cc50
 - code end (excl):   0x000000011586cc5b
 - method data:       0x0000000115933e50
 - checked ex length: 0
 - linenumber start:  0x000000011586cc5b
 - localvar length:   4
 - localvar start:    0x000000011586cc64

------------------------ OptoAssembly for Compile_id = 49 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/IntVector$IntSpecies:NotNull:exact *, java/lang/Object *, int, jdk/incubator/vector/IntVector$FLdOp * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector$IntSpecies:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: jdk/incubator/vector/IntVector$FLdOp *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N302: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B25 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (496 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    R10, RSI	# spill
02f     movq    [rsp + #16], R8	# spill
034     movl    [rsp + #8], RCX	# spill
038     movq    [rsp + #0], RDX	# spill
03c     movl    R11, [RSI + #68 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/AbstractSpecies.dummyVector (constant)
040     movl    R8, [R12 + R11 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
045     NullCheck R11

045     B2: #	out( B24 B3 ) <- in( B1 )  Freq: 1
045     cmpl    R8, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd21ab530:Constant:exact *	# compressed klass ptr
04c     jne,u   B24  P=0.000000 C=-1.000000

052     B3: #	out( B15 B4 ) <- in( B2 )  Freq: 1
052     decode_heap_oop_not_null R10,R11
056     # checkcastPP of R10
056     movq    [rsp + #24], R10	# spill
05b     # TLS is in R15
05b     movq    RBP, [R15 + #328 (32-bit)]	# ptr
062     movq    R10, RBP	# spill
065     addq    R10, #48	# ptr
069     # TLS is in R15
069     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
070     jnb,u   B15  P=0.000100 C=-1.000000

076     B4: #	out( B5 ) <- in( B3 )  Freq: 0.9999
076     # TLS is in R15
076     movq    [R15 + #328 (32-bit)], R10	# ptr
07d     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
085     movq    [RBP], #1	# long
08d     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
095     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
09c     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0a4     movl    [RBP + #12 (8-bit)], #8	# int
0ab     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b3     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
0b7     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
0bb     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
0bf     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0c3     B5: #	out( B20 B6 ) <- in( B16 B4 )  Freq: 1
0c3     
0c3     MEMBAR-storestore (empty encoding)
0c3     # checkcastPP of RBP
0c3     movq    R8, [rsp + #16]	# spill
0c8     movl    R11, [R8 + #8 (8-bit)]	# compressed klass ptr
0cc     NullCheck R8

0cc     B6: #	out( B22 B7 ) <- in( B5 )  Freq: 0.999999
0cc     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$25+0x000000080104e2b8: 0x00007fafd23bf8e0:Constant:exact *	# compressed klass ptr
0d3     jne,u   B22  P=0.000001 C=-1.000000

0d9     B7: #	out( B19 B8 ) <- in( B6 )  Freq: 0.999997
0d9     movq    RBX, [rsp + #0]	# spill
        nop 	# 3 bytes pad for loops and calls
0e0     movl    R11, [RBX + #8 (8-bit)]	# compressed klass ptr
0e4     NullCheck RBX

0e4     B8: #	out( B23 B9 ) <- in( B7 )  Freq: 0.999996
0e4     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0eb     jne,u   B23  P=0.000001 C=-1.000000

0f1     B9: #	out( B21 B10 ) <- in( B8 )  Freq: 0.999995
0f1     movq    RCX, RBX	# spill
0f4     # checkcastPP of RCX
0f4     movl    R11, [RCX + #12 (8-bit)]	# range
0f8     movl    R10, [rsp + #8]	# spill
        nop 	# 3 bytes pad for loops and calls
100     cmpl    R10, R11	# unsigned
103     jnb,u   B21  P=0.000001 C=-1.000000

109     B10: #	out( B21 B11 ) <- in( B9 )  Freq: 0.999994
109     movslq  R11, R11	# i2l
10c     movslq  RDI, R10	# i2l
10f     movq    R9, RDI	# spill
112     addq    R9, #7	# long
116     cmpq    R9, R11	# unsigned
119     jnb,u   B21  P=0.000001 C=-1.000000

11f     B11: #	out( B21 B12 ) <- in( B10 )  Freq: 0.999993
        nop 	# 1 bytes pad for loops and calls
120     cmpq    RDI, R11	# unsigned
123     jnb,u   B21  P=0.000001 C=-1.000000

129     B12: #	out( B17 B13 ) <- in( B11 )  Freq: 0.999992
129     movl    R10, [RCX + #16 + R10 << #2]	# int
12e     movl    [RBP + #16 (8-bit)], R10	# int
132     movl    R11, [RCX + #20 + RDI << #2]	# int
137     movl    [RBP + #20 (8-bit)], R11	# int
13b     movl    R10, [RCX + #24 + RDI << #2]	# int
140     movl    [RBP + #24 (8-bit)], R10	# int
144     movl    R11, [RCX + #28 + RDI << #2]	# int
149     movl    [RBP + #28 (8-bit)], R11	# int
14d     movl    R10, [RCX + #32 + RDI << #2]	# int
152     movl    [RBP + #32 (8-bit)], R10	# int
156     movl    R11, [RCX + #36 + RDI << #2]	# int
15b     movl    [RBP + #36 (8-bit)], R11	# int
15f     movl    R10, [RCX + #40 + RDI << #2]	# int
164     movl    [RBP + #40 (8-bit)], R10	# int
168     movl    R11, [RCX + #44 + RDI << #2]	# int
16d     movl    [RBP + #44 (8-bit)], R11	# int
171     # TLS is in R15
171     movq    RAX, [R15 + #328 (32-bit)]	# ptr
178     movq    R10, RAX	# spill
17b     addq    R10, #16	# ptr
17f     # TLS is in R15
        nop 	# 1 bytes pad for loops and calls
180     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
187     jnb,u   B17  P=0.000100 C=-1.000000

18d     B13: #	out( B14 ) <- in( B12 )  Freq: 0.999892
18d     # TLS is in R15
18d     movq    [R15 + #328 (32-bit)], R10	# ptr
194     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
19c     movq    [RAX], #1	# long
1a3     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd21ab530:Constant:exact *	# compressed klass ptr

1aa     B14: #	out( N302 ) <- in( B18 B13 )  Freq: 0.999992
1aa     encode_heap_oop_not_null R10,RBP
1f3     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
1f7     
1f7     # checkcastPP of RAX
1f7     MEMBAR-release ! (empty encoding)
1f7     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

209     ret

20a     B15: #	out( B26 B16 ) <- in( B3 )  Freq: 0.000100017
20a     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
214     movl    RDX, #8	# int
219     movq    RBP, [rsp + #0]	# spill
        nop 	# 2 bytes pad for loops and calls
21f     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::ldOp @ bci:4 (line 306) L[0]=rsp + #24 L[1]=RBP L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=548/0x224}

224     B16: #	out( B5 ) <- in( B15 )  Freq: 0.000100015
        # Block is sole successor of call
224     movq    RBP, RAX	# spill
227     jmp     B5

22c     B17: #	out( B27 B18 ) <- in( B12 )  Freq: 0.000100016
22c     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd21ab530:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
237     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::ldOp @ bci:43 (line 310) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop off=572/0x23c}

23c     B18: #	out( B14 ) <- in( B17 )  Freq: 0.000100014
        # Block is sole successor of call
        nop 	# 4 bytes pad for loops and calls
240     jmp     B14

245     B19: #	out( B21 ) <- in( B7 )  Freq: 1.01328e-06
245     movl    R10, [rsp + #8]	# spill
24a     jmp,s   B21

24c     B20: #	out( B21 ) <- in( B5 )  Freq: 1.01328e-06
24c     movq    RBX, [rsp + #0]	# spill
250     movl    R10, [rsp + #8]	# spill

255     B21: #	out( N302 ) <- in( B11 B20 B22 B19 B23 B9 B10 )  Freq: 7.06637e-06
255     movl    RSI, #-138	# int
25a     movq    [rsp + #0], RBX	# spill
25e     movl    [rsp + #8], R10	# spill
263     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::ldOp @ bci:16 (line 307) L[0]=rsp + #24 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=RBP L[5]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:7 (line 3612) L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=616/0x268}
268     stop	# ShouldNotReachHere

27c     B22: #	out( B21 ) <- in( B6 )  Freq: 9.99999e-07
27c     movq    RBX, [rsp + #0]	# spill
280     movl    R10, [rsp + #8]	# spill
285     jmp,s   B21

287     B23: #	out( B21 ) <- in( B8 )  Freq: 9.99996e-07
287     movl    R10, [rsp + #8]	# spill
28c     jmp,s   B21

28e     B24: #	out( N302 ) <- in( B2 )  Freq: 1e-35
28e     movl    RSI, #-34	# int
293     movq    RBP, RDX	# spill
296     movl    [rsp + #0], RCX	# spill
299     movl    [rsp + #4], R11	# spill
        nop 	# 1 bytes pad for loops and calls
29f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:4 (line 3574) L[0]=_ STK[0]=rsp + #4
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:1 (line 3612) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #16
        # OopMap {rbp=Oop [4]=NarrowOop [16]=Oop off=676/0x2a4}
2a4     stop	# ShouldNotReachHere

2b8     B25: #	out( N302 ) <- in( B1 )  Freq: 4.76837e-07
2b8     movl    RSI, #-187	# int
2bd     movq    RBP, RDX	# spill
2c0     movl    [rsp + #0], RCX	# spill
2c3     movq    R8, [rsp + #16]	# spill
2c8     movq    [rsp + #8], R8	# spill
2cd     movq    [rsp + #16], R10	# spill
2d2     movl    [rsp + #24], R11	# spill
2d7     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractSpecies::dummyVector @ bci:6 (line 296) L[0]=rsp + #16 L[1]=rsp + #24 STK[0]=rsp + #24
        # jdk.incubator.vector.IntVector$IntSpecies::dummyVector @ bci:1 (line 3574) L[0]=_
        # jdk.incubator.vector.IntVector$IntSpecies::ldOp @ bci:1 (line 3612) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8
        # OopMap {rbp=Oop [8]=Oop [16]=Oop [24]=NarrowOop off=732/0x2dc}
2dc     stop	# ShouldNotReachHere

2f0     B26: #	out( B28 ) <- in( B15 )  Freq: 1.00017e-09
2f0     # exception oop is in rax; no code emitted
2f0     movq    RSI, RAX	# spill
2f3     jmp,s   B28

2f5     B27: #	out( B28 ) <- in( B17 )  Freq: 1.00016e-09
2f5     # exception oop is in rax; no code emitted
2f5     movq    RSI, RAX	# spill

2f8     B28: #	out( N302 ) <- in( B26 B27 )  Freq: 2.00032e-09
2f8     addq    rsp, 48	# Destroy frame
	popq    rbp

2fd     jmp     rethrow_stub

--------------------------------------------------------------------------------
    409   50    b        jdk.incubator.vector.IntVector::intoArray (46 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 50 ------------------------
{method}
 - this oop:          0x0000000115851050
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x81000011  public final 
 - name:              'intoArray'
 - signature:         '([II)V'
 - max stack:         11
 - max locals:        4
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81aef0: 0xbba00000 i2c: 0x000000010efd72e0 c2i: 0x000000010efd73cb c2iUV: 0x000000010efd7391 c2iNCI: 0x000000010efd7408
 - compiled entry     0x000000010efd73cb
 - code size:         46
 - code start:        0x0000000115850fd8
 - code end (excl):   0x0000000115851006
 - method data:       0x0000000115934078
 - checked ex length: 0
 - linenumber start:  0x0000000115851006
 - localvar length:   4
 - localvar start:    0x0000000115851016

------------------------ OptoAssembly for Compile_id = 50 -----------------------
#
#  void ( jdk/incubator/vector/IntVector:NotNull *, int[int:>=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector:NotNull *
#r016 rdx:rdx   : parm 1: int[int:>=0]:exact *
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N97: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B6 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (288 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
030     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23c8740:Constant:exact *	# compressed klass ptr
037     jne,us  B6  P=0.000001 C=-1.000000

039     B2: #	out( B9 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 7 bytes pad for loops and calls
040     movl    R11, [RDX + #12 (8-bit)]	# range
044     NullCheck RDX

044     B3: #	out( B7 B4 ) <- in( B2 )  Freq: 0.999998
044     # checkcastPP of RSI
044     testl   RCX, RCX
046     jl,s   B7  P=0.000000 C=6701.000000

048     B4: #	out( B8 B5 ) <- in( B3 )  Freq: 0.999997
048     movl    RBP, R11	# spill
04b     addl    RBP, #-8	# int
04e     cmpl    RCX, RBP
050     jg     B8  P=0.000000 C=6701.000000

056     B5: #	out( N97 ) <- in( B4 )  Freq: 0.999997
056     movl    R11, [RSI + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
05a     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
061     movslq  R10, RCX	# i2l
064     store_vector [RDX + #16 + R10 << #2],XMM0
	
06b     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

080     ret

081     B6: #	out( N97 ) <- in( B1 )  Freq: 1e-06
081     movq    [rsp + #0], RDX	# spill
085     movl    [rsp + #8], RCX	# spill
089     movq    [rsp + #16], RSI	# spill
08e     movl    RSI, #-34	# int
        nop 	# 1 bytes pad for loops and calls
094     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::intoArray @ bci:2 (line 2960) L[0]=rsp + #16 L[1]=rsp + #0 L[2]=_ L[3]=_ STK[0]=rsp + #8 STK[1]=rsp + #16
        # OopMap {[0]=Oop [16]=Oop off=156/0x9c}
09c     stop	# ShouldNotReachHere

0b0     B7: #	out( N97 ) <- in( B3 )  Freq: 4.99999e-07
0b0     movq    RBP, RSI	# spill
0b3     movq    [rsp + #0], RDX	# spill
0b7     movl    [rsp + #12], RCX	# spill
0bb     movl    [rsp + #16], R11	# spill
0c0     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
0c8     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:52 (line 76) L[0]=rsp + #12 L[1]=#8 L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #12
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop off=208/0xd0}
0d0     stop	# ShouldNotReachHere

0e4     B8: #	out( N97 ) <- in( B4 )  Freq: 4.76836e-07
0e4     movq    [rsp + #0], RSI	# spill
0e8     movq    [rsp + #8], RDX	# spill
0ed     movl    [rsp + #20], RCX	# spill
0f1     movl    [rsp + #24], R11	# spill
0f6     movl    RSI, #-187	# int
        nop 	# 1 bytes pad for loops and calls
0fc     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #20 L[1]=#8 L[2]=rsp + #24 L[3]=_ STK[0]=rsp + #20 STK[1]=RBP
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ L[3]=_
        # OopMap {[0]=Oop [8]=Oop off=260/0x104}
104     stop	# ShouldNotReachHere

118     B9: #	out( N97 ) <- in( B2 )  Freq: 1.01328e-06
118     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
120     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::intoArray @ bci:6 (line 2960) L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap {off=296/0x128}
128     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    413   51    b        jdk.internal.vm.vector.VectorSupport::store (38 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 51 ------------------------
{method}
 - this oop:          0x000000080000c048
 - method holder:     'jdk/internal/vm/vector/VectorSupport'
 - constants:         0x00000008006215c8 constant pool [425] {0x00000008006215c8} for 'jdk/internal/vm/vector/VectorSupport' cache=0x000000080000b7a0
 - access:            0x81000009  public static 
 - name:              'store'
 - signature:         '(Ljava/lang/Class;Ljava/lang/Class;ILjava/lang/Object;JLjdk/internal/vm/vector/VectorSupport$Vector;Ljava/lang/Object;ILjdk/internal/vm/vector/VectorSupport$StoreVectorOperation;)V'
 - max stack:         5
 - max locals:        10
 - size of params:    10
 - method size:       13
 - intrinsic id:      303 _VectorStoreOp
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf043980: 0xbbabbebbab000000 i2c: 0x000000010f0b58e0 c2i: 0x000000010f0b59d0 c2iUV: 0x000000010f0b5996 c2iNCI: 0x000000010f0b5a0d
 - compiled entry     0x00000008000014b0
 - code size:         38
 - code start:        0x0000000800bd3088
 - code end (excl):   0x0000000800bd30ae
 - method data:       0x0000000115934390
 - checked ex length: 0
 - linenumber start:  0x0000000800bd30ae
 - localvar length:   9
 - localvar start:    0x0000000800bd30b8

------------------------ OptoAssembly for Compile_id = 51 -----------------------
#
#  void ( java/lang/Class:exact *, java/lang/Class:exact *, int, java/lang/Object *, long, half, jdk/internal/vm/vector/VectorSupport$Vector *, java/lang/Object *, int, jdk/internal/vm/vector/VectorSupport$StoreVectorOperation * )
#
#r018 rsi:rsi   : parm 0: java/lang/Class:exact *
#r016 rdx:rdx   : parm 1: java/lang/Class:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/Object *
#r006 r9:r9   : parm 4: long
#r014 rdi:rdi   : parm 6: jdk/internal/vm/vector/VectorSupport$Vector *
#r589 rsp+52: parm 9: jdk/internal/vm/vector/VectorSupport$StoreVectorOperation *
#r588 rsp+48: parm 9: jdk/internal/vm/vector/VectorSupport$StoreVectorOperation *
#r587 rsp+44: HOLE, owned by SELF
#r586 rsp+40: parm 8: int
#r585 rsp+36: parm 7: java/lang/Object *
#r584 rsp+32: parm 7: java/lang/Object *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) <- in( B38 B28 B39 B36 B40 B37 B27 B35 B41 B29 B31 B34 B32 B33 )  Freq: 1

000     B1: #	out( B38 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (648 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     movq    R10, [rsp + #48]	# spill
011     movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
015     NullCheck R10

015     B2: #	out( B28 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 11 bytes pad for loops and calls
020     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$26+0x000000080104e6f8: 0x00007fafd2280700:Constant:exact *	# compressed klass ptr
027     jne,u   B28  P=0.000001 C=-1.000000

02d     B3: #	out( B39 B4 ) <- in( B2 )  Freq: 0.999998
02d     movq    RCX, [rsp + #32]	# spill
032     movl    R11, [RCX + #8 (8-bit)]	# compressed klass ptr
036     NullCheck RCX

036     B4: #	out( B36 B5 ) <- in( B3 )  Freq: 0.999997
        nop 	# 10 bytes pad for loops and calls
040     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
047     jne,u   B36  P=0.000000 C=-1.000000

04d     B5: #	out( B40 B6 ) <- in( B4 )  Freq: 0.999997
04d     # checkcastPP of RCX
04d     movl    R11, [RDI + #8 (8-bit)]	# compressed klass ptr
051     NullCheck RDI

051     B6: #	out( B37 B7 ) <- in( B5 )  Freq: 0.999996
051     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2284c00:Constant:exact *	# compressed klass ptr
058     jne,u   B37  P=0.000000 C=-1.000000

05e     B7: #	out( B41 B8 ) <- in( B6 )  Freq: 0.999996
05e     # checkcastPP of RDI
05e     
05e     MEMBAR-acquire ! (empty encoding)
05e     # checkcastPP of RDI
05e     movl    RBP, [RDI + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
061     movl    R10, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
066     NullCheck RBP

066     B8: #	out( B29 B9 ) <- in( B7 )  Freq: 0.999995
066     cmpl    R10, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
06d     jne,u   B29  P=0.000001 C=-1.000000

073     B9: #	out( B27 B10 ) <- in( B8 )  Freq: 0.999994
073     decode_heap_oop_not_null RAX,RBP
077     # checkcastPP of RAX
077     movl    R8, [RAX + #12 (8-bit)]	# range
        nop 	# 5 bytes pad for loops and calls
080     testl   R8, R8	# unsigned
083     jbe,u   B27  P=0.111194 C=6709.000000

089     B10: #	out( B30 B11 ) <- in( B9 )  Freq: 0.888801
089     movl    R11, R8	# spill
08c     decl    R11	# int
08f     cmpl    R11, R8	# unsigned
092     jnb,u   B30  P=0.000001 C=-1.000000

098     B11: #	out( B31 B12 ) <- in( B10 )  Freq: 0.8888
098     movl    R9, [RCX + #12 (8-bit)]	# range
09c     movl    RDX, [rsp + #40]	# spill
0a0     cmpl    RDX, R9	# unsigned
0a3     jnb,u   B31  P=0.000001 C=-1.000000

0a9     B12: #	out( B31 B13 ) <- in( B11 )  Freq: 0.888799
0a9     movslq  R10, R8	# i2l
0ac     movslq  RBX, R9	# i2l
0af     movslq  RDI, [RSP + #40 (32-bit)]	# int -> long
0b4     addq    R10, RDI	# long
0b7     decq    R10	# long
        nop 	# 6 bytes pad for loops and calls
0c0     cmpq    R10, RBX	# unsigned
0c3     jnb,u   B31  P=0.000001 C=-1.000000

0c9     B13: #	out( B24 B14 ) <- in( B12 )  Freq: 0.888798
0c9     movl    R10, [RAX + #16 (8-bit)]	# int
0cd     movl    [RCX + #16 + RDI << #2], R10	# int
0d2     movl    R10, R8	# spill
0d5     addl    R10, #-3	# int
0d9     movl    R9, #-2147483648	# int
0df     cmpl    R11, R10
0e2     cmovll R10, R9	# signed, int
0e6     movl    R11, #1	# int
0ec     cmpl    R10, #1
0f0     jle     B24  P=0.000001 C=-1.000000

0f6     B14: #	out( B32 B15 ) <- in( B13 )  Freq: 0.888797
0f6     movq    R9, RDI	# spill
0f9     addq    R9, #1	# long
        nop 	# 3 bytes pad for loops and calls
100     cmpq    R9, RBX	# unsigned
103     jnb,u   B32  P=0.000001 C=-1.000000

109     B15: #	out( B34 B16 ) <- in( B14 )  Freq: 0.888796
109     cmpl    R8, #1	# unsigned
10d     jbe,u   B34  P=0.000001 C=-1.000000

113     B16: #	out( B35 B17 ) <- in( B15 )  Freq: 0.888795
113     cmpl    R8, #4	# unsigned
117     jbe,u   B35  P=0.000001 C=-1.000000

11d     B17: #	out( B33 B18 ) <- in( B16 )  Freq: 0.888794
11d     movq    R9, RDI	# spill
120     addq    R9, #4	# long
124     cmpq    R9, RBX	# unsigned
127     jnb,u   B33  P=0.000001 C=-1.000000

12d     B18: #	out( B20 ) <- in( B17 )  Freq: 0.888793
12d     movl    R14, #4000	# int
133     # TLS is in R15
133     xorl    R13, R13	# int
136     jmp,s   B20

138     B19: #	out( B20 ) <- in( B22 ) top-of-loop Freq: 7.10439
138     movdl   R8, XMM0	# spill

13d     B20: #	out( B21 ) <- in( B18 B19 ) Loop( B20-B19 ) Freq: 7.99319
13d     movl    R9, R10	# spill
140     subl    R9, R11	# int
143     cmpl    R10, R11
146     cmovll R9, R13	# signed, int
14a     cmpl    R9, #4000	# unsigned
151     cmovlnbe R9, R14	# unsigned, int
155     addl    R9, R11	# int
158     movdl   XMM0, R8	# spill
        nop 	# 3 bytes pad for loops and calls

160     B21: #	out( B21 B22 ) <- in( B20 B21 ) Loop( B21-B21 inner main of N149 strip mined) Freq: 71.8851
160     movl    R8, RDX	# spill
163     addl    R8, R11	# int
166     movslq  RSI, R11	# i2l
169     movl    RBX, [RAX + #16 + RSI << #2]	# int
16d     movq    RBP, RDI	# spill
170     addq    RBP, RSI	# long
173     movl    [RCX + #16 + RBP << #2], RBX	# int
177     movl    RBX, [RAX + #20 + RSI << #2]	# int
17b     movl    [RCX + #20 + RBP << #2], RBX	# int
17f     movl    RBX, [RAX + #24 + RSI << #2]	# int
183     movl    [RCX + #24 + RBP << #2], RBX	# int
187     movl    RBX, [RAX + #28 + RSI << #2]	# int
18b     movslq  R8, R8	# i2l
18e     movl    [RCX + #28 + R8 << #2], RBX	# int
193     addl    R11, #4	# int
197     cmpl    R11, R9
19a     jl,s   B21	# loop end  P=0.888806 C=5963.000000

19c     B22: #	out( B19 B23 ) <- in( B21 )  Freq: 7.99319
19c     movq    R8, [R15 + #304 (32-bit)]	# ptr
1a3     testl   rax, [R8]	# Safepoint: poll for GC        # jdk.incubator.vector.IntVector::stOp @ bci:35 (line 340) L[0]=_ L[1]=RCX L[2]=RDX L[3]=#Ptr0x00007fafd23c8d10 L[4]=RAX L[5]=R11
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rcx=Oop rax=Oop off=419/0x1a3}
1a6     cmpl    R11, R10
1a9     jl,s   B19  P=0.888806 C=5963.000000

1ab     B23: #	out( B24 ) <- in( B22 )  Freq: 0.888793
1ab     movdl   R8, XMM0	# spill

1b0     B24: #	out( B27 B25 ) <- in( B13 B23 )  Freq: 0.888794
1b0     cmpl    R11, R8
1b3     jge,s   B27  P=0.500000 C=-1.000000

1b5     B25: #	out( B26 ) <- in( B24 )  Freq: 0.444397
1b5     # castII of R11
        nop 	# 3 bytes pad for loops and calls

1b8     B26: #	out( B26 B27 ) <- in( B25 B26 ) Loop( B26-B26 inner post of N545) Freq: 0.888794
1b8     movslq  R10, R11	# i2l
1bb     movl    RBX, [RAX + #16 + R10 << #2]	# int
1c0     movq    R9, RDI	# spill
1c3     addq    R9, R10	# long
1c6     movl    [RCX + #16 + R9 << #2], RBX	# int
1cb     incl    R11	# int
1ce     cmpl    R11, R8
1d1     jl,s   B26	# loop end  P=0.500000 C=5963.000000

1d3     B27: #	out( N1 ) <- in( B26 B24 B9 )  Freq: 0.999988
1d3     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

1e5     ret

1e6     B28: #	out( N1 ) <- in( B2 )  Freq: 9.99999e-07
1e6     movl    RSI, #-34	# int
1eb     movl    RBP, [rsp + #40]	# spill
1ef     pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #40]
1f9     movq    [rsp + #48], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
1ff     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #40 STK[1]=rsp + #32 STK[2]=RBP STK[3]=rsp + #48
        # OopMap {[32]=Oop [40]=Oop [48]=Oop off=516/0x204}
204     stop	# ShouldNotReachHere

218     B29: #	out( N1 ) <- in( B8 )  Freq: 9.99995e-07
218     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
21f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=NarrowOop off=548/0x224}
224     stop	# ShouldNotReachHere

238     B30: #	out( B31 ) <- in( B10 )  Freq: 9.00603e-07
238     movl    RDX, [rsp + #40]	# spill

23c     B31: #	out( N1 ) <- in( B11 B12 B30 )  Freq: 2.70181e-06
23c     movl    RSI, #-138	# int
241     movq    RBP, RCX	# spill
244     movl    [rsp + #32], RDX	# spill
248     movq    [rsp + #40], RAX	# spill
24d     movl    [rsp + #36], R8	# spill
        nop 	# 1 bytes pad for loops and calls
253     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:14 (line 340) L[0]=_ L[1]=RBP L[2]=rsp + #32 L[3]=#Ptr0x00007fafd23c8d10 L[4]=rsp + #40 L[5]=#0 STK[0]=#0 STK[1]=rsp + #36
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [40]=Oop off=600/0x258}
258     stop	# ShouldNotReachHere

26c     B32: #	out( N1 ) <- in( B14 )  Freq: 9.00599e-07
26c     stop	# ShouldNotReachHere

280     B33: #	out( N1 ) <- in( B17 )  Freq: 9.00597e-07
280     stop	# ShouldNotReachHere

294     B34: #	out( N1 ) <- in( B15 )  Freq: 8.88796e-07
294     stop	# ShouldNotReachHere

2a8     B35: #	out( N1 ) <- in( B16 )  Freq: 8.88795e-07
2a8     stop	# ShouldNotReachHere

2bc     B36: #	out( N1 ) <- in( B4 )  Freq: 1e-35
2bc     movl    RSI, #-34	# int
2c1     movl    RBP, [rsp + #40]	# spill
2c5     movq    [rsp + #32], RDI	# spill
2ca     movq    [rsp + #40], RCX	# spill
2cf     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:1 L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #32 STK[0]=rsp + #40
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop [40]=Oop off=724/0x2d4}
2d4     stop	# ShouldNotReachHere

2e8     B37: #	out( N1 ) <- in( B6 )  Freq: 1e-35
2e8     movl    RSI, #-34	# int
2ed     movq    RBP, RCX	# spill
2f0     movl    R11, [rsp + #40]	# spill
2f5     movl    [rsp + #32], R11	# spill
2fa     movq    [rsp + #40], RDI	# spill
2ff     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:6 L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #32 STK[2]=rsp + #40
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop [40]=Oop off=772/0x304}
304     stop	# ShouldNotReachHere

318     B38: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
318     movl    RSI, #-10	# int
31d     movl    RBP, [rsp + #40]	# spill
321     movq    [rsp + #40], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
327     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=rsp + #32 STK[2]=RBP STK[3]=rsp + #40
        # OopMap {[32]=Oop [40]=Oop off=812/0x32c}
32c     stop	# ShouldNotReachHere

340     B39: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
340     movl    RSI, #-12	# int
345     movq    [rsp + #32], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
34b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:1 L[0]=_ L[1]=_ L[2]=rsp + #40 L[3]=rsp + #32 STK[0]=#NULL
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {[32]=Oop off=848/0x350}
350     stop	# ShouldNotReachHere

364     B40: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
364     movl    RSI, #-12	# int
369     movq    RBP, RCX	# spill
        nop 	# 3 bytes pad for loops and calls
36f     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:6 L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #40 STK[2]=#NULL
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=884/0x374}
374     stop	# ShouldNotReachHere

388     B41: #	out( N1 ) <- in( B7 )  Freq: 1.01327e-06
388     movl    RSI, #-12	# int
38d     movq    RBP, RCX	# spill
        nop 	# 3 bytes pad for loops and calls
393     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=RBP L[2]=rsp + #40 L[3]=#Ptr0x00007fafd23c8d10 L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # jdk.internal.vm.vector.VectorSupport::store @ bci:32 (line 315) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap {rbp=Oop off=920/0x398}
398     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    428   52    b        jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store (13 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 52 ------------------------
{method}
 - this oop:          0x00000001159303d8
 - method holder:     'jdk/incubator/vector/IntVector$$Lambda$26+0x000000080104e6f8'
 - constants:         0x0000000115930178 constant pool [23] {0x0000000115930178} for 'jdk/incubator/vector/IntVector$$Lambda$26+0x000000080104e6f8' cache=0x0000000115930468
 - access:            0x81000001  public 
 - name:              'store'
 - signature:         '(Ljava/lang/Object;ILjdk/internal/vm/vector/VectorSupport$Vector;)V'
 - max stack:         4
 - max locals:        4
 - size of params:    4
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b4e0: 0xbbab0000 i2c: 0x000000010efdc260 c2i: 0x000000010efdc34f c2iUV: 0x000000010efdc315 c2iNCI: 0x000000010efdc38c
 - compiled entry     0x000000010efdc34f
 - code size:         13
 - code start:        0x00000001159303c8
 - code end (excl):   0x00000001159303d5
 - method data:       0x0000000115934610
 - checked ex length: 0
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 52 -----------------------
#
#  void ( jdk/incubator/vector/IntVector$$Lambda$26+0x000000080104e6f8:NotNull:exact *, java/lang/Object *, int, jdk/internal/vm/vector/VectorSupport$Vector * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector$$Lambda$26+0x000000080104e6f8:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: jdk/internal/vm/vector/VectorSupport$Vector *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N348: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B36 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (480 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
030     NullCheck RDX

030     B2: #	out( B34 B3 ) <- in( B1 )  Freq: 0.999999
030     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
037     jne,u   B34  P=0.000000 C=-1.000000

03d     B3: #	out( B37 B4 ) <- in( B2 )  Freq: 0.999999
03d     # checkcastPP of RDX
        nop 	# 3 bytes pad for loops and calls
040     movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
044     NullCheck R8

044     B4: #	out( B35 B5 ) <- in( B3 )  Freq: 0.999998
044     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd07cf630:Constant:exact *	# compressed klass ptr
04b     jne,u   B35  P=0.000000 C=-1.000000

051     B5: #	out( B38 B6 ) <- in( B4 )  Freq: 0.999998
051     # checkcastPP of R8
051     
051     MEMBAR-acquire ! (empty encoding)
051     # checkcastPP of R8
051     movl    RBP, [R8 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
055     movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
05a     NullCheck RBP

05a     B6: #	out( B27 B7 ) <- in( B5 )  Freq: 0.999997
        nop 	# 6 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
067     jne,u   B27  P=0.000001 C=-1.000000

06d     B7: #	out( B26 B8 ) <- in( B6 )  Freq: 0.999996
06d     decode_heap_oop_not_null RAX,RBP
071     # checkcastPP of RAX
071     movl    R8, [RAX + #12 (8-bit)]	# range
075     testl   R8, R8	# unsigned
078     jbe,u   B26  P=0.111194 C=6709.000000

07e     B8: #	out( B28 B9 ) <- in( B7 )  Freq: 0.888803
07e     movl    RDI, R8	# spill
081     decl    RDI	# int
083     cmpl    RDI, R8	# unsigned
086     jnb,u   B28  P=0.000001 C=-1.000000

08c     B9: #	out( B28 B10 ) <- in( B8 )  Freq: 0.888802
08c     movl    R11, [RDX + #12 (8-bit)]	# range
090     cmpl    RCX, R11	# unsigned
093     jnb,u   B28  P=0.000001 C=-1.000000

099     B10: #	out( B28 B11 ) <- in( B9 )  Freq: 0.888801
099     movslq  R10, R8	# i2l
09c     movslq  RSI, R11	# i2l
09f     movslq  RBX, RCX	# i2l
0a2     addq    R10, RBX	# long
0a5     decq    R10	# long
0a8     cmpq    R10, RSI	# unsigned
0ab     jnb,u   B28  P=0.000001 C=-1.000000

0b1     B11: #	out( B23 B12 ) <- in( B10 )  Freq: 0.8888
0b1     movl    R11, [RAX + #16 (8-bit)]	# int
0b5     movl    [RDX + #16 + RBX << #2], R11	# int
0ba     movl    R10, R8	# spill
0bd     addl    R10, #-3	# int
0c1     movl    R9, #-2147483648	# int
0c7     cmpl    RDI, R10
0ca     cmovll R10, R9	# signed, int
0ce     movl    R11, #1	# int
0d4     cmpl    R10, #1
0d8     jle     B23  P=0.000001 C=-1.000000

0de     B12: #	out( B29 B13 ) <- in( B11 )  Freq: 0.888799
0de     movq    R9, RBX	# spill
0e1     addq    R9, #1	# long
0e5     cmpq    R9, RSI	# unsigned
0e8     jnb,u   B29  P=0.000001 C=-1.000000

0ee     B13: #	out( B30 B14 ) <- in( B12 )  Freq: 0.888798
0ee     cmpq    R9, RSI	# unsigned
0f1     jnb,u   B30  P=0.000001 C=-1.000000

0f7     B14: #	out( B32 B15 ) <- in( B13 )  Freq: 0.888797
0f7     cmpl    R8, #1	# unsigned
        nop 	# 5 bytes pad for loops and calls
100     jbe,u   B32  P=0.000001 C=-1.000000

106     B15: #	out( B33 B16 ) <- in( B14 )  Freq: 0.888796
106     cmpl    R8, #4	# unsigned
10a     jbe,u   B33  P=0.000001 C=-1.000000

110     B16: #	out( B31 B17 ) <- in( B15 )  Freq: 0.888795
110     movq    R9, RBX	# spill
113     addq    R9, #4	# long
117     cmpq    R9, RSI	# unsigned
        nop 	# 6 bytes pad for loops and calls
120     jnb,u   B31  P=0.000001 C=-1.000000

126     B17: #	out( B19 ) <- in( B16 )  Freq: 0.888794
126     movl    R13, #4000	# int
12c     # TLS is in R15
12c     xorl    R14, R14	# int
12f     jmp,s   B19

131     B18: #	out( B19 ) <- in( B21 ) top-of-loop Freq: 7.1044
131     movdl   R8, XMM0	# spill

136     B19: #	out( B20 ) <- in( B17 B18 ) Loop( B19-B18 ) Freq: 7.99319
136     movl    R9, R10	# spill
139     subl    R9, R11	# int
13c     cmpl    R10, R11
13f     cmovll R9, R14	# signed, int
143     cmpl    R9, #4000	# unsigned
14a     cmovlnbe R9, R13	# unsigned, int
14e     addl    R9, R11	# int
151     movdl   XMM0, R8	# spill
        nop 	# 10 bytes pad for loops and calls

160     B20: #	out( B20 B21 ) <- in( B19 B20 ) Loop( B20-B20 inner main of N128 strip mined) Freq: 71.8852
160     movl    R8, RCX	# spill
163     addl    R8, R11	# int
166     movslq  RSI, R11	# i2l
169     movl    RDI, [RAX + #16 + RSI << #2]	# int
16d     movq    RBP, RBX	# spill
170     addq    RBP, RSI	# long
173     movl    [RDX + #16 + RBP << #2], RDI	# int
177     movl    RDI, [RAX + #20 + RSI << #2]	# int
17b     movl    [RDX + #20 + RBP << #2], RDI	# int
17f     movl    RDI, [RAX + #24 + RSI << #2]	# int
183     movl    [RDX + #24 + RBP << #2], RDI	# int
187     movl    RDI, [RAX + #28 + RSI << #2]	# int
18b     movslq  R8, R8	# i2l
18e     movl    [RDX + #28 + R8 << #2], RDI	# int
193     addl    R11, #4	# int
197     cmpl    R11, R9
19a     jl,s   B20	# loop end  P=0.888806 C=5963.000000

19c     B21: #	out( B18 B22 ) <- in( B20 )  Freq: 7.99319
19c     movq    R8, [R15 + #304 (32-bit)]	# ptr
1a3     testl   rax, [R8]	# Safepoint: poll for GC        # jdk.incubator.vector.IntVector::stOp @ bci:35 (line 340) L[0]=_ L[1]=RDX L[2]=RCX L[3]=#Ptr0x00007fafd07d5080 L[4]=RAX L[5]=R11
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rdx=Oop rax=Oop off=419/0x1a3}
1a6     cmpl    R11, R10
1a9     jl,s   B18  P=0.888806 C=5963.000000

1ab     B22: #	out( B23 ) <- in( B21 )  Freq: 0.888794
1ab     movdl   R8, XMM0	# spill

1b0     B23: #	out( B26 B24 ) <- in( B11 B22 )  Freq: 0.888795
1b0     cmpl    R11, R8
1b3     jge,s   B26  P=0.500000 C=-1.000000

1b5     B24: #	out( B25 ) <- in( B23 )  Freq: 0.444398
1b5     # castII of R11
        nop 	# 3 bytes pad for loops and calls

1b8     B25: #	out( B25 B26 ) <- in( B24 B25 ) Loop( B25-B25 inner post of N480) Freq: 0.888795
1b8     movslq  R10, R11	# i2l
1bb     movl    RCX, [RAX + #16 + R10 << #2]	# int
1c0     movq    R9, RBX	# spill
1c3     addq    R9, R10	# long
1c6     movl    [RDX + #16 + R9 << #2], RCX	# int
1cb     incl    R11	# int
1ce     cmpl    R11, R8
1d1     jl,s   B25	# loop end  P=0.500000 C=5963.000000

1d3     B26: #	out( N348 ) <- in( B25 B23 B7 )  Freq: 0.999989
1d3     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

1e5     ret

1e6     B27: #	out( N348 ) <- in( B6 )  Freq: 9.99997e-07
1e6     movl    RSI, #-34	# int
1eb     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=NarrowOop off=496/0x1f0}
1f0     stop	# ShouldNotReachHere

204     B28: #	out( N348 ) <- in( B9 B10 B8 )  Freq: 2.70181e-06
204     movl    RSI, #-138	# int
209     movq    RBP, RDX	# spill
20c     movl    [rsp + #0], RCX	# spill
20f     movq    [rsp + #8], RAX	# spill
214     movl    [rsp + #4], R8	# spill
        nop 	# 2 bytes pad for loops and calls
21b     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:14 (line 340) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=#Ptr0x00007fafd07d5080 L[4]=rsp + #8 L[5]=#0 STK[0]=#0 STK[1]=rsp + #4
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [8]=Oop off=544/0x220}
220     stop	# ShouldNotReachHere

234     B29: #	out( N348 ) <- in( B12 )  Freq: 9.00601e-07
234     stop	# ShouldNotReachHere

248     B30: #	out( N348 ) <- in( B13 )  Freq: 9.006e-07
248     stop	# ShouldNotReachHere

25c     B31: #	out( N348 ) <- in( B16 )  Freq: 9.00598e-07
25c     stop	# ShouldNotReachHere

270     B32: #	out( N348 ) <- in( B14 )  Freq: 8.88797e-07
270     stop	# ShouldNotReachHere

284     B33: #	out( N348 ) <- in( B15 )  Freq: 8.88796e-07
284     stop	# ShouldNotReachHere

298     B34: #	out( N348 ) <- in( B2 )  Freq: 1e-35
298     movl    RSI, #-34	# int
29d     movl    RBP, RCX	# spill
29f     movq    [rsp + #0], RDX	# spill
2a3     movq    [rsp + #8], R8	# spill
        nop 	# 3 bytes pad for loops and calls
2ab     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:1 L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #8 STK[0]=rsp + #0
        # OopMap {[0]=Oop [8]=Oop off=688/0x2b0}
2b0     stop	# ShouldNotReachHere

2c4     B35: #	out( N348 ) <- in( B4 )  Freq: 1e-35
2c4     movl    RSI, #-34	# int
2c9     movq    RBP, RDX	# spill
2cc     movl    [rsp + #0], RCX	# spill
2cf     movq    [rsp + #8], R8	# spill
        nop 	# 3 bytes pad for loops and calls
2d7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:6 L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #8
        # OopMap {rbp=Oop [8]=Oop off=732/0x2dc}
2dc     stop	# ShouldNotReachHere

2f0     B36: #	out( N348 ) <- in( B1 )  Freq: 1.01328e-06
2f0     movl    RSI, #-12	# int
2f5     movl    RBP, RCX	# spill
2f7     movq    [rsp + #0], R8	# spill
2fb     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:1 L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 STK[0]=#NULL
        # OopMap {[0]=Oop off=768/0x300}
300     stop	# ShouldNotReachHere

314     B37: #	out( N348 ) <- in( B3 )  Freq: 1.01328e-06
314     movl    RSI, #-12	# int
319     movq    RBP, RDX	# spill
31c     movl    [rsp + #0], RCX	# spill
31f     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:6 L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=#NULL
        # OopMap {rbp=Oop off=804/0x324}
324     stop	# ShouldNotReachHere

338     B38: #	out( N348 ) <- in( B5 )  Freq: 1.01328e-06
338     movl    RSI, #-12	# int
33d     movq    RBP, RDX	# spill
340     movl    [rsp + #0], RCX	# spill
343     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=#Ptr0x00007fafd07d5080 L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector$$Lambda$26/0x000000080104e6f8::store @ bci:9 L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop off=840/0x348}
348     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    441   53    b        jdk.incubator.vector.IntVector::lambda$intoArray$81 (12 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 53 ------------------------
{method}
 - this oop:          0x00000001158565f0
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x8100100a  private static synthetic 
 - name:              'lambda$intoArray$81'
 - signature:         '([IILjdk/incubator/vector/IntVector;)V'
 - max stack:         5
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b0d0: 0xbab00000 i2c: 0x000000010efd9660 c2i: 0x000000010efd974b c2iUV: 0x000000010efd9711 c2iNCI: 0x000000010efd9788
 - compiled entry     0x000000010efd974b
 - code size:         12
 - code start:        0x00000001158565b8
 - code end (excl):   0x00000001158565c4
 - method data:       0x0000000115934848
 - checked ex length: 0
 - linenumber start:  0x00000001158565c4
 - localvar length:   3
 - localvar start:    0x00000001158565ca

------------------------ OptoAssembly for Compile_id = 53 -----------------------
#
#  void ( int[int:>=0]:exact *, int, jdk/incubator/vector/IntVector * )
#
#r018 rsi:rsi   : parm 0: int[int:>=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx:rcx   : parm 2: jdk/incubator/vector/IntVector *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B34 B26 B25 B33 B35 B27 B28 B32 B29 B31 B30 )  Freq: 1

000     B1: #	out( B34 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (360 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    R11, [RCX + #8 (8-bit)]	# compressed klass ptr
010     NullCheck RCX

010     B2: #	out( B26 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1f69370:Constant:exact *	# compressed klass ptr
017     jne,u   B26  P=0.000001 C=-1.000000

01d     B3: #	out( B35 B4 ) <- in( B2 )  Freq: 0.999998
01d     # checkcastPP of RCX
01d     
01d     MEMBAR-acquire ! (empty encoding)
01d     # checkcastPP of RCX
01d     movl    RBP, [RCX + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
020     movl    R10, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
025     NullCheck RBP

025     B4: #	out( B27 B5 ) <- in( B3 )  Freq: 0.999997
025     cmpl    R10, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
02c     jne,u   B27  P=0.000001 C=-1.000000

032     B5: #	out( B25 B6 ) <- in( B4 )  Freq: 0.999996
032     decode_heap_oop_not_null RCX,RBP
036     # checkcastPP of RCX
036     movl    R8, [RCX + #12 (8-bit)]	# range
        nop 	# 6 bytes pad for loops and calls
040     testl   R8, R8	# unsigned
043     jbe,u   B25  P=0.111194 C=6709.000000

049     B6: #	out( B28 B7 ) <- in( B5 )  Freq: 0.888803
049     movl    R11, R8	# spill
04c     decl    R11	# int
04f     cmpl    R11, R8	# unsigned
052     jnb,u   B28  P=0.000001 C=-1.000000

058     B7: #	out( B28 B8 ) <- in( B6 )  Freq: 0.888802
        nop 	# 8 bytes pad for loops and calls
060     movl    R10, [RSI + #12 (8-bit)]	# range
064     NullCheck RSI

064     B8: #	out( B28 B9 ) <- in( B7 )  Freq: 0.888801
064     cmpl    RDX, R10	# unsigned
067     jnb,u   B28  P=0.000001 C=-1.000000

06d     B9: #	out( B28 B10 ) <- in( B8 )  Freq: 0.8888
06d     movslq  RDI, RDX	# i2l
070     movslq  R9, R8	# i2l
073     addq    R9, RDI	# long
076     movslq  RBX, R10	# i2l
079     decq    R9	# long
        nop 	# 4 bytes pad for loops and calls
080     cmpq    R9, RBX	# unsigned
083     jnb,u   B28  P=0.000001 C=-1.000000

089     B10: #	out( B22 B11 ) <- in( B9 )  Freq: 0.888799
089     movl    R10, [RCX + #16 (8-bit)]	# int
08d     movl    [RSI + #16 + RDI << #2], R10	# int
092     movl    R10, R8	# spill
095     addl    R10, #-3	# int
099     movl    R9, #-2147483648	# int
09f     cmpl    R11, R10
0a2     cmovll R10, R9	# signed, int
0a6     movl    R11, #1	# int
0ac     cmpl    R10, #1
0b0     jle     B22  P=0.000001 C=-1.000000

0b6     B11: #	out( B29 B12 ) <- in( B10 )  Freq: 0.888798
0b6     movq    R9, RDI	# spill
0b9     addq    R9, #1	# long
        nop 	# 3 bytes pad for loops and calls
0c0     cmpq    R9, RBX	# unsigned
0c3     jnb,u   B29  P=0.000001 C=-1.000000

0c9     B12: #	out( B30 B13 ) <- in( B11 )  Freq: 0.888797
0c9     cmpq    R9, RBX	# unsigned
0cc     jnb,u   B30  P=0.000001 C=-1.000000

0d2     B13: #	out( B32 B14 ) <- in( B12 )  Freq: 0.888796
0d2     cmpl    R8, #1	# unsigned
0d6     jbe,u   B32  P=0.000001 C=-1.000000

0dc     B14: #	out( B33 B15 ) <- in( B13 )  Freq: 0.888795
        nop 	# 4 bytes pad for loops and calls
0e0     cmpl    R8, #4	# unsigned
0e4     jbe,u   B33  P=0.000001 C=-1.000000

0ea     B15: #	out( B31 B16 ) <- in( B14 )  Freq: 0.888794
0ea     movq    R9, RDI	# spill
0ed     addq    R9, #4	# long
0f1     cmpq    R9, RBX	# unsigned
0f4     jnb,u   B31  P=0.000001 C=-1.000000

0fa     B16: #	out( B18 ) <- in( B15 )  Freq: 0.888793
0fa     xorl    R14, R14	# int
0fd     # TLS is in R15
0fd     movl    R13, #4000	# int
103     jmp,s   B18

105     B17: #	out( B18 ) <- in( B20 ) top-of-loop Freq: 7.10439
105     movdl   R8, XMM0	# spill

10a     B18: #	out( B19 ) <- in( B16 B17 ) Loop( B18-B17 ) Freq: 7.99319
10a     movl    R9, R10	# spill
10d     subl    R9, R11	# int
110     cmpl    R10, R11
113     cmovll R9, R14	# signed, int
117     cmpl    R9, #4000	# unsigned
11e     cmovlnbe R9, R13	# unsigned, int
122     addl    R9, R11	# int
125     movdl   XMM0, R8	# spill
        nop 	# 6 bytes pad for loops and calls

130     B19: #	out( B19 B20 ) <- in( B18 B19 ) Loop( B19-B19 inner main of N112 strip mined) Freq: 71.8851
130     movl    R8, RDX	# spill
133     addl    R8, R11	# int
136     movslq  RAX, R11	# i2l
139     movl    RBX, [RCX + #16 + RAX << #2]	# int
13d     movq    RBP, RDI	# spill
140     addq    RBP, RAX	# long
143     movl    [RSI + #16 + RBP << #2], RBX	# int
147     movl    RBX, [RCX + #20 + RAX << #2]	# int
14b     movl    [RSI + #20 + RBP << #2], RBX	# int
14f     movl    RBX, [RCX + #24 + RAX << #2]	# int
153     movl    [RSI + #24 + RBP << #2], RBX	# int
157     movl    RBX, [RCX + #28 + RAX << #2]	# int
15b     movslq  R8, R8	# i2l
15e     movl    [RSI + #28 + R8 << #2], RBX	# int
163     addl    R11, #4	# int
167     cmpl    R11, R9
16a     jl,s   B19	# loop end  P=0.888806 C=5963.000000

16c     B20: #	out( B17 B21 ) <- in( B19 )  Freq: 7.99319
16c     movq    R8, [R15 + #304 (32-bit)]	# ptr
173     testl   rax, [R8]	# Safepoint: poll for GC        # jdk.incubator.vector.IntVector::stOp @ bci:35 (line 340) L[0]=_ L[1]=RSI L[2]=RDX L[3]=#Ptr0x00007fafd2272d50 L[4]=RCX L[5]=R11
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rcx=Oop rsi=Oop off=371/0x173}
176     cmpl    R11, R10
179     jl,s   B17  P=0.888806 C=5963.000000

17b     B21: #	out( B22 ) <- in( B20 )  Freq: 0.888793
17b     movdl   R8, XMM0	# spill

180     B22: #	out( B25 B23 ) <- in( B10 B21 )  Freq: 0.888794
180     cmpl    R11, R8
183     jge,s   B25  P=0.500000 C=-1.000000

185     B23: #	out( B24 ) <- in( B22 )  Freq: 0.444397
185     # castII of R11
        nop 	# 3 bytes pad for loops and calls

188     B24: #	out( B24 B25 ) <- in( B23 B24 ) Loop( B24-B24 inner post of N443) Freq: 0.888794
188     movslq  R10, R11	# i2l
18b     movl    R9, [RCX + #16 + R10 << #2]	# int
190     movq    RBX, RDI	# spill
193     addq    RBX, R10	# long
196     movl    [RSI + #16 + RBX << #2], R9	# int
19b     incl    R11	# int
        nop 	# 2 bytes pad for loops and calls
1a0     cmpl    R11, R8
1a3     jl,s   B24	# loop end  P=0.500000 C=5963.000000

1a5     B25: #	out( N1 ) <- in( B24 B22 B5 )  Freq: 0.999988
1a5     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

1b7     ret

1b8     B26: #	out( N1 ) <- in( B2 )  Freq: 9.99999e-07
1b8     movq    RBP, RSI	# spill
1bb     movl    [rsp + #0], RDX	# spill
1be     movq    [rsp + #8], RCX	# spill
1c3     movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
1cb     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=#Ptr0x00007fafd2272d50 L[4]=_ L[5]=_ STK[0]=rsp + #8
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop off=464/0x1d0}
1d0     stop	# ShouldNotReachHere

1e4     B27: #	out( N1 ) <- in( B4 )  Freq: 9.99997e-07
1e4     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
1eb     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop off=496/0x1f0}
1f0     stop	# ShouldNotReachHere

204     B28: #	out( N1 ) <- in( B9 B7 B6 B8 )  Freq: 3.60241e-06
204     movq    RBP, RSI	# spill
207     movl    [rsp + #0], RDX	# spill
20a     movq    [rsp + #8], RCX	# spill
20f     movl    RSI, #-138	# int
214     movl    [rsp + #4], R8	# spill
        nop 	# 2 bytes pad for loops and calls
21b     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::stOp @ bci:14 (line 340) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=#Ptr0x00007fafd2272d50 L[4]=rsp + #8 L[5]=#0 STK[0]=#0 STK[1]=rsp + #4
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop off=544/0x220}
220     stop	# ShouldNotReachHere

234     B29: #	out( N1 ) <- in( B11 )  Freq: 9.006e-07
234     stop	# ShouldNotReachHere

248     B30: #	out( N1 ) <- in( B12 )  Freq: 9.00599e-07
248     stop	# ShouldNotReachHere

25c     B31: #	out( N1 ) <- in( B15 )  Freq: 9.00597e-07
25c     stop	# ShouldNotReachHere

270     B32: #	out( N1 ) <- in( B13 )  Freq: 8.88796e-07
270     stop	# ShouldNotReachHere

284     B33: #	out( N1 ) <- in( B14 )  Freq: 8.88795e-07
284     stop	# ShouldNotReachHere

298     B34: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
298     movq    RBP, RSI	# spill
29b     movl    [rsp + #0], RDX	# spill
29e     movl    RSI, #-10	# int
2a3     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #0 STK[3]=#Ptr0x00007fafd2272d50
        # OopMap {rbp=Oop off=680/0x2a8}
2a8     stop	# ShouldNotReachHere

2bc     B35: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
2bc     movq    RBP, RSI	# spill
2bf     movl    [rsp + #0], RDX	# spill
2c2     movl    RSI, #-12	# int
2c7     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::stOp @ bci:1 (line 339) L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=#Ptr0x00007fafd2272d50 L[4]=_ L[5]=_
        # jdk.incubator.vector.IntVector::lambda$intoArray$81 @ bci:8 (line 2968) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop off=716/0x2cc}
2cc     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    454   54 %  b        Bar::main @ 24 (89 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 54 ------------------------
{method}
 - this oop:          0x0000000115c017b8
 - method holder:     'Bar'
 - constants:         0x0000000115c01068 constant pool [97]/operands[10] {0x0000000115c01068} for 'Bar' cache=0x0000000115c01940
 - access:            0xc1000009  public static 
 - name:              'main'
 - signature:         '([Ljava/lang/String;)V'
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         89
 - code start:        0x0000000115c01748
 - code end (excl):   0x0000000115c017a1
 - method data:       0x0000000115c01c48
 - checked ex length: 0
 - linenumber start:  0x0000000115c017a1
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 54 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N225: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B21 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c     movl    RBP, [RSI]	# int
01e     movq    RDI, RSI	# spill
021     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
031     movq    R10, java/lang/Class:exact *	# ptr
03b     movl    R11, [R10 + #116 (8-bit)]	# compressed ptr ! Field: Bar.a
        nop 	# 1 bytes pad for loops and calls
040     movl    R8, [R12 + R11 << 3 + #12] (compressed oop addressing)	# range
045     NullCheck R11

045     B2: #	out( B21 B3 ) <- in( B1 )  Freq: 0.999999
045     addl    R8, #-8	# int
049     testl   R8, R8
04c     jl     B21  P=0.000001 C=-1.000000

052     B3: #	out( B21 B4 ) <- in( B2 )  Freq: 0.999998
052     movl    R8, [R10 + #120 (8-bit)]	# compressed ptr ! Field: Bar.b
        nop 	# 10 bytes pad for loops and calls
060     movl    R10, [R12 + R8 << 3 + #12] (compressed oop addressing)	# range
065     NullCheck R8

065     B4: #	out( B21 B5 ) <- in( B3 )  Freq: 0.999997
065     addl    R10, #-8	# int
069     testl   R10, R10
06c     jl     B21  P=0.000001 C=-1.000000

072     B5: #	out( B20 B6 ) <- in( B4 )  Freq: 0.999996
072     cmpl    RBP, #1000000
078     jge     B20  P=0.000000 C=11264.000000

07e     B6: #	out( B7 ) <- in( B5 )  Freq: 0.999995
07e     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
085     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
08c     movl    R10, RBP	# spill
08f     incl    R10	# int

092     B7: #	out( B9 B8 ) <- in( B6 B8 ) Loop( B7-B8 inner pre of N711) Freq: 1.99999
092     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
099     incl    RBP	# int
        nop 	# 5 bytes pad for loops and calls
0a0     cmpl    RBP, R10
0a3     jge,s   B9	# loop end  P=0.500000 C=11264.000000

0a5     B8: #	out( B7 ) <- in( B7 )  Freq: 0.999995
0a5     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
0ac     jmp,s   B7

0ae     B9: #	out( B16 B10 ) <- in( B7 )  Freq: 0.999995
0ae     cmpl    RBP, #999985
0b4     jge     B16  P=0.000001 C=-1.000000

0ba     B10: #	out( B15 ) <- in( B9 )  Freq: 0.999994
0ba     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
0c1     # castII of RBP
0c1     movl    R9, #16000	# int
0c7     # TLS is in R15
0c7     jmp     B15
        nop 	# 4 bytes pad for loops and calls

0d0     B11: #	out( B12 ) <- in( B12 ) top-of-loop Freq: 9.99994e+11
0d0     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	

0d7     B12: #	out( B11 B13 ) <- in( B15 B11 ) Loop( B12-B11 inner main of N92 strip mined) Freq: 9.99994e+11
0d7     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
0de     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
0e5     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
0ec     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
0f3     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
0fa     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
101     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
108     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
10f     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
116     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
11d     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
124     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
12b     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
132     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
139     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
140     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
147     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
14e     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
155     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
15c     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
163     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
16a     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
171     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
178     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
17f     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
186     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
18d     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
194     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
19b     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
1a2     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
1a9     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
1b0     addl    RBP, #16	# int
1b3     cmpl    RBP, R10
1b6     jl     B11	# loop end  P=1.000000 C=11264.000000

1bc     B13: #	out( B16 B14 ) <- in( B12 )  Freq: 999994
1bc     movq    R10, [R15 + #304 (32-bit)]	# ptr
1c3     testl   rax, [R10]	# Safepoint: poll for GC        # Bar::main @ bci:36 (line 33) L[0]=_ L[1]=RBP
        # OopMap {r11=NarrowOop r8=NarrowOop off=451/0x1c3}
1c6     cmpl    RBP, #999985
1cc     jge,s   B16  P=0.000000 C=11264.000000

1ce     B14: #	out( B15 ) <- in( B13 )  Freq: 999994
1ce     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	

1d5     B15: #	out( B12 ) <- in( B10 B14 ) Loop( B15-B14 ) Freq: 999994
1d5     movl    R10, #999985	# int
1db     subl    R10, RBP	# int
1de     cmpl    R10, #16000	# unsigned
1e5     cmovlnbe R10, R9	# unsigned, int
1e9     addl    R10, RBP	# int
1ec     jmp     B12

1f1     B16: #	out( B20 B17 ) <- in( B9 B13 )  Freq: 0.999995
1f1     cmpl    RBP, #1000000
1f7     jge,s   B20  P=0.000001 C=-1.000000

1f9     B17: #	out( B19 ) <- in( B16 )  Freq: 0.999994
1f9     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	
200     # castII of RBP
200     jmp,s   B19
        nop 	# 2 bytes pad for loops and calls

204     B18: #	out( B19 ) <- in( B19 ) top-of-loop Freq: 986889
204     load_vector XMM0,[R12 + R11 << 3 + #16] (compressed oop addressing)
20b     store_vector [R12 + R8 << 3 + #16] (compressed oop addressing),XMM0
	

212     B19: #	out( B18 B20 ) <- in( B17 B18 ) Loop( B19-B18 inner post of N711) Freq: 986890
212     incl    RBP	# int
        nop 	# 12 bytes pad for loops and calls
220     cmpl    RBP, #1000000
226     jl,s   B18	# loop end  P=0.999999 C=11264.000000

228     B20: #	out( N225 ) <- in( B5 B19 B16 )  Freq: 0.999996
228     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
230     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # Bar::main @ bci:27 (line 33) L[0]=_ L[1]=RBP STK[0]=RBP STK[1]=#1000000
        # OopMap {off=568/0x238}
238     stop	# ShouldNotReachHere

24c     B21: #	out( N225 ) <- in( B4 B1 B2 B3 )  Freq: 4.02655e-06
24c     movl    RSI, #-138	# int
        nop 	# 3 bytes pad for loops and calls
254     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # Bar::main @ bci:24 (line 33) L[0]=_ L[1]=RBP
        # OopMap {off=604/0x25c}
25c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    463   54 %           Bar::main @ 24 (89 bytes)   made not entrant
    466   55     n       java.lang.invoke.MethodHandle::linkToStatic(LLLLLL)L (native)   (static)
    466   56     n       java.lang.invoke.MethodHandle::invokeBasic(LLLLL)L (native)   
    466   57     n       java.lang.invoke.MethodHandle::linkToSpecial(LLLLLLL)L (native)   (static)
    467   58     n       java.lang.invoke.MethodHandle::linkToStatic(LJL)L (native)   (static)
    467   59     n       java.lang.invoke.MethodHandle::invokeBasic(LJ)L (native)   
    467   60     n       java.lang.invoke.MethodHandle::linkToSpecial(LLJL)L (native)   (static)
    468   61    b        java.lang.String::isLatin1 (19 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 61 ------------------------
{method}
 - this oop:          0x000000080046a8b8
 - method holder:     'java/lang/String'
 - constants:         0x0000000800ba9068 constant pool [1379]/operands[28] {0x0000000800ba9068} for 'java/lang/String' cache=0x0000000800465df8
 - access:            0x81000000  
 - name:              'isLatin1'
 - signature:         '()Z'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a80: 0xb0000000 i2c: 0x000000010f027060 c2i: 0x000000010f02711e c2iUV: 0x000000010f0270e4 c2iNCI: 0x000000010f02715b
 - compiled entry     0x0000000800000280
 - code size:         19
 - code start:        0x0000000800bb0728
 - code end (excl):   0x0000000800bb073b
 - method data:       0x0000000115903a88
 - checked ex length: 0
 - linenumber start:  0x0000000800bb073b
 - localvar length:   1
 - localvar start:    0x0000000800bb0742

------------------------ OptoAssembly for Compile_id = 61 -----------------------
#
#  bool ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N30: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movsbl  R11, [RSI + #16 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
031     testl   R11, R11
034     jne,s   B3  P=0.000000 C=6700.000000

036     B2: #	out( N30 ) <- in( B1 )  Freq: 1
036     movl    RAX, #1	# int
03b     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

04d     ret

04e     B3: #	out( N30 ) <- in( B1 )  Freq: 5e-07
04e     movl    RSI, #-187	# int
053     movl    RBP, R11	# spill
        nop 	# 1 bytes pad for loops and calls
057     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.String::isLatin1 @ bci:10 (line 4474) L[0]=_ STK[0]=RBP
        # OopMap {off=92/0x5c}
05c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    470   62     n       java.lang.invoke.MethodHandle::linkToStatic(JLLLL)J (native)   (static)
    470   63     n       java.lang.invoke.MethodHandle::invokeBasic(JLLL)J (native)   
    470   64     n       java.lang.invoke.MethodHandle::linkToSpecial(LJLLLL)J (native)   (static)
    471   65     n       java.lang.invoke.MethodHandle::linkToStatic(LLLLL)L (native)   (static)
    471   66     n       java.lang.invoke.MethodHandle::invokeBasic(LLLL)L (native)   
    472   67     n       java.lang.invoke.MethodHandle::invokeBasic(JLL)J (native)   
    472   68     n       java.lang.invoke.MethodHandle::linkToSpecial(LJLLL)J (native)   (static)
    472   69    b        java.lang.String::charAt (25 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 69 ------------------------
{method}
 - this oop:          0x00000008004688a0
 - method holder:     'java/lang/String'
 - constants:         0x0000000800ba9068 constant pool [1379]/operands[28] {0x0000000800ba9068} for 'java/lang/String' cache=0x0000000800465df8
 - access:            0x81000001  public 
 - name:              'charAt'
 - signature:         '(I)C'
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034d00: 0xba000000 i2c: 0x000000010f0289e0 c2i: 0x000000010f028aa1 c2iUV: 0x000000010f028a67 c2iNCI: 0x000000010f028ade
 - compiled entry     0x00000008000004a8
 - code size:         25
 - code start:        0x0000000800babee0
 - code end (excl):   0x0000000800babef9
 - method data:       0x000000011592e490
 - checked ex length: 0
 - linenumber start:  0x0000000800babef9
 - localvar length:   2
 - localvar start:    0x0000000800babf06

------------------------ OptoAssembly for Compile_id = 69 -----------------------
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N67: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B5 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (240 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movsbl  R10, [RSI + #16 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
031     testl   R10, R10
034     jne,s   B5  P=0.000000 C=6701.000000

036     B2: #	out( B7 B3 ) <- in( B1 )  Freq: 1
036     movl    RBP, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
        nop 	# 7 bytes pad for loops and calls
040     movl    R10, [R12 + RBP << 3 + #12] (compressed oop addressing)	# range
045     NullCheck RBP

045     B3: #	out( B6 B4 ) <- in( B2 )  Freq: 0.999999
045     cmpl    RDX, R10	# unsigned
048     jnb,us  B6  P=0.000000 C=10000.000000

04a     B4: #	out( N67 ) <- in( B3 )  Freq: 0.999998
04a     decode_heap_oop_not_null R10,RBP
04e     movzbl  RAX, [R10 + #16 + RDX]	# ubyte
054     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

066     ret

067     B5: #	out( N67 ) <- in( B1 )  Freq: 5e-07
067     movq    RBP, RSI	# spill
06a     movl    [rsp + #0], RDX	# spill
06d     movl    [rsp + #4], R10	# spill
072     movl    RSI, #-187	# int
077     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # java.lang.String::isLatin1 @ bci:10 (line 4474) L[0]=_ STK[0]=rsp + #4
        # java.lang.String::charAt @ bci:1 (line 1486) L[0]=RBP L[1]=rsp + #0
        # OopMap {rbp=Oop off=124/0x7c}
07c     stop	# ShouldNotReachHere

090     B6: #	out( N67 ) <- in( B3 )  Freq: 4.76836e-07
090     movl    RSI, #-27	# int
095     movl    [rsp + #4], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
09b     call,static  wrapper for: uncommon_trap(reason='range_check' action='reinterpret' debug_id='0')
        # java.lang.StringLatin1::charAt @ bci:1 (line 47) L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # java.lang.String::charAt @ bci:12 (line 1487) L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop off=160/0xa0}
0a0     stop	# ShouldNotReachHere

0b4     B7: #	out( N67 ) <- in( B2 )  Freq: 1.01328e-06
0b4     movl    RSI, #-10	# int
0b9     movl    [rsp + #4], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
0bf     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::charAt @ bci:1 (line 47) L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # java.lang.String::charAt @ bci:12 (line 1487) L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop off=196/0xc4}
0c4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    475   70    b        java.lang.StringLatin1::charAt (28 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 70 ------------------------
{method}
 - this oop:          0x0000000800031150
 - method holder:     'java/lang/StringLatin1'
 - constants:         0x00000008006409a0 constant pool [380] {0x00000008006409a0} for 'java/lang/StringLatin1' cache=0x000000080002fc18
 - access:            0x81000009  public static 
 - name:              'charAt'
 - signature:         '([BI)C'
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034d00: 0xba000000 i2c: 0x000000010f0289e0 c2i: 0x000000010f028aa1 c2iUV: 0x000000010f028a67 c2iNCI: 0x000000010f028ade
 - compiled entry     0x00000008000004a8
 - code size:         28
 - code start:        0x00000008006461e8
 - code end (excl):   0x0000000800646204
 - method data:       0x000000011592e6b0
 - checked ex length: 0
 - linenumber start:  0x0000000800646204
 - localvar length:   2
 - localvar start:    0x000000080064620e

------------------------ OptoAssembly for Compile_id = 70 -----------------------
#
#  char ( byte[int:>=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: byte[int:>=0]:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B4 B5 B3 )  Freq: 1

000     B1: #	out( B5 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    R10, [RSI + #12 (8-bit)]	# range
010     NullCheck RSI

010     B2: #	out( B4 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    RDX, R10	# unsigned
013     jnb,us  B4  P=0.000000 C=6700.000000

015     B3: #	out( N1 ) <- in( B2 )  Freq: 0.999999
015     movzbl  RAX, [RSI + #16 + RDX]	# ubyte
01a     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

02c     ret

02d     B4: #	out( N1 ) <- in( B2 )  Freq: 4.76837e-07
02d     movq    RBP, RSI	# spill
030     movl    [rsp + #4], RDX	# spill
034     movl    RSI, #-27	# int
        nop 	# 2 bytes pad for loops and calls
03b     call,static  wrapper for: uncommon_trap(reason='range_check' action='reinterpret' debug_id='0')
        # java.lang.StringLatin1::charAt @ bci:1 (line 47) L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap {rbp=Oop off=64/0x40}
040     stop	# ShouldNotReachHere

054     B5: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
054     movq    RBP, RSI	# spill
057     movl    [rsp + #4], RDX	# spill
05b     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
063     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::charAt @ bci:1 (line 47) L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # OopMap {rbp=Oop off=104/0x68}
068     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    477   71    b        java.lang.StringLatin1::hashCode (42 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 71 ------------------------
{method}
 - this oop:          0x0000000800030a00
 - method holder:     'java/lang/StringLatin1'
 - constants:         0x00000008006409a0 constant pool [380] {0x00000008006409a0} for 'java/lang/StringLatin1' cache=0x000000080002fc18
 - access:            0xc1000009  public static 
 - name:              'hashCode'
 - signature:         '([B)I'
 - max stack:         4
 - max locals:        6
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a80: 0xb0000000 i2c: 0x000000010f027060 c2i: 0x000000010f02711e c2iUV: 0x000000010f0270e4 c2iNCI: 0x000000010f02715b
 - compiled entry     0x0000000800000280
 - code size:         42
 - code start:        0x00000008006455e8
 - code end (excl):   0x0000000800645612
 - method data:       0x0000000115833e80
 - checked ex length: 0
 - linenumber start:  0x0000000800645612
 - localvar length:   3
 - localvar start:    0x0000000800645622

------------------------ OptoAssembly for Compile_id = 71 -----------------------
#
#  int ( byte[int:>=0]:exact * )
#
#r018 rsi:rsi   : parm 0: byte[int:>=0]:exact *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B23 B20 B21 B22 B18 )  Freq: 1

000     B1: #	out( B23 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    R10, [RSI + #12 (8-bit)]	# range
010     NullCheck RSI

010     B2: #	out( B19 B3 ) <- in( B1 )  Freq: 0.999999
010     testl   R10, R10	# unsigned
013     jbe,u   B19  P=0.040448 C=6700.000000

019     B3: #	out( B20 B4 ) <- in( B2 )  Freq: 0.959551
019     movl    R9, R10	# spill
01c     decl    R9	# int
        nop 	# 1 bytes pad for loops and calls
020     cmpl    R9, R10	# unsigned
023     jnb,u   B20  P=0.000001 C=-1.000000

029     B4: #	out( B16 B5 ) <- in( B3 )  Freq: 0.95955
029     movzbl  R11, [RSI + #16 (8-bit)]	# ubyte
02e     movl    RBP, R10	# spill
031     addl    RBP, #-7	# int
034     movl    RCX, #-2147483648	# int
039     cmpl    R9, RBP
03c     cmovll RBP, RCX	# signed, int
03f     movl    RDI, #1	# int
044     cmpl    RBP, #1
047     jle     B16  P=0.000001 C=-1.000000

04d     B5: #	out( B21 B6 ) <- in( B4 )  Freq: 0.959549
04d     cmpl    R10, #1	# unsigned
051     jbe,u   B21  P=0.000001 C=-1.000000

057     B6: #	out( B22 B7 ) <- in( B5 )  Freq: 0.959548
057     cmpl    R10, #8	# unsigned
        nop 	# 5 bytes pad for loops and calls
060     jbe,u   B22  P=0.000001 C=-1.000000

066     B7: #	out( B12 ) <- in( B6 )  Freq: 0.959547
066     movl    RAX, R11	# spill
069     sall    RAX, #5
06c     subl    RAX, R11	# int
06f     # TLS is in R15
06f     xorl    R8, R8	# int
072     jmp,s   B12

074     B8: #	out( B9 ) <- in( B16 )  Freq: 0.479774
074     # castII of RDI

074     B9: #	out( B18 B10 ) <- in( B8 B10 ) Loop( B9-B10 inner post of N166) Freq: 0.959548
074     movzbl  R8, [RSI + #16 + RDI]	# ubyte
07a     movl    RAX, R11	# spill
07d     sall    RAX, #5
080     subl    RAX, R11	# int
083     addl    RAX, R8	# int
086     incl    RDI	# int
088     cmpl    RDI, R10
08b     jge     B18	# loop end  P=0.500000 C=6429.000000

091     B10: #	out( B9 ) <- in( B9 )  Freq: 0.479774
091     movl    R11, RAX	# spill
094     jmp,s   B9

096     B11: #	out( B12 ) <- in( B14 ) top-of-loop Freq: 22.7636
096     movdq   RSI, XMM0	# spill
09b     movdl   R10, XMM2	# spill
0a0     movdl   R8, XMM1	# spill

0a5     B12: #	out( B13 ) <- in( B7 B11 ) Loop( B12-B11 ) Freq: 23.7231
0a5     movl    R14, RBP	# spill
0a8     subl    R14, RDI	# int
0ab     cmpl    RBP, RDI
0ad     cmovll R14, R8	# signed, int
0b1     cmpl    R14, #8000	# unsigned
0b8     movl    R11, #8000	# int
0be     cmovlnbe R14, R11	# unsigned, int
0c2     addl    R14, RDI	# int
0c5     movdq   XMM0, RSI	# spill
0ca     movdl   XMM2, R10	# spill
0cf     movdl   XMM1, R8	# spill
        nop 	# 12 bytes pad for loops and calls

0e0     B13: #	out( B13 B14 ) <- in( B12 B13 ) Loop( B13-B13 inner main of N80 strip mined) Freq: 586.512
0e0     movslq  R10, RDI	# i2l
0e3     movdq   RCX, XMM0	# spill
0e8     movzbl  R11, [RCX + #16 + R10]	# ubyte
0ee     movzbl  R9, [RCX + #23 + R10]	# ubyte
0f4     movzbl  R8, [RCX + #17 + R10]	# ubyte
0fa     movzbl  RBX, [RCX + #22 + R10]	# ubyte
100     movzbl  RCX, [RCX + #21 + R10]	# ubyte
106     movdq   RDX, XMM0	# spill
10b     movzbl  RDX, [RDX + #20 + R10]	# ubyte
111     movdq   RSI, XMM0	# spill
116     movzbl  RSI, [RSI + #19 + R10]	# ubyte
11c     movdq   R13, XMM0	# spill
121     movzbl  R13, [R13 + #18 + R10]	# ubyte
127     addl    RAX, R11	# int
12a     movl    R10, RAX	# spill
12d     sall    R10, #5
131     subl    R10, RAX	# int
134     addl    R10, R8	# int
137     movl    R11, R10	# spill
13a     sall    R11, #5
13e     subl    R11, R10	# int
141     addl    R11, R13	# int
144     movl    R8, R11	# spill
147     sall    R8, #5
14b     subl    R8, R11	# int
14e     addl    R8, RSI	# int
151     movl    R11, R8	# spill
154     sall    R11, #5
158     subl    R11, R8	# int
15b     addl    R11, RDX	# int
15e     movl    R10, R11	# spill
161     sall    R10, #5
165     subl    R10, R11	# int
168     addl    R10, RCX	# int
16b     movl    R8, R10	# spill
16e     sall    R8, #5
172     subl    R8, R10	# int
175     addl    R8, RBX	# int
178     movl    R11, R8	# spill
17b     sall    R11, #5
17f     subl    R11, R8	# int
182     addl    R11, R9	# int
185     movl    RAX, R11	# spill
188     sall    RAX, #5
18b     subl    RAX, R11	# int
18e     addl    RDI, #8	# int
191     cmpl    RDI, R14
194     jl     B13	# loop end  P=0.959552 C=6429.000000

19a     B14: #	out( B11 B15 ) <- in( B13 )  Freq: 23.7231
19a     movq    R10, [R15 + #304 (32-bit)]	# ptr
1a1     testl   rax, [R10]	# Safepoint: poll for GC        # java.lang.StringLatin1::hashCode @ bci:37 (line 196) L[0]=_ L[1]=R11 L[2]=XMM0 L[3]=XMM2 L[4]=RDI L[5]=_
        # OopMap {xmm0=Oop off=417/0x1a1}
1a4     cmpl    RDI, RBP
1a6     jl     B11  P=0.959552 C=6429.000000

1ac     B15: #	out( B16 ) <- in( B14 )  Freq: 0.959547
1ac     movdq   RSI, XMM0	# spill
1b1     movdl   R10, XMM2	# spill

1b6     B16: #	out( B8 B17 ) <- in( B4 B15 )  Freq: 0.959548
1b6     cmpl    RDI, R10
1b9     jl     B8  P=0.500000 C=-1.000000

1bf     B17: #	out( B18 ) <- in( B16 )  Freq: 0.479774
1bf     movl    RAX, R11	# spill

1c2     B18: #	out( N1 ) <- in( B9 B17 B19 )  Freq: 0.999996
1c2     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

1d4     ret

1d5     B19: #	out( B18 ) <- in( B2 )  Freq: 0.0404477
1d5     xorl    RAX, RAX	# int
1d7     jmp,s   B18

1d9     B20: #	out( N1 ) <- in( B3 )  Freq: 9.72293e-07
1d9     movq    RBP, RSI	# spill
1dc     movl    [rsp + #4], R10	# spill
1e1     movl    RSI, #-138	# int
        nop 	# 1 bytes pad for loops and calls
1e7     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::hashCode @ bci:13 (line 196) L[0]=_ L[1]=#0 L[2]=RBP L[3]=rsp + #4 L[4]=#0 L[5]=_ STK[0]=#0 STK[1]=rsp + #4
        # OopMap {rbp=Oop off=492/0x1ec}
1ec     stop	# ShouldNotReachHere

200     B21: #	out( N1 ) <- in( B5 )  Freq: 9.59549e-07
200     stop	# ShouldNotReachHere

214     B22: #	out( N1 ) <- in( B6 )  Freq: 9.59548e-07
214     stop	# ShouldNotReachHere

228     B23: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
228     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
22f     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::hashCode @ bci:5 (line 196) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap {off=564/0x234}
234     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    487   72     n       java.lang.invoke.MethodHandle::linkToStatic(JLILL)J (native)   (static)
    488   73     n       java.lang.invoke.MethodHandle::invokeBasic(JLIL)J (native)   
    488   74     n       java.lang.invoke.MethodHandle::linkToSpecial(LJLILL)J (native)   (static)
    489   75     n       java.lang.invoke.MethodHandle::invokeBasic(JLI)J (native)   
    489   76     n       java.lang.invoke.MethodHandle::linkToSpecial(LJLIL)J (native)   (static)
    490   77    b        jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (144 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 77 ------------------------
{method}
 - this oop:          0x00000008001c9518
 - method holder:     'jdk/internal/org/objectweb/asm/ByteVector'
 - constants:         0x000000080081b298 constant pool [102] {0x000000080081b298} for 'jdk/internal/org/objectweb/asm/ByteVector' cache=0x000000080035d390
 - access:            0xc1000001  public 
 - name:              'putUTF8'
 - signature:         '(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/ByteVector;'
 - max stack:         5
 - max locals:        7
 - size of params:    2
 - method size:       13
 - vtable index:      10
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a30: 0xbb000000 i2c: 0x000000010f026d60 c2i: 0x000000010f026e22 c2iUV: 0x000000010f026de8 c2iNCI: 0x000000010f026e5f
 - compiled entry     0x00000008000002b0
 - code size:         144
 - code start:        0x000000080081b9e0
 - code end (excl):   0x000000080081ba70
 - method data:       0x000000011592e9a0
 - checked ex length: 0
 - linenumber start:  0x000000080081ba70
 - localvar length:   7
 - localvar start:    0x000000080081ba8a

------------------------ OptoAssembly for Compile_id = 77 -----------------------
#
#  jdk/internal/org/objectweb/asm/ByteVector * ( jdk/internal/org/objectweb/asm/ByteVector:NotNull *, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/internal/org/objectweb/asm/ByteVector:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N677: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B60 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (264 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movq    R10, RSI	# spill
02f     movl    R11, [RDX + #20 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
033     NullCheck RDX

033     B2: #	out( B61 B3 ) <- in( B1 )  Freq: 0.999999
033     movl    R11, [R12 + R11 << 3 + #12] (compressed oop addressing)	# range
038     NullCheck R11

038     B3: #	out( B55 B4 ) <- in( B2 )  Freq: 0.999998
038     movsbl  RCX, [RDX + #16 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
03c     sarl    R11, RCX
        nop 	# 1 bytes pad for loops and calls
040     cmpl    R11, #65535
047     jg     B55  P=0.000000 C=277.000000

04d     B4: #	out( B62 B5 ) <- in( B3 )  Freq: 0.999997
04d     movq    RAX, RSI	# spill
050     movl    RBX, [RSI + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
053     movl    RCX, [R12 + RBX << 3 + #12] (compressed oop addressing)	# range
058     NullCheck RBX

058     B5: #	out( B38 B6 ) <- in( B4 )  Freq: 0.999996
058     movl    R9, [RSI + #12 (8-bit)]	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
05c     movl    RSI, R11	# spill
05f     addl    RSI, R9	# int
062     movl    R8, R11	# spill
065     shrl    R8, #8
069     addl    RSI, #2	# int
06c     movsbl  R13, R8	# i2b
070     cmpl    RSI, RCX
072     jg     B38  P=0.129964 C=277.000000

078     B6: #	out( B47 B7 ) <- in( B40 B5 )  Freq: 0.999994
078     movl    RCX, [R12 + RBX << 3 + #12] (compressed oop addressing)	# range
07d     movl    R10, R9	# spill
080     incl    R10	# int
083     cmpl    R9, RCX	# unsigned
086     jnb,u   B47  P=0.000001 C=-1.000000

08c     B7: #	out( B48 B8 ) <- in( B6 )  Freq: 0.999993
08c     decode_heap_oop_not_null RDI,RBX
090     movb    [RDI + #16 + R9], R8	# byte
095     movl    R8, R9	# spill
098     addl    R8, #2	# int
09c     movl    [rsp + #4], R8	# spill
0a1     cmpl    R10, RCX	# unsigned
0a4     jnb,u   B48  P=0.000001 C=-1.000000

0aa     B8: #	out( B37 B9 ) <- in( B7 )  Freq: 0.999992
0aa     movslq  RBP, R9	# i2l
0ad     movb    [RDI + #17 + RBP], R11	# byte
0b2     testl   R11, R11
0b5     jle     B37  P=0.041493 C=6700.000000

0bb     B9: #	out( B49 B10 ) <- in( B8 )  Freq: 0.9585
        nop 	# 5 bytes pad for loops and calls
0c0     cmpb    [RDX + #16 (8-bit)], #0
0c4     jne     B49  P=0.000001 C=-1.000000

0ca     B10: #	out( B49 B11 ) <- in( B9 )  Freq: 0.958499
0ca     movl    R10, [RDX + #20 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
0ce     movl    R8, [R12 + R10 << 3 + #12] (compressed oop addressing)	# range
0d3     NullCheck R10

0d3     B11: #	out( B49 B12 ) <- in( B10 )  Freq: 0.958498
0d3     testl   R8, R8	# unsigned
0d6     jbe,u   B49  P=0.000001 C=-1.000000

0dc     B12: #	out( B49 B13 ) <- in( B11 )  Freq: 0.958497
0dc     movslq  RSI, R8	# i2l
0df     movslq  R13, R11	# i2l
0e2     movq    R14, R13	# spill
0e5     decq    R14	# long
0e8     cmpq    R14, RSI	# unsigned
0eb     jnb,u   B49  P=0.000001 C=-1.000000

0f1     B13: #	out( B49 B14 ) <- in( B12 )  Freq: 0.958496
0f1     movl    RSI, [rsp + #4]	# spill
0f5     cmpl    RSI, RCX	# unsigned
0f7     jnb,u   B49  P=0.000001 C=-1.000000

0fd     B14: #	out( B49 B15 ) <- in( B13 )  Freq: 0.958495
0fd     movslq  RCX, RCX	# i2l
100     movslq  RSI, RSI	# i2l
103     addq    R13, RSI	# long
106     decq    R13	# long
109     cmpq    R13, RCX	# unsigned
10c     jnb,u   B49  P=0.000001 C=-1.000000

112     B15: #	out( B56 B16 ) <- in( B14 )  Freq: 0.958494
112     movl    [rsp + #0], R9	# spill
116     movdl   XMM4, RBX	# spill
11a     movdl   XMM2, R11	# spill
11f     movdq   XMM1, RAX	# spill
124     movdq   XMM0, RDX	# spill
129     movsbl  RDX, [R12 + R10 << 3 + #16] (compressed oop addressing)	# byte
12f     movl    R9, RDX	# spill
132     movzbl  R9, R9	# int & 0xFF
136     movl    RBX, R9	# spill
139     decl    RBX	# int
13b     xorl    R14, R14	# int
        nop 	# 2 bytes pad for loops and calls
140     cmpl    RBX, #127	# unsigned
143     jnb,u   B56  P=0.000000 C=6422.000000

149     B16: #	out( B50 B17 ) <- in( B15 )  Freq: 0.958493
149     movb    [RDI + #18 + RBP], RDX	# byte
14d     movl    RDX, R11	# spill
150     addl    RDX, #-3	# int
153     decode_heap_oop_not_null RAX,R10
157     movl    R9, #-2147483648	# int
15d     movl    R10, R11	# spill
160     cmpl    R11, RDX
163     cmovll RDX, R9	# signed, int
167     movl    RBX, #1	# int
16c     cmpl    RDX, #1
16f     jle     B50  P=0.000001 C=-1.000000

175     B17: #	out( B51 B18 ) <- in( B16 )  Freq: 0.958492
175     movq    R11, RSI	# spill
178     addq    R11, #1	# long
        nop 	# 4 bytes pad for loops and calls
180     cmpq    R11, RCX	# unsigned
183     jnb,u   B51  P=0.000001 C=-1.000000

189     B18: #	out( B53 B19 ) <- in( B17 )  Freq: 0.958491
189     cmpl    R8, #1	# unsigned
18d     jbe,u   B53  P=0.000001 C=-1.000000

193     B19: #	out( B54 B20 ) <- in( B18 )  Freq: 0.95849
193     cmpl    R8, #4	# unsigned
197     jbe,u   B54  P=0.000001 C=-1.000000

19d     B20: #	out( B52 B21 ) <- in( B19 )  Freq: 0.958489
19d     addq    RSI, #4	# long
1a1     cmpq    RSI, RCX	# unsigned
1a4     jnb,u   B52  P=0.000001 C=-1.000000

1aa     B21: #	out( B23 ) <- in( B20 )  Freq: 0.958488
1aa     movl    R13, #4000	# int
1b0     # TLS is in R15
1b0     jmp,s   B23

1b2     B22: #	out( B23 ) <- in( B29 ) top-of-loop Freq: 22.1173
1b2     movdl   R10, XMM2	# spill

1b7     B23: #	out( B24 ) <- in( B21 B22 ) Loop( B23-B22 ) Freq: 23.0758
1b7     movl    R8, RDX	# spill
1ba     subl    R8, RBX	# int
1bd     cmpl    RDX, RBX
1bf     cmovll R8, R14	# signed, int
1c3     cmpl    R8, #4000	# unsigned
1ca     cmovlnbe R8, R13	# unsigned, int
1ce     addl    R8, RBX	# int
1d1     movdl   XMM2, R10	# spill
        nop 	# 10 bytes pad for loops and calls

1e0     B24: #	out( B41 B25 ) <- in( B23 B28 ) Loop( B24-B28 inner main of N251 strip mined) Freq: 556.118
1e0     movl    R11, RBX	# spill
1e3     addl    R11, [RSP + #0 (32-bit)]	# int
1e7     movl    RBP, R11	# spill
1ea     movslq  RCX, RBX	# i2l
1ed     movsbl  R10, [RAX + #16 + RCX]	# byte
1f3     movl    R9, R10	# spill
1f6     movzbl  R9, R9	# int & 0xFF
1fa     movl    R11, R9	# spill
1fd     decl    R11	# int
200     cmpl    R11, #127	# unsigned
204     jnb,u   B41  P=0.000000 C=6422.000000

20a     B25: #	out( B42 B26 ) <- in( B24 )  Freq: 556.118
20a     movslq  RSI, RBP	# i2l
20d     movb    [RDI + #18 + RSI], R10	# byte
212     movsbl  R10, [RAX + #17 + RCX]	# byte
218     movl    R9, R10	# spill
21b     movzbl  R9, R9	# int & 0xFF
21f     movl    R11, R9	# spill
222     decl    R11	# int
225     cmpl    R11, #127	# unsigned
229     jnb,u   B42  P=0.000000 C=6422.000000

22f     B26: #	out( B43 B27 ) <- in( B25 )  Freq: 556.118
22f     movb    [RDI + #19 + RSI], R10	# byte
234     movsbl  R10, [RAX + #18 + RCX]	# byte
23a     movl    R9, R10	# spill
23d     movzbl  R9, R9	# int & 0xFF
241     movl    R11, R9	# spill
244     decl    R11	# int
247     cmpl    R11, #127	# unsigned
24b     jnb,u   B43  P=0.000000 C=6422.000000

251     B27: #	out( B44 B28 ) <- in( B26 )  Freq: 556.117
251     movb    [RDI + #20 + RSI], R10	# byte
256     movsbl  R10, [RAX + #19 + RCX]	# byte
25c     movl    R9, R10	# spill
25f     movzbl  R9, R9	# int & 0xFF
263     movl    R11, R9	# spill
266     decl    R11	# int
269     cmpl    R11, #127	# unsigned
26d     jnb,u   B44  P=0.000000 C=6422.000000

273     B28: #	out( B24 B29 ) <- in( B27 )  Freq: 556.117
273     movb    [RDI + #21 + RSI], R10	# byte
278     addl    RBX, #4	# int
        nop 	# 5 bytes pad for loops and calls
280     cmpl    RBX, R8
283     jl     B24	# loop end  P=0.958507 C=6422.000000

289     B29: #	out( B22 B30 ) <- in( B28 )  Freq: 23.0747
289     movq    R11, [R15 + #304 (32-bit)]	# ptr
290     movl    R10, RBP	# spill
293     addl    R10, #6	# int
297     movl    [rsp + #4], R10	# spill
29c     testl   rax, [R11]	# Safepoint: poll for GC        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:134 (line 290) L[0]=XMM1 L[1]=XMM0 L[2]=XMM2 L[3]=R10 L[4]=RDI L[5]=RBX L[6]=_
        # OopMap {rdi=Oop rax=Oop xmm0=Oop xmm1=Oop xmm4=NarrowOop off=668/0x29c}
        nop 	# 1 bytes pad for loops and calls
2a0     cmpl    RBX, RDX
2a2     jl     B22  P=0.958507 C=6422.000000

2a8     B30: #	out( B31 ) <- in( B29 )  Freq: 0.957428
2a8     movdl   R10, XMM2	# spill

2ad     B31: #	out( B36 B32 ) <- in( B50 B30 )  Freq: 0.957429
2ad     cmpl    RBX, R10
2b0     jge,s   B36  P=0.500000 C=-1.000000

2b2     B32: #	out( B33 ) <- in( B31 )  Freq: 0.478714
2b2     # castII of RBX

2b2     B33: #	out( B57 B34 ) <- in( B32 B34 ) Loop( B33-B34 inner post of N538) Freq: 0.957428
2b2     movsbl  R8, [RAX + #16 + RBX]	# byte
2b8     movl    RCX, RBX	# spill
2ba     addl    RCX, [RSP + #0 (32-bit)]	# int
2bd     movl    R9, R8	# spill
2c0     movzbl  R9, R9	# int & 0xFF
2c4     movl    R11, R9	# spill
2c7     decl    R11	# int
2ca     cmpl    R11, #127	# unsigned
2ce     jnb,u   B57  P=0.000000 C=6422.000000

2d4     B34: #	out( B33 B35 ) <- in( B33 )  Freq: 0.957428
2d4     movslq  R11, RCX	# i2l
2d7     movb    [RDI + #18 + R11], R8	# byte
2dc     incl    RBX	# int
        nop 	# 2 bytes pad for loops and calls
2e0     cmpl    RBX, R10
2e3     jl,s   B33	# loop end  P=0.500000 C=6422.000000

2e5     B35: #	out( B36 ) <- in( B34 )  Freq: 0.478714
2e5     addl    RCX, #3	# int
2e8     movl    [rsp + #4], RCX	# spill

2ec     B36: #	out( B37 ) <- in( B35 B31 )  Freq: 0.957428
2ec     movdq   RAX, XMM1	# spill

2f1     B37: #	out( N677 ) <- in( B36 B8 )  Freq: 0.99892
2f1     movl    R11, [rsp + #4]	# spill
2f6     movl    [RAX + #12 (8-bit)], R11	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
2fa     addq    rsp, 64	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

30c     ret

30d     B38: #	out( B59 B39 ) <- in( B5 )  Freq: 0.129963
30d     movl    [rsp + #20], R13	# spill
312     movl    [rsp + #16], R8	# spill
317     movl    [rsp + #12], R9	# spill
31c     movq    [rsp + #0], RAX	# spill
320     movq    RBP, RDX	# spill
323     movl    RDX, R11	# spill
326     movl    [rsp + #8], R11	# spill
32b     addl    RDX, #2	# int
32e     movq    RSI, RAX	# spill
        nop 	# 2 bytes pad for loops and calls
333     call,static  jdk.internal.org.objectweb.asm.ByteVector::enlarge
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:43 (line 281) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=rsp + #12 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [0]=Oop off=824/0x338}

338     B39: #	out( B58 B40 ) <- in( B38 )  Freq: 0.129961
        # Block is sole successor of call
338     movq    RAX, [rsp + #0]	# spill
33c     movl    RBX, [RAX + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
        nop 	# 1 bytes pad for loops and calls
340     testl   RBX, RBX	# compressed ptr
342     je     B58  P=0.000001 C=-1.000000

348     B40: #	out( B6 ) <- in( B39 )  Freq: 0.129961
348     movq    RDX, RBP	# spill
34b     movl    R11, [rsp + #8]	# spill
350     movl    R9, [rsp + #12]	# spill
355     movl    R8, [rsp + #16]	# spill
35a     movl    R13, [rsp + #20]	# spill
        nop 	# 1 bytes pad for loops and calls
360     jmp     B6

365     B41: #	out( B45 ) <- in( B24 )  Freq: 0.000265178
365     movl    R10, RBP	# spill
368     addl    R10, #2	# int
36c     movl    [rsp + #4], R10	# spill
371     jmp,s   B45

373     B42: #	out( B45 ) <- in( B25 )  Freq: 0.000265178
373     incl    RBX	# int
375     movl    R11, RBP	# spill
378     addl    R11, #3	# int
37c     movl    [rsp + #4], R11	# spill
381     jmp,s   B45

383     B43: #	out( B45 ) <- in( B26 )  Freq: 0.000265178
383     addl    RBX, #2	# int
386     movl    R10, RBP	# spill
389     addl    R10, #4	# int
38d     movl    [rsp + #4], R10	# spill
392     jmp,s   B45

394     B44: #	out( B45 ) <- in( B27 )  Freq: 0.000265177
394     addl    RBX, #3	# int
397     movl    R11, RBP	# spill
39a     addl    R11, #5	# int
39e     movl    [rsp + #4], R11	# spill

3a3     B45: #	out( B46 ) <- in( B56 B41 B43 B42 B44 )  Freq: 0.00106117
3a3     movdl   R10, XMM2	# spill

3a8     B46: #	out( N677 ) <- in( B57 B45 )  Freq: 0.00106162
3a8     movl    RSI, #-195	# int
3ad     movl    RBP, [rsp + #4]	# spill
3b1     movl    [rsp + #0], RBX	# spill
3b4     movl    [rsp + #8], R9	# spill
3b9     movsd   [rsp + #16], XMM1	# spill
3bf     movsd   [rsp + #24], XMM0	# spill
3c5     movl    [rsp + #12], R10	# spill
3ca     movss   [rsp + #32], XMM4	# spill
        nop 	# 3 bytes pad for loops and calls
3d3     call,static  wrapper for: uncommon_trap(reason='unstable_fused_if' action='reinterpret' debug_id='0')
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:93 (line 292) L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #12 L[3]=RBP L[4]=rsp + #32 L[5]=rsp + #0 L[6]=rsp + #8 STK[0]=rsp + #8 STK[1]=#1
        # OopMap {[16]=Oop [24]=Oop [32]=NarrowOop off=984/0x3d8}
3d8     stop	# ShouldNotReachHere

3ec     B47: #	out( N677 ) <- in( B6 )  Freq: 1.01327e-06
3ec     movl    RSI, #-28	# int
3f1     movl    RBP, R9	# spill
3f4     movq    [rsp + #0], RAX	# spill
3f8     movq    [rsp + #8], RDX	# spill
3fd     movl    [rsp + #16], R11	# spill
402     movl    [rsp + #20], R10	# spill
407     movl    [rsp + #28], RBX	# spill
40b     movl    [rsp + #32], R13	# spill
        nop 	# 3 bytes pad for loops and calls
413     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:63 (line 288) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 L[4]=rsp + #28 L[5]=_ L[6]=_ STK[0]=rsp + #28 STK[1]=RBP STK[2]=rsp + #32
        # OopMap {[0]=Oop [8]=Oop [28]=NarrowOop off=1048/0x418}
418     stop	# ShouldNotReachHere

42c     B48: #	out( N677 ) <- in( B7 )  Freq: 1.01327e-06
42c     movsbl  RBP, R11	# i2b
430     movl    RSI, #-28	# int
435     movl    [rsp + #0], R8	# spill
439     movq    [rsp + #8], RAX	# spill
43e     movq    [rsp + #16], RDX	# spill
443     movl    [rsp + #4], R11	# spill
448     movl    [rsp + #28], RBX	# spill
44c     movl    [rsp + #32], R10	# spill
        nop 	# 2 bytes pad for loops and calls
453     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:72 (line 289) L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #4 L[3]=rsp + #0 L[4]=rsp + #28 L[5]=_ L[6]=_ STK[0]=rsp + #28 STK[1]=rsp + #32 STK[2]=RBP
        # OopMap {[8]=Oop [16]=Oop [28]=NarrowOop off=1112/0x458}
458     stop	# ShouldNotReachHere

46c     B49: #	out( N677 ) <- in( B14 B9 B10 B11 B12 B13 )  Freq: 5.80189e-06
46c     movl    RSI, #-138	# int
471     movl    RBP, [rsp + #4]	# spill
475     movq    [rsp + #0], RAX	# spill
479     movq    [rsp + #8], RDX	# spill
47e     movl    [rsp + #20], RBX	# spill
482     movl    [rsp + #24], R11	# spill
487     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:79 (line 290) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=RBP L[4]=rsp + #20 L[5]=#0 L[6]=_ STK[0]=#0 STK[1]=rsp + #24
        # OopMap {[0]=Oop [8]=Oop [20]=NarrowOop off=1164/0x48c}
48c     stop	# ShouldNotReachHere

4a0     B50: #	out( B31 ) <- in( B16 )  Freq: 9.71221e-07
4a0     movl    R11, [rsp + #0]	# spill
4a4     movl    R8, R11	# spill
4a7     addl    R8, #3	# int
4ab     movl    [rsp + #4], R8	# spill
4b0     jmp     B31

4b5     B51: #	out( N677 ) <- in( B17 )  Freq: 9.7122e-07
4b5     stop	# ShouldNotReachHere

4c9     B52: #	out( N677 ) <- in( B20 )  Freq: 9.71217e-07
4c9     stop	# ShouldNotReachHere

4dd     B53: #	out( N677 ) <- in( B18 )  Freq: 9.58491e-07
4dd     stop	# ShouldNotReachHere

4f1     B54: #	out( N677 ) <- in( B19 )  Freq: 9.5849e-07
4f1     stop	# ShouldNotReachHere

505     B55: #	out( N677 ) <- in( B3 )  Freq: 4.76836e-07
505     movl    RSI, #-187	# int
50a     movq    RBP, R10	# spill
50d     movq    [rsp + #0], RDX	# spill
511     movl    [rsp + #12], R11	# spill
        nop 	# 1 bytes pad for loops and calls
517     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:8 (line 276) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=#65535
        # OopMap {rbp=Oop [0]=Oop off=1308/0x51c}
51c     stop	# ShouldNotReachHere

530     B56: #	out( B45 ) <- in( B15 )  Freq: 4.57045e-07
530     xorl    RBX, RBX	# int
532     jmp     B45

537     B57: #	out( B46 ) <- in( B33 )  Freq: 4.56537e-07
537     movl    R11, RCX	# spill
53a     addl    R11, #2	# int
53e     movl    [rsp + #4], R11	# spill
543     jmp     B46

548     B58: #	out( N677 ) <- in( B39 )  Freq: 1.31687e-07
548     movl    RSI, #-10	# int
54d     movl    RBP, [rsp + #12]	# spill
        nop 	# 2 bytes pad for loops and calls
553     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:63 (line 288) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #20
        # OopMap {off=1368/0x558}
558     stop	# ShouldNotReachHere

56c     B59: #	out( N677 ) <- in( B38 )  Freq: 1.29963e-06
56c     # exception oop is in rax; no code emitted
56c     movq    RSI, RAX	# spill
56f     addq    rsp, 64	# Destroy frame
	popq    rbp

574     jmp     rethrow_stub

579     B60: #	out( N677 ) <- in( B1 )  Freq: 1.01328e-06
579     movl    RSI, #-10	# int
        nop 	# 1 bytes pad for loops and calls
57f     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1 (line 275) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap {off=1412/0x584}
584     stop	# ShouldNotReachHere

598     B61: #	out( N677 ) <- in( B2 )  Freq: 1.01328e-06
598     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
59f     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # java.lang.String::length @ bci:4 (line 1451) L[0]=_ STK[0]=#NULL
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1 (line 275) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {off=1444/0x5a4}
5a4     stop	# ShouldNotReachHere

5b8     B62: #	out( N677 ) <- in( B4 )  Freq: 1.01328e-06
5b8     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
5bf     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:35 (line 280) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=1476/0x5c4}
5c4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    513   78     n       java.lang.invoke.MethodHandle::linkToStatic(JL)L (native)   (static)
    514   79     n       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLLL)L (native)   (static)
    514   80     n       java.lang.invoke.MethodHandle::invokeBasic(J)L (native)   
    514   81     n       java.lang.invoke.MethodHandle::linkToSpecial(LJL)L (native)   (static)
    514   82     n       java.lang.invoke.MethodHandle::invokeBasic(LLLLLLL)L (native)   
    515   83     n       java.lang.invoke.MethodHandle::linkToStatic(JLL)J (native)   (static)
    515   84     n       java.lang.invoke.MethodHandle::invokeBasic(JL)J (native)   
    516   85     n       java.lang.invoke.MethodHandle::linkToSpecial(LJLL)J (native)   (static)
    516   86     n       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLLLL)L (native)   (static)
    516   87     n       java.lang.invoke.MethodHandle::invokeBasic(LLLLLLLL)L (native)   
    518   88     n       java.lang.invoke.MethodHandle::linkToStatic(JIL)J (native)   (static)
    518   89     n       java.lang.invoke.MethodHandle::invokeBasic(JI)J (native)   
    518   90     n       java.lang.invoke.MethodHandle::linkToSpecial(LJIL)J (native)   (static)
    518   91     n       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLLLLL)L (native)   (static)
    519   92     n       java.lang.invoke.MethodHandle::invokeBasic(LLLLLLLLL)L (native)   
    576   93     n       java.lang.invoke.MethodHandle::linkToStatic(LLLJL)L (native)   (static)
    576   94     n       java.lang.invoke.MethodHandle::invokeBasic(LLLJ)L (native)   
    577   95     n       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLLLLLL)L (native)   (static)
    578   96     n       java.lang.invoke.MethodHandle::invokeBasic(L)J (native)   
    578   97     n       java.lang.invoke.MethodHandle::linkToSpecial(LLL)J (native)   (static)
    578   98     n       java.lang.invoke.MethodHandle::invokeBasic(LLLLLLLLLL)L (native)   
    579   99     n       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLLLLLLL)L (native)   (static)
    581  100     n       java.lang.invoke.MethodHandle::invokeBasic(LLLLLLLLLLL)L (native)   
    582  101     n       java.lang.invoke.MethodHandle::invokeBasic(LIL)L (native)   
    582  102     n       java.lang.invoke.MethodHandle::linkToSpecial(LLILL)L (native)   (static)
    583  103    b        java.lang.StringLatin1::indexOfChar (33 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 103 ------------------------
{method}
 - this oop:          0x0000000800030fb0
 - method holder:     'java/lang/StringLatin1'
 - constants:         0x00000008006409a0 constant pool [380] {0x00000008006409a0} for 'java/lang/StringLatin1' cache=0x000000080002fc18
 - access:            0xc100000a  private static 
 - name:              'indexOfChar'
 - signature:         '([BIII)I'
 - max stack:         3
 - max locals:        6
 - size of params:    4
 - method size:       13
 - intrinsic id:      108 _indexOfL_char
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf0435c0: 0xbaaa0000 i2c: 0x000000010f0b2fe0 c2i: 0x000000010f0b30a8 c2iUV: 0x000000010f0b306e c2iNCI: 0x000000010f0b30e5
 - compiled entry     0x00000008000006b8
 - code size:         33
 - code start:        0x0000000800645fd0
 - code end (excl):   0x0000000800645ff1
 - method data:       0x000000011592ed68
 - checked ex length: 0
 - linenumber start:  0x0000000800645ff1
 - localvar length:   6
 - localvar start:    0x0000000800645ffe

------------------------ OptoAssembly for Compile_id = 103 -----------------------
#
#  int ( byte[int:>=0]:exact *, int, int, int )
#
#r018 rsi:rsi   : parm 0: byte[int:>=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B31 B34 B33 B30 B32 B35 )  Freq: 1

000     B1: #	out( B25 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (160 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c     movl    R11, R8	# spill
00f     cmpl    RCX, R8
012     jge     B25  P=0.006856 C=6709.000000

018     B2: #	out( B31 B3 ) <- in( B1 )  Freq: 0.993144
018     movsbl  R10, RDX	# i2b
        nop 	# 4 bytes pad for loops and calls
020     movl    RDI, [RSI + #12 (8-bit)]	# range
023     NullCheck RSI

023     B3: #	out( B31 B4 ) <- in( B2 )  Freq: 0.993143
023     cmpl    RCX, RDI	# unsigned
025     jnb,u   B31  P=0.000001 C=-1.000000

02b     B4: #	out( B31 B5 ) <- in( B3 )  Freq: 0.993142
02b     movslq  R8, RDI	# i2l
02e     movslq  R9, R11	# i2l
031     decq    R9	# long
034     cmpq    R9, R8	# unsigned
037     jnb,u   B31  P=0.000001 C=-1.000000

03d     B5: #	out( B6 ) <- in( B4 )  Freq: 0.993141
03d     movl    R9, RCX	# spill
040     incl    R9	# int

043     B6: #	out( B29 B7 ) <- in( B5 B7 ) Loop( B6-B7 inner pre of N161) Freq: 1.88904
043     movsbl  R8, [RSI + #16 + RCX]	# byte
049     cmpl    R8, R10
04c     je     B29  P=0.051478 C=6663.000000

052     B7: #	out( B6 B8 ) <- in( B6 )  Freq: 1.79179
052     incl    RCX	# int
054     cmpl    RCX, R9
057     jl,s   B6	# loop end  P=0.500000 C=6320.000000

059     B8: #	out( B21 B9 ) <- in( B7 )  Freq: 0.895896
059     movl    R8, R11	# spill
05c     addl    R8, #-3	# int
060     movl    RBX, #-2147483648	# int
065     movl    RAX, R11	# spill
068     cmpl    R11, R8
06b     cmovll R8, RBX	# signed, int
06f     cmpl    RCX, R8
072     jge     B21  P=0.000001 C=-1.000000

078     B9: #	out( B32 B10 ) <- in( B8 )  Freq: 0.895895
078     # castII of RCX
078     cmpl    RCX, RDI	# unsigned
        nop 	# 6 bytes pad for loops and calls
080     jnb,u   B32  P=0.000001 C=-1.000000

086     B10: #	out( B33 B11 ) <- in( B9 )  Freq: 0.895894
086     cmpl    RCX, RDI	# unsigned
088     jnb,u   B33  P=0.000001 C=-1.000000

08e     B11: #	out( B34 B12 ) <- in( B10 )  Freq: 0.895893
08e     cmpl    RCX, RDI	# unsigned
090     jnb,u   B34  P=0.000001 C=-1.000000

096     B12: #	out( B35 B13 ) <- in( B11 )  Freq: 0.895892
096     movl    R9, RCX	# spill
099     addl    R9, #3	# int
        nop 	# 3 bytes pad for loops and calls
0a0     cmpl    R9, RDI	# unsigned
0a3     jnb,u   B35  P=0.000001 C=-1.000000

0a9     B13: #	out( B14 ) <- in( B12 )  Freq: 0.895892
0a9     movl    RBX, #4000	# int
0ae     xorl    RDX, RDX	# int

0b0     B14: #	out( B15 ) <- in( B13 B20 ) Loop( B14-B20 ) Freq: 0.921801
0b0     movl    RDI, R8	# spill
0b3     subl    RDI, RCX	# int
0b5     cmpl    R8, RCX
0b8     cmovll RDI, RDX	# signed, int
0bb     cmpl    RDI, #4000	# unsigned
0c1     cmovlnbe RDI, RBX	# unsigned, int
0c4     addl    RDI, RCX	# int
        nop 	# 10 bytes pad for loops and calls

0d0     B15: #	out( B29 B16 ) <- in( B14 B19 ) Loop( B15-B19 inner main of N112 strip mined) Freq: 4.70062
0d0     movsbl  R9, [RSI + #16 + RCX]	# byte
0d6     cmpl    R9, R10
0d9     je     B29  P=0.051478 C=6663.000000

0df     B16: #	out( B26 B17 ) <- in( B15 )  Freq: 4.45864
0df     movslq  R11, RCX	# i2l
0e2     movsbl  RBP, [RSI + #17 + R11]	# byte
0e8     cmpl    RBP, R10
0eb     je     B26  P=0.051478 C=6663.000000

0f1     B17: #	out( B27 B18 ) <- in( B16 )  Freq: 4.22912
0f1     movsbl  RBP, [RSI + #18 + R11]	# byte
0f7     cmpl    RBP, R10
        nop 	# 6 bytes pad for loops and calls
100     je     B27  P=0.051478 C=6663.000000

106     B18: #	out( B28 B19 ) <- in( B17 )  Freq: 4.01141
106     movsbl  R9, [RSI + #19 + R11]	# byte
10c     cmpl    R9, R10
10f     je     B28  P=0.051478 C=6663.000000

115     B19: #	out( B15 B20 ) <- in( B18 )  Freq: 3.80491
115     addl    RCX, #4	# int
118     cmpl    RCX, RDI
        nop 	# 6 bytes pad for loops and calls
120     jl,s   B15	# loop end  P=0.993144 C=6320.000000

122     B20: #	out( B14 B21 ) <- in( B19 )  Freq: 0.0260882
122     # TLS is in R15
122     movq    R9, [R15 + #304 (32-bit)]	# ptr
129     testl   rax, [R9]	# Safepoint: poll for GC        # java.lang.StringLatin1::indexOfChar @ bci:28 (line 219) L[0]=RSI L[1]=_ L[2]=_ L[3]=RAX L[4]=R10 L[5]=RCX
        # OopMap {rsi=Oop off=297/0x129}
12c     cmpl    RCX, R8
12f     jl     B14  P=0.993144 C=6320.000000

135     B21: #	out( B25 B22 ) <- in( B8 B20 )  Freq: 0.00017978
135     movl    R8, RAX	# spill
138     cmpl    RCX, R8
13b     jge,s   B25  P=0.500000 C=-1.000000

13d     B22: #	out( B23 ) <- in( B21 )  Freq: 8.98899e-05
13d     # castII of RCX
        nop 	# 3 bytes pad for loops and calls

140     B23: #	out( B29 B24 ) <- in( B22 B24 ) Loop( B23-B24 inner post of N161) Freq: 0.000170978
140     movsbl  R8, [RSI + #16 + RCX]	# byte
146     cmpl    R8, R10
149     je,s   B29  P=0.051478 C=6663.000000

14b     B24: #	out( B23 B25 ) <- in( B23 )  Freq: 0.000162176
14b     incl    RCX	# int
14d     cmpl    RCX, RAX
14f     jl,s   B23	# loop end  P=0.500000 C=6320.000000

151     B25: #	out( B30 ) <- in( B21 B1 B24 )  Freq: 0.00702742
151     movl    RAX, #-1	# int
156     jmp,s   B30

158     B26: #	out( B29 ) <- in( B16 )  Freq: 0.229524
158     incl    RCX	# int
15a     jmp,s   B29

15c     B27: #	out( B29 ) <- in( B17 )  Freq: 0.217708
15c     addl    RCX, #2	# int
        nop 	# 1 bytes pad for loops and calls
160     jmp,s   B29

162     B28: #	out( B29 ) <- in( B18 )  Freq: 0.206501
162     addl    RCX, #3	# int

165     B29: #	out( B30 ) <- in( B23 B6 B15 B27 B26 B28 )  Freq: 0.992966
165     movl    RAX, RCX	# spill

167     B30: #	out( N1 ) <- in( B29 B25 )  Freq: 0.999993
167     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

179     ret

17a     B31: #	out( N1 ) <- in( B4 B2 B3 )  Freq: 3.01899e-06
17a     movq    RBP, RSI	# spill
17d     movl    [rsp + #0], R10	# spill
181     movl    [rsp + #8], RCX	# spill
185     movl    [rsp + #16], R11	# spill
18a     movl    RSI, #-138	# int
18f     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # java.lang.StringLatin1::indexOfChar @ bci:10 (line 219) L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #16 L[4]=rsp + #0 L[5]=rsp + #8 STK[0]=rsp + #8 STK[1]=rsp + #16
        # OopMap {rbp=Oop off=404/0x194}
194     stop	# ShouldNotReachHere

1a8     B32: #	out( N1 ) <- in( B9 )  Freq: 9.07792e-07
1a8     stop	# ShouldNotReachHere

1bc     B33: #	out( N1 ) <- in( B10 )  Freq: 9.07791e-07
1bc     stop	# ShouldNotReachHere

1d0     B34: #	out( N1 ) <- in( B11 )  Freq: 9.0779e-07
1d0     stop	# ShouldNotReachHere

1e4     B35: #	out( N1 ) <- in( B12 )  Freq: 9.07789e-07
1e4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    595  104     n       java.lang.invoke.MethodHandle::linkToStatic(IL)L (native)   (static)
    595  105    b        java.lang.String::coder (15 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 105 ------------------------
{method}
 - this oop:          0x0000000800469ae8
 - method holder:     'java/lang/String'
 - constants:         0x0000000800ba9068 constant pool [1379]/operands[28] {0x0000000800ba9068} for 'java/lang/String' cache=0x0000000800465df8
 - access:            0x81000000  
 - name:              'coder'
 - signature:         '()B'
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf034a80: 0xb0000000 i2c: 0x000000010f027060 c2i: 0x000000010f02711e c2iUV: 0x000000010f0270e4 c2iNCI: 0x000000010f02715b
 - compiled entry     0x0000000800000280
 - code size:         15
 - code start:        0x0000000800bae560
 - code end (excl):   0x0000000800bae56f
 - method data:       0x000000011583b4b8
 - checked ex length: 0
 - linenumber start:  0x0000000800bae56f
 - localvar length:   1
 - localvar start:    0x0000000800bae57a

------------------------ OptoAssembly for Compile_id = 105 -----------------------
#
#  byte ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N16: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N16 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movsbl  RAX, [RSI + #16 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
030     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

042     ret

--------------------------------------------------------------------------------
    597  106     n       java.lang.invoke.MethodHandle::linkToStatic(IIIL)I (native)   (static)
    602  107    b        jdk.incubator.vector.IntVector::bOpTemplate (66 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 107 ------------------------
{method}
 - this oop:          0x0000000115848410
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0xc1000010  final 
 - name:              'bOpTemplate'
 - signature:         '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/IntVector$FBinOp;)Ljdk/incubator/vector/IntVector;'
 - max stack:         8
 - max locals:        7
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044c80: 0xbbb00000 i2c: 0x000000010effa760 c2i: 0x000000010effa84c c2iUV: 0x000000010effa812 c2iNCI: 0x000000010effa889
 - compiled entry     0x000000010effa84c
 - code size:         66
 - code start:        0x0000000115848360
 - code end (excl):   0x00000001158483a2
 - method data:       0x000000011594b2b0
 - checked ex length: 0
 - linenumber start:  0x00000001158483a2
 - localvar length:   7
 - localvar start:    0x00000001158483b0

------------------------ OptoAssembly for Compile_id = 107 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/IntVector:NotNull *, jdk/incubator/vector/Vector *, jdk/incubator/vector/IntVector$FBinOp * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector:NotNull *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/Vector *
#r010 rcx:rcx   : parm 2: jdk/incubator/vector/IntVector$FBinOp *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N414: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B23 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (384 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    [rsp + #8], RCX	# spill
031     movq    [rsp + #0], RDX	# spill
035     movq    R10, RSI	# spill
038     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
        nop 	# 4 bytes pad for loops and calls
040     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23f5990:Constant:exact *	# compressed klass ptr
047     jne,u   B23  P=0.000001 C=-1.000000

04d     B2: #	out( B19 B3 ) <- in( B1 )  Freq: 0.999999
04d     # checkcastPP of R10
04d     movq    [rsp + #16], R10	# spill
052     # TLS is in R15
052     movq    R11, [R15 + #328 (32-bit)]	# ptr
059     movq    R10, R11	# spill
05c     addq    R10, #48	# ptr
060     # TLS is in R15
060     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
067     jnb,u   B19  P=0.000100 C=-1.000000

06d     B3: #	out( B4 ) <- in( B2 )  Freq: 0.999899
06d     # TLS is in R15
06d     movq    [R15 + #328 (32-bit)], R10	# ptr
074     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
07c     movq    [R11], #1	# long
083     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
08b     movl    [R11 + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
093     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09b     movl    [R11 + #12 (8-bit)], #8	# int
0a3     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ab     movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
0af     movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b3     movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
0b7     movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)

0bb     B4: #	out( B32 B5 ) <- in( B20 B3 )  Freq: 0.999999
0bb     
0bb     MEMBAR-storestore (empty encoding)
0bb     # checkcastPP of R11
0bb     movq    [rsp + #24], R11	# spill
0c0     
0c0     MEMBAR-acquire ! (empty encoding)
0c0     movq    R10, [rsp + #16]	# spill
0c5     # checkcastPP of R10
0c5     movl    RBP, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0c9     movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0ce     NullCheck RBP

0ce     B5: #	out( B24 B6 ) <- in( B4 )  Freq: 0.999998
0ce     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0d5     jne,u   B24  P=0.000001 C=-1.000000

0db     B6: #	out( B33 B7 ) <- in( B5 )  Freq: 0.999997
0db     decode_heap_oop_not_null R8,RBP
0df     # checkcastPP of R8
0df     movq    R11, [rsp + #0]	# spill
0e3     movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
0e7     NullCheck R11

0e7     B7: #	out( B31 B8 ) <- in( B6 )  Freq: 0.999996
0e7     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23f5990:Constant:exact *	# compressed klass ptr
0ee     jne,u   B31  P=0.000000 C=-1.000000

0f4     B8: #	out( B34 B9 ) <- in( B7 )  Freq: 0.999996
0f4     # checkcastPP of R11
0f4     
0f4     MEMBAR-acquire ! (empty encoding)
0f4     # checkcastPP of R11
0f4     movl    RBP, [R11 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
        nop 	# 8 bytes pad for loops and calls
100     movl    R11, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
105     NullCheck RBP

105     B9: #	out( B25 B10 ) <- in( B8 )  Freq: 0.999995
105     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
10c     jne,u   B25  P=0.000001 C=-1.000000

112     B10: #	out( B26 B11 ) <- in( B9 )  Freq: 0.999994
112     movl    R11, [R8 + #12 (8-bit)]	# range
116     decode_heap_oop_not_null RBP,RBP
11a     # checkcastPP of RBP
        nop 	# 6 bytes pad for loops and calls
120     testl   R11, R11	# unsigned
123     jbe,u   B26  P=0.000001 C=-1.000000

129     B11: #	out( B28 B12 ) <- in( B10 )  Freq: 0.999993
129     cmpl    R11, #7	# unsigned
12d     jbe,u   B28  P=0.000001 C=-1.000000

133     B12: #	out( B29 B13 ) <- in( B11 )  Freq: 0.999992
133     movl    R11, [RBP + #12 (8-bit)]	# range
137     testl   R11, R11	# unsigned
        nop 	# 6 bytes pad for loops and calls
140     jbe,u   B29  P=0.000001 C=-1.000000

146     B13: #	out( B30 B14 ) <- in( B12 )  Freq: 0.999991
146     cmpl    R11, #7	# unsigned
14a     jbe,u   B30  P=0.000001 C=-1.000000

150     B14: #	out( B27 B15 ) <- in( B13 )  Freq: 0.99999
150     movq    R11, [rsp + #8]	# spill
155     movl    R10, [R11 + #8 (8-bit)]	# compressed klass ptr
159     NullCheck R11

159     B15: #	out( B27 B16 ) <- in( B14 )  Freq: 0.999989
        nop 	# 7 bytes pad for loops and calls
160     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$30+0x0000000801053ba8: 0x00007fafd23f5a60:Constant:exact *	# compressed klass ptr
167     jne,u   B27  P=0.000001 C=-1.000000

16d     B16: #	out( B21 B17 ) <- in( B15 )  Freq: 0.999988
16d     # TLS is in R15
16d     movq    RAX, [R15 + #328 (32-bit)]	# ptr
174     movl    R10, [R8 + #16 (8-bit)]	# int
178     addl    R10, [RBP + #16 (8-bit)]	# int
17c     movq    R11, [rsp + #24]	# spill
181     movl    [R11 + #16 (8-bit)], R10	# int
185     movq    R9, RAX	# spill
188     addq    R9, #16	# ptr
18c     movl    R11, [RBP + #20 (8-bit)]	# int
190     addl    R11, [R8 + #20 (8-bit)]	# int
194     movq    R10, [rsp + #24]	# spill
199     movl    [R10 + #20 (8-bit)], R11	# int
19d     movl    R11, [RBP + #24 (8-bit)]	# int
1a1     addl    R11, [R8 + #24 (8-bit)]	# int
1a5     movl    [R10 + #24 (8-bit)], R11	# int
1a9     movl    R11, [RBP + #28 (8-bit)]	# int
1ad     addl    R11, [R8 + #28 (8-bit)]	# int
1b1     movl    [R10 + #28 (8-bit)], R11	# int
1b5     movl    R11, [RBP + #32 (8-bit)]	# int
1b9     addl    R11, [R8 + #32 (8-bit)]	# int
1bd     movl    [R10 + #32 (8-bit)], R11	# int
1c1     movl    R11, [RBP + #36 (8-bit)]	# int
1c5     addl    R11, [R8 + #36 (8-bit)]	# int
1c9     movl    [R10 + #36 (8-bit)], R11	# int
1cd     movl    R11, [RBP + #40 (8-bit)]	# int
1d1     addl    R11, [R8 + #40 (8-bit)]	# int
1d5     movl    [R10 + #40 (8-bit)], R11	# int
1d9     movl    R11, [RBP + #44 (8-bit)]	# int
1dd     addl    R11, [R8 + #44 (8-bit)]	# int
1e1     movl    [R10 + #44 (8-bit)], R11	# int
1e5     # TLS is in R15
1e5     cmpq    R9, [R15 + #344 (32-bit)]	# raw ptr
1ec     jnb,u   B21  P=0.000100 C=-1.000000

1f2     B17: #	out( B18 ) <- in( B16 )  Freq: 0.999888
1f2     # TLS is in R15
1f2     movq    [R15 + #328 (32-bit)], R9	# ptr
1f9     PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
201     movq    [RAX], #1	# long
208     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23f5990:Constant:exact *	# compressed klass ptr

20f     B18: #	out( N414 ) <- in( B22 B17 )  Freq: 0.999988
20f     movq    R10, [rsp + #24]	# spill
214     encode_heap_oop_not_null R10,R10
25a     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
25e     
25e     # checkcastPP of RAX
25e     MEMBAR-release ! (empty encoding)
25e     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

270     ret

271     B19: #	out( B35 B20 ) <- in( B2 )  Freq: 0.000100016
271     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
27b     movl    RDX, #8	# int
280     movq    RBP, [rsp + #16]	# spill
        nop 	# 2 bytes pad for loops and calls
287     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:4 (line 199) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop off=652/0x28c}

28c     B20: #	out( B4 ) <- in( B19 )  Freq: 0.000100014
        # Block is sole successor of call
28c     movq    R11, RAX	# spill
28f     jmp     B4

294     B21: #	out( B36 B22 ) <- in( B16 )  Freq: 0.000100015
294     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23f5990:Constant:exact *	# ptr
29e     movq    RBP, R10	# spill
        nop 	# 2 bytes pad for loops and calls
2a3     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:62 (line 205) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [24]=Oop off=680/0x2a8}

2a8     B22: #	out( B18 ) <- in( B21 )  Freq: 0.000100013
        # Block is sole successor of call
2a8     jmp     B18

2ad     B23: #	out( N414 ) <- in( B1 )  Freq: 1e-06
2ad     movl    RSI, #-34	# int
2b2     movq    [rsp + #16], R10	# spill
2b7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:1 (line 199) L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #16
        # OopMap {[0]=Oop [8]=Oop [16]=Oop off=700/0x2bc}
2bc     stop	# ShouldNotReachHere

2d0     B24: #	out( N414 ) <- in( B5 )  Freq: 9.99998e-07
2d0     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
2d7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=NarrowOop off=732/0x2dc}
2dc     stop	# ShouldNotReachHere

2f0     B25: #	out( N414 ) <- in( B9 )  Freq: 9.99995e-07
2f0     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
2f7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=NarrowOop off=764/0x2fc}
2fc     stop	# ShouldNotReachHere

310     B26: #	out( B27 ) <- in( B10 )  Freq: 9.99994e-07
310     movq    R11, [rsp + #8]	# spill

315     B27: #	out( N414 ) <- in( B30 B26 B28 B15 B14 B29 )  Freq: 6.01323e-06
315     movl    RSI, #-138	# int
31a     movq    R10, [rsp + #16]	# spill
31f     movq    [rsp + #0], R10	# spill
323     movq    [rsp + #8], R11	# spill
328     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
332     movq    [rsp + #24], R8	# spill
337     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:29 (line 202) L[0]=rsp + #0 L[1]=_ L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=RBP L[6]=#0 STK[0]=#0 STK[1]=#8
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop [24]=Oop off=828/0x33c}
33c     stop	# ShouldNotReachHere

350     B28: #	out( B27 ) <- in( B11 )  Freq: 9.99993e-07
350     movq    R11, [rsp + #8]	# spill
355     jmp,s   B27

357     B29: #	out( B27 ) <- in( B12 )  Freq: 9.99992e-07
357     movq    R11, [rsp + #8]	# spill
35c     jmp,s   B27

35e     B30: #	out( B27 ) <- in( B13 )  Freq: 9.99991e-07
35e     movq    R11, [rsp + #8]	# spill
363     jmp,s   B27

365     B31: #	out( N414 ) <- in( B7 )  Freq: 1e-35
365     movl    RSI, #-34	# int
36a     movq    RBP, [rsp + #16]	# spill
36f     movq    R10, [rsp + #8]	# spill
374     movq    [rsp + #0], R10	# spill
378     movq    [rsp + #8], R11	# spill
37d     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
387     movq    [rsp + #24], R8	# spill
        nop 	# 3 bytes pad for loops and calls
38f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:14 (line 201) L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=_ L[6]=_ STK[0]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop [24]=Oop off=916/0x394}
394     stop	# ShouldNotReachHere

3a8     B32: #	out( N414 ) <- in( B4 )  Freq: 1.01328e-06
3a8     movl    RSI, #-12	# int
3ad     movq    RBP, [rsp + #16]	# spill
        nop 	# 1 bytes pad for loops and calls
3b3     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [24]=Oop off=952/0x3b8}
3b8     stop	# ShouldNotReachHere

3cc     B33: #	out( N414 ) <- in( B6 )  Freq: 1.01328e-06
3cc     movl    RSI, #-12	# int
3d1     movq    RBP, [rsp + #16]	# spill
3d6     movq    R10, [rsp + #8]	# spill
3db     movq    [rsp + #0], R10	# spill
3df     movq    [rsp + #16], R8	# spill
        nop 	# 3 bytes pad for loops and calls
3e7     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:14 (line 201) L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #16 L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=1004/0x3ec}
3ec     stop	# ShouldNotReachHere

400     B34: #	out( N414 ) <- in( B8 )  Freq: 1.01327e-06
400     movl    RSI, #-12	# int
405     movq    RBP, [rsp + #16]	# spill
40a     movq    R10, [rsp + #8]	# spill
40f     movq    [rsp + #0], R10	# spill
413     movq    [rsp + #16], R8	# spill
        nop 	# 3 bytes pad for loops and calls
41b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #16 L[5]=_ L[6]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=1056/0x420}
420     stop	# ShouldNotReachHere

434     B35: #	out( B37 ) <- in( B19 )  Freq: 1.00016e-09
434     # exception oop is in rax; no code emitted
434     movq    RSI, RAX	# spill
437     jmp,s   B37

439     B36: #	out( B37 ) <- in( B21 )  Freq: 1.00015e-09
439     # exception oop is in rax; no code emitted
439     movq    RSI, RAX	# spill

43c     B37: #	out( N414 ) <- in( B35 B36 )  Freq: 2.00032e-09
43c     addq    rsp, 48	# Destroy frame
	popq    rbp

441     jmp     rethrow_stub

--------------------------------------------------------------------------------
    623  108     n       java.lang.Object::getClass (native)   
    636  109    b        jdk.incubator.vector.VectorOperators$OperatorImpl::opCodeRaw (8 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 109 ------------------------
{method}
 - this oop:          0x0000000115937340
 - method holder:     'jdk/incubator/vector/VectorOperators$OperatorImpl'
 - constants:         0x00000001159363d8 constant pool [147] {0x00000001159363d8} for 'jdk/incubator/vector/VectorOperators$OperatorImpl' cache=0x0000000115937978
 - access:            0x81000000  
 - name:              'opCodeRaw'
 - signature:         '()I'
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      11
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         8
 - code start:        0x0000000115937318
 - code end (excl):   0x0000000115937320
 - method data:       0x000000011594bf08
 - checked ex length: 0
 - linenumber start:  0x0000000115937320
 - localvar length:   1
 - localvar start:    0x000000011593732a

------------------------ OptoAssembly for Compile_id = 109 -----------------------
#
#  int ( jdk/incubator/vector/VectorOperators$OperatorImpl:NotNull * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorOperators$OperatorImpl:NotNull *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N18: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N18 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    RAX, [RSI + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/VectorOperators$OperatorImpl.opInfo (constant)
02f     sarl    RAX, #12
032     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

044     ret

--------------------------------------------------------------------------------
    657  110    b        jdk.incubator.vector.IntVector::add (9 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 110 ------------------------
{method}
 - this oop:          0x000000011584b560
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x81000011  public final 
 - name:              'add'
 - signature:         '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;'
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044cd0: 0xbb000000 i2c: 0x000000010effa3e0 c2i: 0x000000010effa4c8 c2iUV: 0x000000010effa48e c2iNCI: 0x000000010effa505
 - compiled entry     0x000000010effa4c8
 - code size:         9
 - code start:        0x000000011584b528
 - code end (excl):   0x000000011584b531
 - method data:       0x000000011594c090
 - checked ex length: 0
 - linenumber start:  0x000000011584b531
 - localvar length:   2
 - localvar start:    0x000000011584b53c

------------------------ OptoAssembly for Compile_id = 110 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/IntVector:NotNull *, jdk/incubator/vector/Vector * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector:NotNull *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/Vector *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N220: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B13 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (560 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    R10, RSI	# spill
02f     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
        nop 	# 13 bytes pad for loops and calls
040     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23bf710:Constant:exact *	# compressed klass ptr
047     jne,u   B13  P=0.000001 C=-1.000000

04d     B2: #	out( B15 B3 ) <- in( B1 )  Freq: 0.999999
04d     # checkcastPP of R10
04d     movq    [rsp + #8], R10	# spill
052     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
056     NullCheck RDX

056     B3: #	out( B14 B4 ) <- in( B2 )  Freq: 0.999998
        nop 	# 10 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23bf710:Constant:exact *	# compressed klass ptr
067     jne,u   B14  P=0.000000 C=-1.000000

06d     B4: #	out( B9 B5 ) <- in( B3 )  Freq: 0.999998
06d     # checkcastPP of RDX
06d     movq    [rsp + #16], RDX	# spill
072     # TLS is in R15
072     movq    RBP, [R15 + #328 (32-bit)]	# ptr
079     movq    R10, RBP	# spill
07c     addq    R10, #48	# ptr
080     # TLS is in R15
080     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
087     jnb,u   B9  P=0.000100 C=-1.000000

08d     B5: #	out( B6 ) <- in( B4 )  Freq: 0.999898
08d     # TLS is in R15
08d     movq    [R15 + #328 (32-bit)], R10	# ptr
094     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09c     movq    [RBP], #1	# long
0a4     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ac     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0b3     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0bb     movl    [RBP + #12 (8-bit)], #8	# int
0c2     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ca     movq    [RBP + #16 (8-bit)], R12	# long (R12_heapbase==0)
0ce     movq    [RBP + #24 (8-bit)], R12	# long (R12_heapbase==0)
0d2     movq    [RBP + #32 (8-bit)], R12	# long (R12_heapbase==0)
0d6     movq    [RBP + #40 (8-bit)], R12	# long (R12_heapbase==0)

0da     B6: #	out( B11 B7 ) <- in( B10 B5 )  Freq: 0.999998
0da     
0da     MEMBAR-storestore (empty encoding)
0da     # checkcastPP of RBP
0da     movq    R10, [rsp + #8]	# spill
0df     movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0e3     # TLS is in R15
0e3     movq    RAX, [R15 + #328 (32-bit)]	# ptr
0ea     load_vector XMM0,[R12 + R10 << 3 + #16] (compressed oop addressing)
0f1     movq    R10, RAX	# spill
0f4     addq    R10, #16	# ptr
0f8     movq    R11, [rsp + #16]	# spill
0fd     movl    R11, [R11 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
101     load_vector XMM1,[R12 + R11 << 3 + #16] (compressed oop addressing)
108     vpaddd  XMM0,XMM0,XMM1	! add packedI
10c     store_vector [RBP + #16 (8-bit)],XMM0
	
111     # TLS is in R15
111     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
118     jnb,u   B11  P=0.000100 C=-1.000000

11e     B7: #	out( B8 ) <- in( B6 )  Freq: 0.999898
11e     # TLS is in R15
11e     movq    [R15 + #328 (32-bit)], R10	# ptr
125     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
12d     movq    [RAX], #1	# long
134     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23bf710:Constant:exact *	# compressed klass ptr

13b     B8: #	out( N220 ) <- in( B12 B7 )  Freq: 0.999998
13b     encode_heap_oop_not_null R10,RBP
184     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
188     
188     MEMBAR-storestore (empty encoding)
188     # checkcastPP of RAX
188     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

19d     ret

19e     B9: #	out( B17 B10 ) <- in( B4 )  Freq: 0.000100016
19e     movl    RDX, #8	# int
1a3     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
1ad     movq    RBP, [rsp + #8]	# spill
        nop 	# 2 bytes pad for loops and calls
1b4     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:244 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#4 STK[1]=#Ptr0x00007fafd210b3c0 STK[2]=#Ptr0x00007fafd2222200 STK[3]=#8 STK[4]=RBP STK[5]=rsp + #16 STK[6]=#Ptr0x00007fafd23a7730
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::add @ bci:5 (line 1096) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=444/0x1bc}

1bc     B10: #	out( B6 ) <- in( B9 )  Freq: 0.000100014
        # Block is sole successor of call
1bc     movq    RBP, RAX	# spill
        nop 	# 1 bytes pad for loops and calls
1c0     jmp     B6

1c5     B11: #	out( B16 B12 ) <- in( B6 )  Freq: 0.000100016
1c5     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23bf710:Constant:exact *	# ptr
1cf     pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #0]
1d8     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:244 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#4 STK[1]=#Ptr0x00007fafd210b3c0 STK[2]=#Ptr0x00007fafd2222200 STK[3]=#8 STK[4]=rsp + #0 STK[5]=rsp + #16 STK[6]=#Ptr0x00007fafd23a7730
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::add @ bci:5 (line 1096) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=480/0x1e0}

1e0     B12: #	out( B8 ) <- in( B11 )  Freq: 0.000100014
        # Block is sole successor of call
1e0     jmp     B8

1e5     B13: #	out( N220 ) <- in( B1 )  Freq: 1e-06
1e5     movl    RSI, #-34	# int
1ea     movq    RBP, R10	# spill
1ed     movq    [rsp + #0], RDX	# spill
        nop 	# 3 bytes pad for loops and calls
1f4     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::add @ bci:5 (line 1096) L[0]=_ L[1]=_ STK[0]=RBP STK[1]=#Ptr0x00007fafd23c1730 STK[2]=rsp + #0
        # OopMap {rbp=Oop [0]=Oop off=508/0x1fc}
1fc     stop	# ShouldNotReachHere

210     B14: #	out( N220 ) <- in( B3 )  Freq: 1e-35
210     movl    RSI, #-34	# int
215     movq    RBP, R10	# spill
218     movq    [rsp + #0], RDX	# spill
21c     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:1 (line 601) L[0]=RBP L[1]=#Ptr0x00007fafd23c1730 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #0
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::add @ bci:5 (line 1096) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop off=548/0x224}
224     stop	# ShouldNotReachHere

238     B15: #	out( N220 ) <- in( B2 )  Freq: 1.01328e-06
238     movl    RSI, #-12	# int
23d     movq    RBP, R10	# spill
240     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:1 (line 601) L[0]=RBP L[1]=#Ptr0x00007fafd23c1730 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::add @ bci:5 (line 1096) L[0]=_ L[1]=_
        # OopMap {rbp=Oop off=584/0x248}
248     stop	# ShouldNotReachHere

25c     B16: #	out( B18 ) <- in( B11 )  Freq: 1.00016e-09
25c     # exception oop is in rax; no code emitted
25c     movq    RSI, RAX	# spill
        nop 	# 1 bytes pad for loops and calls
260     jmp,s   B18

262     B17: #	out( B18 ) <- in( B9 )  Freq: 1.00016e-09
262     # exception oop is in rax; no code emitted
262     movq    RSI, RAX	# spill

265     B18: #	out( N220 ) <- in( B17 B16 )  Freq: 2.00033e-09
265     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp

26d     jmp     rethrow_stub

--------------------------------------------------------------------------------
    667  111    b        jdk.incubator.vector.Int256Vector::lanewise (7 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 111 ------------------------
{method}
 - this oop:          0x00000001158a3a70
 - method holder:     'jdk/incubator/vector/Int256Vector'
 - constants:         0x000000011589d058 constant pool [746]/operands[52] {0x000000011589d058} for 'jdk/incubator/vector/Int256Vector' cache=0x00000001158a91c8
 - access:            0x81001041  public volatile synthetic 
 - name:              'lanewise'
 - signature:         '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;'
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      105
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044c80: 0xbbb00000 i2c: 0x000000010effa760 c2i: 0x000000010effa84c c2iUV: 0x000000010effa812 c2iNCI: 0x000000010effa889
 - compiled entry     0x000000010effa84c
 - code size:         7
 - code start:        0x00000001158a3a48
 - code end (excl):   0x00000001158a3a4f
 - method data:       0x000000011594c270
 - checked ex length: 0
 - linenumber start:  0x00000001158a3a4f
 - localvar length:   1
 - localvar start:    0x00000001158a3a5a

------------------------ OptoAssembly for Compile_id = 111 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/Int256Vector:NotNull:exact *, jdk/incubator/vector/VectorOperators$Binary *, jdk/incubator/vector/Vector * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/Int256Vector:NotNull:exact *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/VectorOperators$Binary *
#r010 rcx:rcx   : parm 2: jdk/incubator/vector/Vector *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: outgoing argument
#r584 rsp+ 0: outgoing argument
#
000     N289: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B24 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (728 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movq    R9, RSI	# spill
02f     movl    R10, [RCX + #8 (8-bit)]	# compressed klass ptr
033     NullCheck RCX

033     B2: #	out( B19 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 13 bytes pad for loops and calls
040     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2276a20:Constant:exact *	# compressed klass ptr
047     jne,u   B19  P=0.000000 C=-1.000000

04d     B3: #	out( B25 B4 ) <- in( B2 )  Freq: 0.999999
04d     movq    RBX, RCX	# spill
050     # checkcastPP of RBX
050     movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
054     NullCheck RDX

054     B4: #	out( B20 B5 ) <- in( B3 )  Freq: 0.999998
        nop 	# 12 bytes pad for loops and calls
060     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/VectorOperators$AssociativeImpl: 0x00007fafd210bf50:Constant:exact *	# compressed klass ptr
067     jne,u   B20  P=0.000000 C=-1.000000

06d     B5: #	out( B16 B6 ) <- in( B4 )  Freq: 0.999998
06d     movq    R8, RDX	# spill
070     # checkcastPP of R8
070     movl    RCX, [R8 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/VectorOperators$OperatorImpl.opInfo (constant)
074     movl    RBP, RCX	# spill
076     andl    RBP, #136	# int
        nop 	# 4 bytes pad for loops and calls
080     testl   RBP, RBP
082     jne     B16  P=0.000000 C=10000.000000

088     B6: #	out( B17 B7 ) <- in( B5 )  Freq: 0.999997
088     movl    R11, RCX	# spill
08b     sarl    R11, #12
08f     movl    RBP, RCX	# spill
091     andl    RBP, #2048	# int
097     testl   RBP, RBP
099     je     B17  P=0.000000 C=10000.000000

09f     B7: #	out( B18 B8 ) <- in( B6 )  Freq: 0.999997
09f     andl    RCX, #512	# int
0a5     testl   RCX, RCX
0a7     jne     B18  P=0.000000 C=10000.000000

0ad     B8: #	out( B15 B9 ) <- in( B7 )  Freq: 0.999997
0ad     cmpl    R11, #1024	# unsigned
0b4     jnb,u   B15  P=0.000001 C=-1.000000

0ba     B9: #	out( B27 B10 ) <- in( B8 )  Freq: 0.999996
0ba     movq    R10, stable:narrowoop: java/lang/Object *[int:1024]<ciObjArray length=1024 type=<ciObjArrayKlass name=[Ljava/lang/Object; ident=1324 address=0x00007fafd22661b0> ident=1329 address=0x00007fafd2268070> *	# ptr
0c4     movl    RBP, [R10 + #16 + R11 << #2]	# compressed ptr
0c9     movl    R10, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0ce     NullCheck RBP

0ce     B10: #	out( B21 B11 ) <- in( B9 )  Freq: 0.999995
0ce     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$29+0x0000000801053740: 0x00007fafd1f9dc90:Constant:exact *	# compressed klass ptr
0d5     jne,u   B21  P=0.000000 C=-1.000000

0db     B11: #	out( B23 B12 ) <- in( B10 )  Freq: 0.999995
0db     decode_heap_oop_not_null R10,RBP
0df     # checkcastPP of R10
0df     movq    RDX, java/lang/Class:exact *	# ptr
0e9     movq    RCX, java/lang/Class:exact *	# ptr
0f3     movl    R8, #8	# int
0f9     movl    RSI, R11	# spill
0fc     movq    RDI, RBX	# spill
0ff     movq    [rsp + #0], R10	# spill
103     call,static  jdk.internal.vm.vector.VectorSupport::binaryOp
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:244 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {off=264/0x108}

108     B12: #	out( B26 B13 ) <- in( B11 )  Freq: 0.999975
        # Block is sole successor of call
108     movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
10c     NullCheck RAX

10c     B13: #	out( B22 B14 ) <- in( B12 )  Freq: 0.999974
10c     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2276a20:Constant:exact *	# compressed klass ptr
113     jne,u   B22  P=0.000000 C=-1.000000

119     B14: #	out( N289 ) <- in( B13 )  Freq: 0.999974
119     # checkcastPP of RAX
119     addq    rsp, 64	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

12b     ret

12c     B15: #	out( N289 ) <- in( B8 )  Freq: 1.01328e-06
12c     movl    RSI, #-28	# int
131     movq    RBP, R9	# spill
134     movq    [rsp + #16], RBX	# spill
139     movq    [rsp + #24], R8	# spill
13e     movl    [rsp + #12], R11	# spill
143     movl    [rsp + #32], R11	# spill
        nop 	# 3 bytes pad for loops and calls
14b     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:5 (line 1264) L[0]=#Ptr0x00007fafd21469f0 L[1]=rsp + #24 L[2]=rsp + #32 L[3]=#Ptr0x00007fafd2265050 L[4]=_ STK[0]=#Ptr0x00007fafd2268070 STK[1]=rsp + #12
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:238 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=#Ptr0x00007fafd210a130 STK[2]=#Ptr0x00007fafd2145bd0 STK[3]=#8 STK[4]=RBP STK[5]=rsp + #16
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop off=336/0x150}
150     stop	# ShouldNotReachHere

164     B16: #	out( N289 ) <- in( B5 )  Freq: 4.76836e-07
164     movl    RSI, #-187	# int
169     movq    [rsp + #8], R9	# spill
16e     movq    [rsp + #16], RDX	# spill
173     movq    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
17b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opKind @ bci:6 (line 828) L[0]=_ L[1]=_ STK[0]=RBP
        # jdk.incubator.vector.VectorOperators::opKind @ bci:5 (line 409) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {[8]=Oop [16]=Oop [24]=Oop off=384/0x180}
180     stop	# ShouldNotReachHere

194     B17: #	out( N289 ) <- in( B6 )  Freq: 4.76836e-07
194     movl    RSI, #-187	# int
199     movq    [rsp + #8], R9	# spill
19e     movq    [rsp + #24], RBX	# spill
1a3     movq    [rsp + #32], R8	# spill
1a8     movl    [rsp + #40], R11	# spill
        nop 	# 2 bytes pad for loops and calls
1af     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:12 (line 775) L[0]=rsp + #32 L[1]=#2048 L[2]=#512 L[3]=rsp + #40 STK[0]=RBP STK[1]=#2048
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:207 (line 632) L[0]=rsp + #8 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {[8]=Oop [24]=Oop [32]=Oop off=436/0x1b4}
1b4     stop	# ShouldNotReachHere

1c8     B18: #	out( N289 ) <- in( B7 )  Freq: 4.76836e-07
1c8     movl    RSI, #-187	# int
1cd     movq    RBP, R9	# spill
1d0     movq    [rsp + #16], RBX	# spill
1d5     movq    [rsp + #24], R8	# spill
1da     movl    [rsp + #32], R11	# spill
1df     movl    [rsp + #36], RCX	# spill
1e3     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:26 (line 775) L[0]=rsp + #24 L[1]=#2048 L[2]=#512 L[3]=rsp + #32 STK[0]=rsp + #36 STK[1]=#512
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:207 (line 632) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop off=488/0x1e8}
1e8     stop	# ShouldNotReachHere

1fc     B19: #	out( N289 ) <- in( B2 )  Freq: 1e-35
1fc     movl    RSI, #-34	# int
201     movq    RBP, R9	# spill
204     movq    [rsp + #8], RDX	# spill
209     movq    [rsp + #16], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
20f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:1 (line 601) L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #16
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=532/0x214}
214     stop	# ShouldNotReachHere

228     B20: #	out( N289 ) <- in( B4 )  Freq: 1e-35
228     movl    RSI, #-34	# int
22d     movq    RBP, R9	# spill
230     movq    [rsp + #16], RDX	# spill
235     movq    [rsp + #24], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
23b     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=#136 STK[0]=rsp + #16
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=RBP L[1]=rsp + #16 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop off=576/0x240}
240     stop	# ShouldNotReachHere

254     B21: #	out( N289 ) <- in( B10 )  Freq: 1e-35
254     movl    RSI, #-34	# int
259     movq    [rsp + #8], R9	# spill
25e     movl    [rsp + #16], R11	# spill
263     movq    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
26b     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:241 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #16 STK[1]=#Ptr0x00007fafd210a130 STK[2]=#Ptr0x00007fafd2145bd0 STK[3]=#8 STK[4]=rsp + #8 STK[5]=rsp + #24 STK[6]=RBP
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop [8]=Oop [24]=Oop off=624/0x270}
270     stop	# ShouldNotReachHere

284     B22: #	out( N289 ) <- in( B13 )  Freq: 1e-35
284     movl    RSI, #-34	# int
289     movq    RBP, RAX	# spill
        nop 	# 3 bytes pad for loops and calls
28f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:247 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop off=660/0x294}
294     stop	# ShouldNotReachHere

2a8     B23: #	out( N289 ) <- in( B11 )  Freq: 9.99995e-06
2a8     # exception oop is in rax; no code emitted
2a8     movq    RSI, RAX	# spill
2ab     addq    rsp, 64	# Destroy frame
	popq    rbp

2b0     jmp     rethrow_stub

2b5     B24: #	out( N289 ) <- in( B1 )  Freq: 1.01328e-06
2b5     movl    RSI, #-12	# int
2ba     movq    RBP, R9	# spill
2bd     movq    [rsp + #8], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
2c3     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:1 (line 601) L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop off=712/0x2c8}
2c8     stop	# ShouldNotReachHere

2dc     B25: #	out( N289 ) <- in( B3 )  Freq: 1.01328e-06
2dc     movl    RSI, #-12	# int
2e1     movq    RBP, R9	# spill
2e4     movq    [rsp + #8], RDX	# spill
2e9     movq    [rsp + #16], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
2ef     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=#136 STK[0]=#NULL
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=756/0x2f4}
2f4     stop	# ShouldNotReachHere

308     B26: #	out( N289 ) <- in( B12 )  Freq: 1.01325e-06
308     movl    RSI, #-12	# int
        nop 	# 2 bytes pad for loops and calls
30f     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:247 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {off=788/0x314}
314     stop	# ShouldNotReachHere

328     B27: #	out( N289 ) <- in( B9 )  Freq: 4.76835e-07
328     movl    RSI, #-187	# int
32d     movq    [rsp + #8], R9	# spill
332     movq    [rsp + #24], RBX	# spill
337     movq    [rsp + #32], R8	# spill
33c     movl    [rsp + #20], R11	# spill
        nop 	# 2 bytes pad for loops and calls
343     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:10 (line 1265) L[0]=#Ptr0x00007fafd21469f0 L[1]=rsp + #32 L[2]=rsp + #20 L[3]=#Ptr0x00007fafd2265050 L[4]=RBP STK[0]=RBP
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:238 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #20 STK[1]=#Ptr0x00007fafd210a130 STK[2]=#Ptr0x00007fafd2145bd0 STK[3]=#8 STK[4]=rsp + #8 STK[5]=rsp + #24
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop [8]=Oop [24]=Oop [32]=Oop off=840/0x348}
348     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    678  112    b        jdk.incubator.vector.Int256Vector::lanewise (10 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 112 ------------------------
{method}
 - this oop:          0x00000001158a09d0
 - method holder:     'jdk/incubator/vector/Int256Vector'
 - constants:         0x000000011589d058 constant pool [746]/operands[52] {0x000000011589d058} for 'jdk/incubator/vector/Int256Vector' cache=0x00000001158a91c8
 - access:            0x81000001  public 
 - name:              'lanewise'
 - signature:         '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/Int256Vector;'
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044c80: 0xbbb00000 i2c: 0x000000010effa760 c2i: 0x000000010effa84c c2iUV: 0x000000010effa812 c2iNCI: 0x000000010effa889
 - compiled entry     0x000000010effa84c
 - code size:         10
 - code start:        0x00000001158a0990
 - code end (excl):   0x00000001158a099a
 - method data:       0x000000011594c458
 - checked ex length: 0
 - linenumber start:  0x00000001158a099a
 - localvar length:   3
 - localvar start:    0x00000001158a09a0

------------------------ OptoAssembly for Compile_id = 112 -----------------------
#
#  jdk/incubator/vector/Int256Vector:exact * ( jdk/incubator/vector/Int256Vector:NotNull:exact *, jdk/incubator/vector/VectorOperators$Binary *, jdk/incubator/vector/Vector * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/Int256Vector:NotNull:exact *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/VectorOperators$Binary *
#r010 rcx:rcx   : parm 2: jdk/incubator/vector/Vector *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: outgoing argument
#r584 rsp+ 0: outgoing argument
#
000     N289: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B24 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (616 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movq    R9, RSI	# spill
02f     movl    R10, [RCX + #8 (8-bit)]	# compressed klass ptr
033     NullCheck RCX

033     B2: #	out( B19 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 13 bytes pad for loops and calls
040     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1fa8a20:Constant:exact *	# compressed klass ptr
047     jne,u   B19  P=0.000000 C=-1.000000

04d     B3: #	out( B25 B4 ) <- in( B2 )  Freq: 0.999999
04d     movq    RBX, RCX	# spill
050     # checkcastPP of RBX
050     movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
054     NullCheck RDX

054     B4: #	out( B20 B5 ) <- in( B3 )  Freq: 0.999998
        nop 	# 12 bytes pad for loops and calls
060     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/VectorOperators$AssociativeImpl: 0x00007fafd21a8dd0:Constant:exact *	# compressed klass ptr
067     jne,u   B20  P=0.000000 C=-1.000000

06d     B5: #	out( B16 B6 ) <- in( B4 )  Freq: 0.999998
06d     movq    R8, RDX	# spill
070     # checkcastPP of R8
070     movl    RCX, [R8 + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/VectorOperators$OperatorImpl.opInfo (constant)
074     movl    RBP, RCX	# spill
076     andl    RBP, #136	# int
        nop 	# 4 bytes pad for loops and calls
080     testl   RBP, RBP
082     jne     B16  P=0.000000 C=10000.000000

088     B6: #	out( B17 B7 ) <- in( B5 )  Freq: 0.999997
088     movl    R11, RCX	# spill
08b     sarl    R11, #12
08f     movl    RBP, RCX	# spill
091     andl    RBP, #2048	# int
097     testl   RBP, RBP
099     je     B17  P=0.000000 C=10000.000000

09f     B7: #	out( B18 B8 ) <- in( B6 )  Freq: 0.999997
09f     andl    RCX, #512	# int
0a5     testl   RCX, RCX
0a7     jne     B18  P=0.000000 C=10000.000000

0ad     B8: #	out( B15 B9 ) <- in( B7 )  Freq: 0.999997
0ad     cmpl    R11, #1024	# unsigned
0b4     jnb,u   B15  P=0.000001 C=-1.000000

0ba     B9: #	out( B27 B10 ) <- in( B8 )  Freq: 0.999996
0ba     movq    R10, stable:narrowoop: java/lang/Object *[int:1024]<ciObjArray length=1024 type=<ciObjArrayKlass name=[Ljava/lang/Object; ident=1322 address=0x00007fafd2277060> ident=1327 address=0x00007fafd2278f20> *	# ptr
0c4     movl    RBP, [R10 + #16 + R11 << #2]	# compressed ptr
0c9     movl    R10, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0ce     NullCheck RBP

0ce     B10: #	out( B21 B11 ) <- in( B9 )  Freq: 0.999995
0ce     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$29+0x0000000801053740: 0x00007fafd23dfbf0:Constant:exact *	# compressed klass ptr
0d5     jne,u   B21  P=0.000000 C=-1.000000

0db     B11: #	out( B23 B12 ) <- in( B10 )  Freq: 0.999995
0db     decode_heap_oop_not_null R10,RBP
0df     # checkcastPP of R10
0df     movq    RDX, java/lang/Class:exact *	# ptr
0e9     movq    RCX, java/lang/Class:exact *	# ptr
0f3     movl    R8, #8	# int
0f9     movl    RSI, R11	# spill
0fc     movq    RDI, RBX	# spill
0ff     movq    [rsp + #0], R10	# spill
103     call,static  jdk.internal.vm.vector.VectorSupport::binaryOp
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:244 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {off=264/0x108}

108     B12: #	out( B26 B13 ) <- in( B11 )  Freq: 0.999975
        # Block is sole successor of call
108     movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
10c     NullCheck RAX

10c     B13: #	out( B22 B14 ) <- in( B12 )  Freq: 0.999974
10c     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1fa8a20:Constant:exact *	# compressed klass ptr
113     jne,u   B22  P=0.000000 C=-1.000000

119     B14: #	out( N289 ) <- in( B13 )  Freq: 0.999974
119     # checkcastPP of RAX
119     addq    rsp, 64	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

12b     ret

12c     B15: #	out( N289 ) <- in( B8 )  Freq: 1.01328e-06
12c     movl    RSI, #-28	# int
131     movq    RBP, R9	# spill
134     movq    [rsp + #16], RBX	# spill
139     movq    [rsp + #24], R8	# spill
13e     movl    [rsp + #12], R11	# spill
143     movl    [rsp + #32], R11	# spill
        nop 	# 3 bytes pad for loops and calls
14b     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:5 (line 1264) L[0]=#Ptr0x00007fafd23a8850 L[1]=rsp + #24 L[2]=rsp + #32 L[3]=#Ptr0x00007fafd23aae80 L[4]=_ STK[0]=#Ptr0x00007fafd2278f20 STK[1]=rsp + #12
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:238 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=#Ptr0x00007fafd1feef60 STK[2]=#Ptr0x00007fafd23a7a30 STK[3]=#8 STK[4]=RBP STK[5]=rsp + #16
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop off=336/0x150}
150     stop	# ShouldNotReachHere

164     B16: #	out( N289 ) <- in( B5 )  Freq: 4.76836e-07
164     movl    RSI, #-187	# int
169     movq    [rsp + #8], R9	# spill
16e     movq    [rsp + #16], RDX	# spill
173     movq    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
17b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opKind @ bci:6 (line 828) L[0]=_ L[1]=_ STK[0]=RBP
        # jdk.incubator.vector.VectorOperators::opKind @ bci:5 (line 409) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {[8]=Oop [16]=Oop [24]=Oop off=384/0x180}
180     stop	# ShouldNotReachHere

194     B17: #	out( N289 ) <- in( B6 )  Freq: 4.76836e-07
194     movl    RSI, #-187	# int
199     movq    [rsp + #8], R9	# spill
19e     movq    [rsp + #24], RBX	# spill
1a3     movq    [rsp + #32], R8	# spill
1a8     movl    [rsp + #40], R11	# spill
        nop 	# 2 bytes pad for loops and calls
1af     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:12 (line 775) L[0]=rsp + #32 L[1]=#2048 L[2]=#512 L[3]=rsp + #40 STK[0]=RBP STK[1]=#2048
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:207 (line 632) L[0]=rsp + #8 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {[8]=Oop [24]=Oop [32]=Oop off=436/0x1b4}
1b4     stop	# ShouldNotReachHere

1c8     B18: #	out( N289 ) <- in( B7 )  Freq: 4.76836e-07
1c8     movl    RSI, #-187	# int
1cd     movq    RBP, R9	# spill
1d0     movq    [rsp + #16], RBX	# spill
1d5     movq    [rsp + #24], R8	# spill
1da     movl    [rsp + #32], R11	# spill
1df     movl    [rsp + #36], RCX	# spill
1e3     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:26 (line 775) L[0]=rsp + #24 L[1]=#2048 L[2]=#512 L[3]=rsp + #32 STK[0]=rsp + #36 STK[1]=#512
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:207 (line 632) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop off=488/0x1e8}
1e8     stop	# ShouldNotReachHere

1fc     B19: #	out( N289 ) <- in( B2 )  Freq: 1e-35
1fc     movl    RSI, #-34	# int
201     movq    RBP, R9	# spill
204     movq    [rsp + #8], RDX	# spill
209     movq    [rsp + #16], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
20f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:1 (line 601) L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #16
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=532/0x214}
214     stop	# ShouldNotReachHere

228     B20: #	out( N289 ) <- in( B4 )  Freq: 1e-35
228     movl    RSI, #-34	# int
22d     movq    RBP, R9	# spill
230     movq    [rsp + #16], RDX	# spill
235     movq    [rsp + #24], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
23b     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=#136 STK[0]=rsp + #16
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=RBP L[1]=rsp + #16 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop off=576/0x240}
240     stop	# ShouldNotReachHere

254     B21: #	out( N289 ) <- in( B10 )  Freq: 1e-35
254     movl    RSI, #-34	# int
259     movq    [rsp + #8], R9	# spill
25e     movl    [rsp + #16], R11	# spill
263     movq    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
26b     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:241 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #16 STK[1]=#Ptr0x00007fafd1feef60 STK[2]=#Ptr0x00007fafd23a7a30 STK[3]=#8 STK[4]=rsp + #8 STK[5]=rsp + #24 STK[6]=RBP
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop [8]=Oop [24]=Oop off=624/0x270}
270     stop	# ShouldNotReachHere

284     B22: #	out( N289 ) <- in( B13 )  Freq: 1e-35
284     movl    RSI, #-34	# int
289     movq    RBP, RAX	# spill
        nop 	# 3 bytes pad for loops and calls
28f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:247 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop off=660/0x294}
294     stop	# ShouldNotReachHere

2a8     B23: #	out( N289 ) <- in( B11 )  Freq: 9.99995e-06
2a8     # exception oop is in rax; no code emitted
2a8     movq    RSI, RAX	# spill
2ab     addq    rsp, 64	# Destroy frame
	popq    rbp

2b0     jmp     rethrow_stub

2b5     B24: #	out( N289 ) <- in( B1 )  Freq: 1.01328e-06
2b5     movl    RSI, #-12	# int
2ba     movq    RBP, R9	# spill
2bd     movq    [rsp + #8], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
2c3     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:1 (line 601) L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop off=712/0x2c8}
2c8     stop	# ShouldNotReachHere

2dc     B25: #	out( N289 ) <- in( B3 )  Freq: 1.01328e-06
2dc     movl    RSI, #-12	# int
2e1     movq    RBP, R9	# spill
2e4     movq    [rsp + #8], RDX	# spill
2e9     movq    [rsp + #16], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
2ef     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=#136 STK[0]=#NULL
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=756/0x2f4}
2f4     stop	# ShouldNotReachHere

308     B26: #	out( N289 ) <- in( B12 )  Freq: 1.01325e-06
308     movl    RSI, #-12	# int
        nop 	# 2 bytes pad for loops and calls
30f     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:247 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {off=788/0x314}
314     stop	# ShouldNotReachHere

328     B27: #	out( N289 ) <- in( B9 )  Freq: 4.76835e-07
328     movl    RSI, #-187	# int
32d     movq    [rsp + #8], R9	# spill
332     movq    [rsp + #24], RBX	# spill
337     movq    [rsp + #32], R8	# spill
33c     movl    [rsp + #20], R11	# spill
        nop 	# 2 bytes pad for loops and calls
343     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:10 (line 1265) L[0]=#Ptr0x00007fafd23a8850 L[1]=rsp + #32 L[2]=rsp + #20 L[3]=#Ptr0x00007fafd23aae80 L[4]=RBP STK[0]=RBP
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:238 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #20 STK[1]=#Ptr0x00007fafd1feef60 STK[2]=#Ptr0x00007fafd23a7a30 STK[3]=#8 STK[4]=rsp + #8 STK[5]=rsp + #24
        # jdk.incubator.vector.Int256Vector::lanewise @ bci:3 (line 279) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop [8]=Oop [24]=Oop [32]=Oop off=840/0x348}
348     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    687  113    b        jdk.incubator.vector.IntVector::lanewiseTemplate (251 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 113 ------------------------
{method}
 - this oop:          0x000000011584a320
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x81000010  final 
 - name:              'lanewiseTemplate'
 - signature:         '(Ljdk/incubator/vector/VectorOperators$Binary;Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/IntVector;'
 - max stack:         11
 - max locals:        7
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044c80: 0xbbb00000 i2c: 0x000000010effa760 c2i: 0x000000010effa84c c2iUV: 0x000000010effa812 c2iNCI: 0x000000010effa889
 - compiled entry     0x000000010effa84c
 - code size:         251
 - code start:        0x000000011584a180
 - code end (excl):   0x000000011584a27b
 - method data:       0x000000011594c650
 - checked ex length: 0
 - linenumber start:  0x000000011584a27b
 - localvar length:   10
 - localvar start:    0x000000011584a29c

------------------------ OptoAssembly for Compile_id = 113 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/IntVector:NotNull *, jdk/incubator/vector/VectorOperators$Binary *, jdk/incubator/vector/Vector * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector:NotNull *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/VectorOperators$Binary *
#r010 rcx:rcx   : parm 2: jdk/incubator/vector/Vector *
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: outgoing argument
#r584 rsp+ 0: outgoing argument
#
000     N320: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B26 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (504 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c     movl    R11, [RCX + #8 (8-bit)]	# compressed klass ptr
030     NullCheck RCX

030     B2: #	out( B21 B3 ) <- in( B1 )  Freq: 0.999999
030     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23bfea0:Constant:exact *	# compressed klass ptr
037     jne,u   B21  P=0.000000 C=-1.000000

03d     B3: #	out( B17 B4 ) <- in( B2 )  Freq: 0.999999
03d     movq    RBX, RCX	# spill
040     # checkcastPP of RBX
040     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
044     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23bfea0:Constant:exact *	# compressed klass ptr
04b     jne,u   B17  P=0.000000 C=10000.000000

051     B4: #	out( B27 B5 ) <- in( B3 )  Freq: 0.999999
051     movq    R9, RSI	# spill
054     # checkcastPP of R9
054     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
058     NullCheck RDX

058     B5: #	out( B22 B6 ) <- in( B4 )  Freq: 0.999997
        nop 	# 8 bytes pad for loops and calls
060     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/VectorOperators$AssociativeImpl: 0x00007fafd2276c40:Constant:exact *	# compressed klass ptr
067     jne,u   B22  P=0.000000 C=-1.000000

06d     B6: #	out( B18 B7 ) <- in( B5 )  Freq: 0.999997
06d     movq    RCX, RDX	# spill
070     # checkcastPP of RCX
070     movl    R8, [RCX + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/VectorOperators$OperatorImpl.opInfo (constant)
074     movl    RBP, R8	# spill
077     andl    RBP, #136	# int
        nop 	# 3 bytes pad for loops and calls
080     testl   RBP, RBP
082     jne     B18  P=0.000000 C=10000.000000

088     B7: #	out( B19 B8 ) <- in( B6 )  Freq: 0.999997
088     movl    R10, R8	# spill
08b     sarl    R10, #12
08f     movl    RBP, R8	# spill
092     andl    RBP, #2048	# int
098     testl   RBP, RBP
        nop 	# 6 bytes pad for loops and calls
0a0     je     B19  P=0.000000 C=10000.000000

0a6     B8: #	out( B20 B9 ) <- in( B7 )  Freq: 0.999997
0a6     andl    R8, #512	# int
0ad     testl   R8, R8
0b0     jne     B20  P=0.000000 C=10000.000000

0b6     B9: #	out( B16 B10 ) <- in( B8 )  Freq: 0.999996
        nop 	# 10 bytes pad for loops and calls
0c0     cmpl    R10, #1024	# unsigned
0c7     jnb,u   B16  P=0.000001 C=-1.000000

0cd     B10: #	out( B29 B11 ) <- in( B9 )  Freq: 0.999995
0cd     movq    R11, stable:narrowoop: java/lang/Object *[int:1024]<ciObjArray length=1024 type=<ciObjArrayKlass name=[Ljava/lang/Object; ident=1320 address=0x00007fafd1feee60> ident=1325 address=0x00007fafd1fa9dd0> *	# ptr
0d7     movl    RBP, [R11 + #16 + R10 << #2]	# compressed ptr
        nop 	# 4 bytes pad for loops and calls
0e0     movl    R8, [R12 + RBP << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0e5     NullCheck RBP

0e5     B11: #	out( B23 B12 ) <- in( B10 )  Freq: 0.999995
0e5     cmpl    R8, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$29+0x0000000801053740: 0x00007fafd23c0110:Constant:exact *	# compressed klass ptr
0ec     jne,u   B23  P=0.000000 C=-1.000000

0f2     B12: #	out( B25 B13 ) <- in( B11 )  Freq: 0.999995
0f2     decode_heap_oop_not_null R11,RBP
0f6     # checkcastPP of R11
0f6     movq    RDX, java/lang/Class:exact *	# ptr
100     movq    RCX, java/lang/Class:exact *	# ptr
10a     movl    R8, #8	# int
110     movl    RSI, R10	# spill
113     movq    RDI, RBX	# spill
116     movq    [rsp + #0], R11	# spill
        nop 	# 1 bytes pad for loops and calls
11b     call,static  jdk.internal.vm.vector.VectorSupport::binaryOp
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:244 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {off=288/0x120}

120     B13: #	out( B28 B14 ) <- in( B12 )  Freq: 0.999975
        # Block is sole successor of call
120     movl    R10, [RAX + #8 (8-bit)]	# compressed klass ptr
124     NullCheck RAX

124     B14: #	out( B24 B15 ) <- in( B13 )  Freq: 0.999974
124     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23bfea0:Constant:exact *	# compressed klass ptr
12b     jne,u   B24  P=0.000000 C=-1.000000

131     B15: #	out( N320 ) <- in( B14 )  Freq: 0.999974
131     # checkcastPP of RAX
131     addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

143     ret

144     B16: #	out( N320 ) <- in( B9 )  Freq: 1.01327e-06
144     movl    RSI, #-28	# int
149     movq    [rsp + #8], R9	# spill
14e     movq    [rsp + #16], RBX	# spill
153     movq    [rsp + #24], RCX	# spill
158     movl    [rsp + #32], R10	# spill
15d     movl    [rsp + #36], R10	# spill
        nop 	# 1 bytes pad for loops and calls
163     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:5 (line 1264) L[0]=#Ptr0x00007fafd1feb6d0 L[1]=rsp + #24 L[2]=rsp + #36 L[3]=#Ptr0x00007fafd1fedd00 L[4]=_ STK[0]=#Ptr0x00007fafd1fa9dd0 STK[1]=rsp + #32
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:238 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #32 STK[1]=#Ptr0x00007fafd1f39de0 STK[2]=#Ptr0x00007fafd1fea8b0 STK[3]=#8 STK[4]=rsp + #8 STK[5]=rsp + #16
        # OopMap {[8]=Oop [16]=Oop [24]=Oop off=360/0x168}
168     stop	# ShouldNotReachHere

17c     B17: #	out( N320 ) <- in( B3 )  Freq: 4.99999e-07
17c     decode_and_move_klass_not_null R10,R11
18a     movq    R10, [R10 + #120 (8-bit)]	# ptr
18e     movq    RBP, [R10]	# ptr
191     movq    [rsp + #16], RDX	# spill
196     movq    [rsp + #24], RSI	# spill
19b     movq    [rsp + #32], RSI	# spill
1a0     movq    [rsp + #48], RBX	# spill
1a5     movq    [rsp + #56], RBX	# spill
1aa     movl    RSI, #-187	# int
1af     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractVector::sameSpecies @ bci:8 (line 133) L[0]=rsp + #48 L[1]=rsp + #24 L[2]=_ STK[0]=#Ptr0x00007fafd1f39de0 STK[1]=RBP
        # jdk.incubator.vector.AbstractVector::check @ bci:2 (line 124) L[0]=rsp + #56 L[1]=rsp + #32
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:7 (line 602) L[0]=rsp + #24 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #48 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop [32]=Oop [48]=Oop [56]=Oop off=436/0x1b4}
1b4     stop	# ShouldNotReachHere

1c8     B18: #	out( N320 ) <- in( B6 )  Freq: 4.76836e-07
1c8     movl    RSI, #-187	# int
1cd     movq    [rsp + #8], RDX	# spill
1d2     movq    [rsp + #16], R9	# spill
1d7     movq    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
1df     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opKind @ bci:6 (line 828) L[0]=_ L[1]=_ STK[0]=RBP
        # jdk.incubator.vector.VectorOperators::opKind @ bci:5 (line 409) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=rsp + #16 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # OopMap {[8]=Oop [16]=Oop [24]=Oop off=484/0x1e4}
1e4     stop	# ShouldNotReachHere

1f8     B19: #	out( N320 ) <- in( B7 )  Freq: 4.76836e-07
1f8     movl    RSI, #-187	# int
1fd     movq    [rsp + #8], R9	# spill
202     movq    [rsp + #24], RBX	# spill
207     movq    [rsp + #32], RCX	# spill
20c     movl    [rsp + #40], R10	# spill
        nop 	# 2 bytes pad for loops and calls
213     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:12 (line 775) L[0]=rsp + #32 L[1]=#2048 L[2]=#512 L[3]=rsp + #40 STK[0]=RBP STK[1]=#2048
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:207 (line 632) L[0]=rsp + #8 L[1]=rsp + #32 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # OopMap {[8]=Oop [24]=Oop [32]=Oop off=536/0x218}
218     stop	# ShouldNotReachHere

22c     B20: #	out( N320 ) <- in( B8 )  Freq: 4.76836e-07
22c     movl    RSI, #-187	# int
231     movq    RBP, R9	# spill
234     movq    [rsp + #16], RBX	# spill
239     movq    [rsp + #24], RCX	# spill
23e     movl    [rsp + #32], R10	# spill
243     movl    [rsp + #36], R8	# spill
        nop 	# 3 bytes pad for loops and calls
24b     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:26 (line 775) L[0]=rsp + #24 L[1]=#2048 L[2]=#512 L[3]=rsp + #32 STK[0]=rsp + #36 STK[1]=#512
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:207 (line 632) L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [16]=Oop [24]=Oop off=592/0x250}
250     stop	# ShouldNotReachHere

264     B21: #	out( N320 ) <- in( B2 )  Freq: 1e-35
264     movq    RBP, RSI	# spill
267     movq    [rsp + #8], RDX	# spill
26c     movq    [rsp + #16], RCX	# spill
271     movl    RSI, #-34	# int
        nop 	# 1 bytes pad for loops and calls
277     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:1 (line 601) L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #16
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=636/0x27c}
27c     stop	# ShouldNotReachHere

290     B22: #	out( N320 ) <- in( B5 )  Freq: 1e-35
290     movl    RSI, #-34	# int
295     movq    [rsp + #8], RDX	# spill
29a     movq    [rsp + #16], R9	# spill
29f     movq    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
2a7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=#136 STK[0]=rsp + #8
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=rsp + #16 L[1]=rsp + #8 L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # OopMap {[8]=Oop [16]=Oop [24]=Oop off=684/0x2ac}
2ac     stop	# ShouldNotReachHere

2c0     B23: #	out( N320 ) <- in( B11 )  Freq: 1e-35
2c0     movl    RSI, #-34	# int
2c5     movl    [rsp + #8], R10	# spill
2ca     movq    [rsp + #16], R9	# spill
2cf     movq    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
2d7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:241 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #8 STK[1]=#Ptr0x00007fafd1f39de0 STK[2]=#Ptr0x00007fafd1fea8b0 STK[3]=#8 STK[4]=rsp + #16 STK[5]=rsp + #24 STK[6]=RBP
        # OopMap {rbp=NarrowOop [16]=Oop [24]=Oop off=732/0x2dc}
2dc     stop	# ShouldNotReachHere

2f0     B24: #	out( N320 ) <- in( B14 )  Freq: 1e-35
2f0     movl    RSI, #-34	# int
2f5     movq    RBP, RAX	# spill
        nop 	# 3 bytes pad for loops and calls
2fb     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:247 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP
        # OopMap {rbp=Oop off=768/0x300}
300     stop	# ShouldNotReachHere

314     B25: #	out( N320 ) <- in( B12 )  Freq: 9.99995e-06
314     # exception oop is in rax; no code emitted
314     movq    RSI, RAX	# spill
317     addq    rsp, 80	# Destroy frame
	popq    rbp

31c     jmp     rethrow_stub

321     B26: #	out( N320 ) <- in( B1 )  Freq: 1.01328e-06
321     movq    RBP, RSI	# spill
324     movq    [rsp + #8], RDX	# spill
329     movl    RSI, #-12	# int
        nop 	# 1 bytes pad for loops and calls
32f     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:1 (line 601) L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap {rbp=Oop [8]=Oop off=820/0x334}
334     stop	# ShouldNotReachHere

348     B27: #	out( N320 ) <- in( B4 )  Freq: 1.01328e-06
348     movl    RSI, #-12	# int
34d     movq    RBP, RDX	# spill
350     movq    [rsp + #8], R9	# spill
355     movq    [rsp + #16], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
35b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=#136 STK[0]=#NULL
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:15 (line 603) L[0]=rsp + #8 L[1]=RBP L[2]=_ L[3]=rsp + #16 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=864/0x360}
360     stop	# ShouldNotReachHere

374     B28: #	out( N320 ) <- in( B13 )  Freq: 1.01325e-06
374     movl    RSI, #-12	# int
        nop 	# 2 bytes pad for loops and calls
37b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:247 (line 633) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap {off=896/0x380}
380     stop	# ShouldNotReachHere

394     B29: #	out( N320 ) <- in( B10 )  Freq: 4.76835e-07
394     movl    RSI, #-187	# int
399     movq    [rsp + #16], R9	# spill
39e     movq    [rsp + #24], RBX	# spill
3a3     movq    [rsp + #32], RCX	# spill
3a8     movl    [rsp + #12], R10	# spill
        nop 	# 2 bytes pad for loops and calls
3af     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:10 (line 1265) L[0]=#Ptr0x00007fafd1feb6d0 L[1]=rsp + #32 L[2]=rsp + #12 L[3]=#Ptr0x00007fafd1fedd00 L[4]=RBP STK[0]=RBP
        # jdk.incubator.vector.IntVector::lanewiseTemplate @ bci:238 (line 636) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=#Ptr0x00007fafd1f39de0 STK[2]=#Ptr0x00007fafd1fea8b0 STK[3]=#8 STK[4]=rsp + #16 STK[5]=rsp + #24
        # OopMap {rbp=NarrowOop [16]=Oop [24]=Oop [32]=Oop off=948/0x3b4}
3b4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    699  114    b        jdk.incubator.vector.AbstractVector::check (16 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 114 ------------------------
{method}
 - this oop:          0x000000011585d480
 - method holder:     'jdk/incubator/vector/AbstractVector'
 - constants:         0x000000011585b628 constant pool [652]/operands[19] {0x000000011585b628} for 'jdk/incubator/vector/AbstractVector' cache=0x0000000115860700
 - access:            0x81000010  final 
 - name:              'check'
 - signature:         '(Ljdk/incubator/vector/Vector;)Ljdk/incubator/vector/AbstractVector;'
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044cd0: 0xbb000000 i2c: 0x000000010effa3e0 c2i: 0x000000010effa4c8 c2iUV: 0x000000010effa48e c2iNCI: 0x000000010effa505
 - compiled entry     0x000000010effa4c8
 - code size:         16
 - code start:        0x000000011585d440
 - code end (excl):   0x000000011585d450
 - method data:       0x000000011594ce90
 - checked ex length: 0
 - linenumber start:  0x000000011585d450
 - localvar length:   2
 - localvar start:    0x000000011585d45c

------------------------ OptoAssembly for Compile_id = 114 -----------------------
#
#  jdk/incubator/vector/AbstractVector * ( jdk/incubator/vector/AbstractVector:NotNull *, jdk/incubator/vector/Vector * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/AbstractVector:NotNull *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/Vector *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N62: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B5 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (248 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movq    R8, RSI	# spill
02f     movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
033     NullCheck RDX

033     B2: #	out( B4 B3 ) <- in( B1 )  Freq: 0.999999
033     movl    RCX, [RSI + #8 (8-bit)]	# compressed klass ptr
036     cmpl    RCX, R10	# compressed ptr
039     jne,us  B4  P=0.000000 C=10000.000000

03b     B3: #	out( N62 ) <- in( B2 )  Freq: 0.999999
03b     movq    RAX, RSI	# spill
03e     addq    rsp, 64	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

050     ret

051     B4: #	out( N62 ) <- in( B2 )  Freq: 4.99999e-07
051     movl    RSI, #-187	# int
056     decode_and_move_klass_not_null R11,R10
064     movq    R10, [R11 + #120 (8-bit)]	# ptr
068     movq    R11, [R10]	# ptr
06b     decode_and_move_klass_not_null R10,RCX
079     movq    R10, [R10 + #120 (8-bit)]	# ptr
07d     movq    RBP, [R10]	# ptr
080     movq    [rsp + #16], R8	# spill
085     movq    [rsp + #24], RDX	# spill
08a     movq    [rsp + #32], R11	# spill
08f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractVector::sameSpecies @ bci:8 (line 133) L[0]=rsp + #16 L[1]=rsp + #24 L[2]=_ STK[0]=RBP STK[1]=rsp + #32
        # jdk.incubator.vector.AbstractVector::check @ bci:2 (line 124) L[0]=rsp + #16 L[1]=rsp + #24
        # OopMap {rbp=Oop [16]=Oop [24]=Oop [32]=Oop off=148/0x94}
094     stop	# ShouldNotReachHere

0a8     B5: #	out( N62 ) <- in( B1 )  Freq: 1.01328e-06
0a8     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
0af     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractVector::sameSpecies @ bci:5 (line 133) L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # jdk.incubator.vector.AbstractVector::check @ bci:2 (line 124) L[0]=_ L[1]=_
        # OopMap {off=180/0xb4}
0b4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    701  115    b        jdk.incubator.vector.AbstractVector::sameSpecies (54 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 115 ------------------------
{method}
 - this oop:          0x000000011585d5a0
 - method holder:     'jdk/incubator/vector/AbstractVector'
 - constants:         0x000000011585b628 constant pool [652]/operands[19] {0x000000011585b628} for 'jdk/incubator/vector/AbstractVector' cache=0x0000000115860700
 - access:            0x81000002  private 
 - name:              'sameSpecies'
 - signature:         '(Ljdk/incubator/vector/Vector;)Z'
 - max stack:         4
 - max locals:        3
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044cd0: 0xbb000000 i2c: 0x000000010effa3e0 c2i: 0x000000010effa4c8 c2iUV: 0x000000010effa48e c2iNCI: 0x000000010effa505
 - compiled entry     0x000000010effa4c8
 - code size:         54
 - code start:        0x000000011585d530
 - code end (excl):   0x000000011585d566
 - method data:       0x000000011594d0a0
 - checked ex length: 0
 - linenumber start:  0x000000011585d566
 - localvar length:   3
 - localvar start:    0x000000011585d570

------------------------ OptoAssembly for Compile_id = 115 -----------------------
#
#  bool ( jdk/incubator/vector/AbstractVector:NotNull *, jdk/incubator/vector/Vector * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/AbstractVector:NotNull *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/Vector *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N59: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B5 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
030     NullCheck RDX

030     B2: #	out( B4 B3 ) <- in( B1 )  Freq: 0.999999
030     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
034     cmpl    R11, R10	# compressed ptr
037     jne,us  B4  P=0.000000 C=6700.000000

039     B3: #	out( N59 ) <- in( B2 )  Freq: 0.999999
039     movl    RAX, #1	# int
03e     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

050     ret

051     B4: #	out( N59 ) <- in( B2 )  Freq: 4.99999e-07
051     decode_and_move_klass_not_null R8,R10
05f     movq    R10, [R8 + #120 (8-bit)]	# ptr
063     movq    R8, [R10]	# ptr
066     decode_and_move_klass_not_null R10,R11
074     movq    R10, [R10 + #120 (8-bit)]	# ptr
078     movq    RBP, [R10]	# ptr
07b     movq    [rsp + #0], RSI	# spill
07f     movq    [rsp + #8], RDX	# spill
084     movq    [rsp + #16], R8	# spill
089     movl    RSI, #-187	# int
        nop 	# 1 bytes pad for loops and calls
08f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.AbstractVector::sameSpecies @ bci:8 (line 133) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ STK[0]=RBP STK[1]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop off=148/0x94}
094     stop	# ShouldNotReachHere

0a8     B5: #	out( N59 ) <- in( B1 )  Freq: 1.01328e-06
0a8     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
0af     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.AbstractVector::sameSpecies @ bci:5 (line 133) L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=180/0xb4}
0b4     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    704  116    b        jdk.incubator.vector.IntVector::opKind (6 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 116 ------------------------
{method}
 - this oop:          0x0000000115847980
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x81000008  static 
 - name:              'opKind'
 - signature:         '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z'
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044be0: 0xba000000 i2c: 0x000000010effae60 c2i: 0x000000010effaf47 c2iUV: 0x000000010effaf0d c2iNCI: 0x000000010effaf84
 - compiled entry     0x000000010effaf47
 - code size:         6
 - code start:        0x0000000115847950
 - code end (excl):   0x0000000115847956
 - method data:       0x000000011594d3e8
 - checked ex length: 0
 - linenumber start:  0x0000000115847956
 - localvar length:   2
 - localvar start:    0x000000011584795e

------------------------ OptoAssembly for Compile_id = 116 -----------------------
#
#  bool ( jdk/incubator/vector/VectorOperators$Operator *, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorOperators$Operator *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B7 B6 B5 B4 )  Freq: 1

000     B1: #	out( B7 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (336 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
010     NullCheck RSI

010     B2: #	out( B6 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/VectorOperators$AssociativeImpl: 0x00007fafd1f9a0a0:Constant:exact *	# compressed klass ptr
017     jne,us  B6  P=0.000000 C=-1.000000

019     B3: #	out( B5 B4 ) <- in( B2 )  Freq: 0.999999
019     # checkcastPP of RSI
019     andl    RDX, [RSI + #12 (8-bit)]	# int
        nop 	# 4 bytes pad for loops and calls
020     testl   RDX, RDX
022     jne,s   B5  P=0.000000 C=10000.000000

024     B4: #	out( N1 ) <- in( B3 )  Freq: 0.999999
024     xorl    RAX, RAX	# int
026     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

038     ret

039     B5: #	out( N1 ) <- in( B3 )  Freq: 4.76837e-07
039     movl    RSI, #-187	# int
03e     movl    RBP, RDX	# spill
        nop 	# 3 bytes pad for loops and calls
043     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opKind @ bci:6 (line 828) L[0]=_ L[1]=_ STK[0]=RBP
        # jdk.incubator.vector.VectorOperators::opKind @ bci:5 (line 409) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # OopMap {off=72/0x48}
048     stop	# ShouldNotReachHere

05c     B6: #	out( N1 ) <- in( B2 )  Freq: 1e-35
05c     movl    RBP, RDX	# spill
05e     movq    [rsp + #0], RSI	# spill
062     movl    RSI, #-34	# int
067     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=RBP STK[0]=rsp + #0
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # OopMap {[0]=Oop off=108/0x6c}
06c     stop	# ShouldNotReachHere

080     B7: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
080     movl    RSI, #-12	# int
085     movl    RBP, RDX	# spill
087     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=RBP STK[0]=#NULL
        # jdk.incubator.vector.IntVector::opKind @ bci:2 (line 71) L[0]=_ L[1]=_
        # OopMap {off=140/0x8c}
08c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    706  117    b        jdk.incubator.vector.VectorOperators::opKind (9 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 117 ------------------------
{method}
 - this oop:          0x0000000115868b00
 - method holder:     'jdk/incubator/vector/VectorOperators'
 - constants:         0x0000000115866638 constant pool [858]/operands[5] {0x0000000115866638} for 'jdk/incubator/vector/VectorOperators' cache=0x0000000115934aa8
 - access:            0x81000008  static 
 - name:              'opKind'
 - signature:         '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z'
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044be0: 0xba000000 i2c: 0x000000010effae60 c2i: 0x000000010effaf47 c2iUV: 0x000000010effaf0d c2iNCI: 0x000000010effaf84
 - compiled entry     0x000000010effaf47
 - code size:         9
 - code start:        0x0000000115868ad0
 - code end (excl):   0x0000000115868ad9
 - method data:       0x000000011594d5a0
 - checked ex length: 0
 - linenumber start:  0x0000000115868ad9
 - localvar length:   2
 - localvar start:    0x0000000115868ade

------------------------ OptoAssembly for Compile_id = 117 -----------------------
#
#  bool ( jdk/incubator/vector/VectorOperators$Operator *, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorOperators$Operator *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B7 B6 B5 B4 )  Freq: 1

000     B1: #	out( B7 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (232 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
010     NullCheck RSI

010     B2: #	out( B6 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    R10, narrowklass: precise klass jdk/incubator/vector/VectorOperators$AssociativeImpl: 0x00007fafd23c8740:Constant:exact *	# compressed klass ptr
017     jne,us  B6  P=0.000000 C=-1.000000

019     B3: #	out( B5 B4 ) <- in( B2 )  Freq: 0.999999
019     # checkcastPP of RSI
019     andl    RDX, [RSI + #12 (8-bit)]	# int
        nop 	# 4 bytes pad for loops and calls
020     testl   RDX, RDX
022     jne,s   B5  P=0.000000 C=10000.000000

024     B4: #	out( N1 ) <- in( B3 )  Freq: 0.999999
024     xorl    RAX, RAX	# int
026     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

038     ret

039     B5: #	out( N1 ) <- in( B3 )  Freq: 4.76837e-07
039     movl    RSI, #-187	# int
03e     movl    RBP, RDX	# spill
        nop 	# 3 bytes pad for loops and calls
043     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opKind @ bci:6 (line 828) L[0]=_ L[1]=_ STK[0]=RBP
        # jdk.incubator.vector.VectorOperators::opKind @ bci:5 (line 409) L[0]=_ L[1]=_
        # OopMap {off=72/0x48}
048     stop	# ShouldNotReachHere

05c     B6: #	out( N1 ) <- in( B2 )  Freq: 1e-35
05c     movl    RBP, RDX	# spill
05e     movq    [rsp + #0], RSI	# spill
062     movl    RSI, #-34	# int
067     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=RBP STK[0]=rsp + #0
        # OopMap {[0]=Oop off=108/0x6c}
06c     stop	# ShouldNotReachHere

080     B7: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
080     movl    RSI, #-12	# int
085     movl    RBP, RDX	# spill
087     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opKind @ bci:1 (line 409) L[0]=_ L[1]=RBP STK[0]=#NULL
        # OopMap {off=140/0x8c}
08c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    708  118    b        jdk.incubator.vector.VectorOperators$OperatorImpl::opKind (15 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 118 ------------------------
{method}
 - this oop:          0x00000001159376d0
 - method holder:     'jdk/incubator/vector/VectorOperators$OperatorImpl'
 - constants:         0x00000001159363d8 constant pool [147] {0x00000001159363d8} for 'jdk/incubator/vector/VectorOperators$OperatorImpl' cache=0x0000000115937978
 - access:            0x81000000  
 - name:              'opKind'
 - signature:         '(I)Z'
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      6
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044be0: 0xba000000 i2c: 0x000000010effae60 c2i: 0x000000010effaf47 c2iUV: 0x000000010effaf0d c2iNCI: 0x000000010effaf84
 - compiled entry     0x000000010effaf47
 - code size:         15
 - code start:        0x0000000115937698
 - code end (excl):   0x00000001159376a7
 - method data:       0x000000011594d7b8
 - checked ex length: 0
 - linenumber start:  0x00000001159376a7
 - localvar length:   2
 - localvar start:    0x00000001159376ae

------------------------ OptoAssembly for Compile_id = 118 -----------------------
#
#  bool ( jdk/incubator/vector/VectorOperators$OperatorImpl:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorOperators$OperatorImpl:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N33: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (128 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     andl    RDX, [RSI + #12 (8-bit)]	# int
02f     testl   RDX, RDX
031     jne,s   B3  P=0.000000 C=6700.000000

033     B2: #	out( N33 ) <- in( B1 )  Freq: 1
033     xorl    RAX, RAX	# int
035     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

047     ret

048     B3: #	out( N33 ) <- in( B1 )  Freq: 4.76837e-07
048     movl    RSI, #-187	# int
04d     movl    RBP, RDX	# spill
04f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opKind @ bci:6 (line 828) L[0]=_ L[1]=_ STK[0]=RBP
        # OopMap {off=84/0x54}
054     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    710  119    b        jdk.incubator.vector.IntVector::opCode (11 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 119 ------------------------
{method}
 - this oop:          0x00000001158477b8
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x81000008  static 
 - name:              'opCode'
 - signature:         '(Ljdk/incubator/vector/VectorOperators$Operator;)I'
 - max stack:         4
 - max locals:        1
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         11
 - code start:        0x0000000115847790
 - code end (excl):   0x000000011584779b
 - method data:       0x000000011594d980
 - checked ex length: 0
 - linenumber start:  0x000000011584779b
 - localvar length:   1
 - localvar start:    0x00000001158477a2

------------------------ OptoAssembly for Compile_id = 119 -----------------------
#
#  int ( jdk/incubator/vector/VectorOperators$Operator * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorOperators$Operator *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B9 B8 B6 B7 B5 )  Freq: 1

000     B1: #	out( B9 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (360 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
010     NullCheck RSI

010     B2: #	out( B8 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/VectorOperators$AssociativeImpl: 0x00007fafd1fe2160:Constant:exact *	# compressed klass ptr
017     jne,u   B8  P=0.000000 C=-1.000000

01d     B3: #	out( B6 B4 ) <- in( B2 )  Freq: 0.999999
01d     # checkcastPP of RSI
01d     movl    R11, [RSI + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/VectorOperators$OperatorImpl.opInfo (constant)
021     movl    RBP, R11	# spill
024     andl    RBP, #2048	# int
02a     movl    RAX, R11	# spill
02d     sarl    RAX, #12
030     testl   RBP, RBP
032     je,s   B6  P=0.000000 C=10000.000000

034     B4: #	out( B7 B5 ) <- in( B3 )  Freq: 0.999999
034     andl    R11, #512	# int
        nop 	# 5 bytes pad for loops and calls
040     testl   R11, R11
043     jne,s   B7  P=0.000000 C=10000.000000

045     B5: #	out( N1 ) <- in( B4 )  Freq: 0.999998
045     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

057     ret

058     B6: #	out( N1 ) <- in( B3 )  Freq: 4.76837e-07
058     movq    [rsp + #0], RSI	# spill
05c     movl    [rsp + #8], RAX	# spill
060     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
067     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:12 (line 775) L[0]=rsp + #0 L[1]=#2048 L[2]=#512 L[3]=rsp + #8 STK[0]=RBP STK[1]=#2048
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # OopMap {[0]=Oop off=108/0x6c}
06c     stop	# ShouldNotReachHere

080     B7: #	out( N1 ) <- in( B4 )  Freq: 4.76836e-07
080     movq    RBP, RSI	# spill
083     movl    [rsp + #0], RAX	# spill
086     movl    [rsp + #4], R11	# spill
08b     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
093     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:26 (line 775) L[0]=RBP L[1]=#2048 L[2]=#512 L[3]=rsp + #0 STK[0]=rsp + #4 STK[1]=#512
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # OopMap {rbp=Oop off=152/0x98}
098     stop	# ShouldNotReachHere

0ac     B8: #	out( N1 ) <- in( B2 )  Freq: 1e-35
0ac     movq    RBP, RSI	# spill
0af     movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
0b7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opCode @ bci:1 (line 403) L[0]=_ L[1]=#2048 L[2]=#512 STK[0]=RBP
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # OopMap {rbp=Oop off=188/0xbc}
0bc     stop	# ShouldNotReachHere

0d0     B9: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
0d0     movl    RSI, #-12	# int
        nop 	# 2 bytes pad for loops and calls
0d7     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opCode @ bci:1 (line 403) L[0]=_ L[1]=#2048 L[2]=#512 STK[0]=#NULL
        # jdk.incubator.vector.IntVector::opCode @ bci:7 (line 62) L[0]=_
        # OopMap {off=220/0xdc}
0dc     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    713  120    b        jdk.incubator.vector.VectorOperators::opCode (10 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 120 ------------------------
{method}
 - this oop:          0x0000000115868a20
 - method holder:     'jdk/incubator/vector/VectorOperators'
 - constants:         0x0000000115866638 constant pool [858]/operands[5] {0x0000000115866638} for 'jdk/incubator/vector/VectorOperators' cache=0x0000000115934aa8
 - access:            0x81000008  static 
 - name:              'opCode'
 - signature:         '(Ljdk/incubator/vector/VectorOperators$Operator;II)I'
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b260: 0xbaa00000 i2c: 0x000000010efdde60 c2i: 0x000000010efddf4a c2iUV: 0x000000010efddf10 c2iNCI: 0x000000010efddf87
 - compiled entry     0x000000010efddf4a
 - code size:         10
 - code start:        0x00000001158689e0
 - code end (excl):   0x00000001158689ea
 - method data:       0x000000011594db30
 - checked ex length: 0
 - linenumber start:  0x00000001158689ea
 - localvar length:   3
 - localvar start:    0x00000001158689f2

------------------------ OptoAssembly for Compile_id = 120 -----------------------
#
#  int ( jdk/incubator/vector/VectorOperators$Operator *, int, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorOperators$Operator *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B11 B10 B7 B8 B9 B6 )  Freq: 1

000     B1: #	out( B11 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (264 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
010     NullCheck RSI

010     B2: #	out( B10 B3 ) <- in( B1 )  Freq: 0.999999
010     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/VectorOperators$AssociativeImpl: 0x00007fafd23ad750:Constant:exact *	# compressed klass ptr
017     jne,u   B10  P=0.000000 C=-1.000000

01d     B3: #	out( B7 B4 ) <- in( B2 )  Freq: 0.999999
01d     # checkcastPP of RSI
01d     movl    R11, [RSI + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/VectorOperators$OperatorImpl.opInfo (constant)
021     movl    RBP, RDX	# spill
023     andl    RBP, R11	# int
026     movl    RAX, R11	# spill
029     sarl    RAX, #12
02c     cmpl    RBP, RDX
02e     jne,s   B7  P=0.000000 C=10000.000000

030     B4: #	out( B8 B5 ) <- in( B3 )  Freq: 0.999999
030     testl   RCX, RCX
032     je,s   B8  P=0.000000 C=10000.000000

034     B5: #	out( B9 B6 ) <- in( B4 )  Freq: 0.999998
034     movl    RBP, RCX	# spill
036     andl    RBP, R11	# int
039     cmpl    RBP, RCX
03b     je,s   B9  P=0.000000 C=10000.000000

03d     B6: #	out( N1 ) <- in( B5 )  Freq: 0.999998
03d     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

04f     ret

050     B7: #	out( N1 ) <- in( B3 )  Freq: 4.99999e-07
050     movq    [rsp + #0], RSI	# spill
054     movl    [rsp + #12], RCX	# spill
058     movl    [rsp + #16], RDX	# spill
05c     movl    [rsp + #20], RAX	# spill
060     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
067     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:12 (line 775) L[0]=rsp + #0 L[1]=rsp + #16 L[2]=rsp + #12 L[3]=rsp + #20 STK[0]=RBP STK[1]=rsp + #16
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # OopMap {[0]=Oop off=108/0x6c}
06c     stop	# ShouldNotReachHere

080     B8: #	out( N1 ) <- in( B4 )  Freq: 4.76836e-07
080     movq    RBP, RSI	# spill
083     movl    [rsp + #0], RDX	# spill
086     movl    [rsp + #8], RCX	# spill
08a     movl    [rsp + #12], RAX	# spill
08e     movl    RSI, #-187	# int
093     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:16 (line 775) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 STK[0]=rsp + #8
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop off=152/0x98}
098     stop	# ShouldNotReachHere

0ac     B9: #	out( N1 ) <- in( B5 )  Freq: 4.76836e-07
0ac     movq    [rsp + #0], RSI	# spill
0b0     movl    [rsp + #8], RDX	# spill
0b4     movl    [rsp + #16], RCX	# spill
0b8     movl    [rsp + #20], RAX	# spill
0bc     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
0c3     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:26 (line 775) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 STK[0]=RBP STK[1]=rsp + #16
        # jdk.incubator.vector.VectorOperators::opCode @ bci:6 (line 403) L[0]=_ L[1]=_ L[2]=_
        # OopMap {[0]=Oop off=200/0xc8}
0c8     stop	# ShouldNotReachHere

0dc     B10: #	out( N1 ) <- in( B2 )  Freq: 1e-35
0dc     movl    RBP, RDX	# spill
0de     movl    [rsp + #0], RCX	# spill
0e1     movq    [rsp + #8], RSI	# spill
0e6     movl    RSI, #-34	# int
0eb     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opCode @ bci:1 (line 403) L[0]=_ L[1]=RBP L[2]=rsp + #0 STK[0]=rsp + #8
        # OopMap {[8]=Oop off=240/0xf0}
0f0     stop	# ShouldNotReachHere

104     B11: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
104     movl    RSI, #-12	# int
109     movl    RBP, RDX	# spill
10b     movl    [rsp + #0], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
10f     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators::opCode @ bci:1 (line 403) L[0]=_ L[1]=RBP L[2]=rsp + #0 STK[0]=#NULL
        # OopMap {off=276/0x114}
114     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    717  121    b        jdk.incubator.vector.VectorOperators$OperatorImpl::opCode (38 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 121 ------------------------
{method}
 - this oop:          0x0000000115937268
 - method holder:     'jdk/incubator/vector/VectorOperators$OperatorImpl'
 - constants:         0x00000001159363d8 constant pool [147] {0x00000001159363d8} for 'jdk/incubator/vector/VectorOperators$OperatorImpl' cache=0x0000000115937978
 - access:            0x81000000  
 - name:              'opCode'
 - signature:         '(II)I'
 - max stack:         4
 - max locals:        4
 - size of params:    3
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b260: 0xbaa00000 i2c: 0x000000010efdde60 c2i: 0x000000010efddf4a c2iUV: 0x000000010efddf10 c2iNCI: 0x000000010efddf87
 - compiled entry     0x000000010efddf4a
 - code size:         38
 - code start:        0x0000000115937200
 - code end (excl):   0x0000000115937226
 - method data:       0x000000011594dd50
 - checked ex length: 0
 - linenumber start:  0x0000000115937226
 - localvar length:   4
 - localvar start:    0x000000011593722e

------------------------ OptoAssembly for Compile_id = 121 -----------------------
#
#  int ( jdk/incubator/vector/VectorOperators$OperatorImpl:NotNull *, int, int )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorOperators$OperatorImpl:NotNull *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N81: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B5 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    R10, RSI	# spill
02f     movl    R11, [RSI + #12 (8-bit)]	# int ! Field: jdk/incubator/vector/VectorOperators$OperatorImpl.opInfo (constant)
033     movl    R8, RDX	# spill
036     andl    R8, R11	# int
039     movl    RAX, R11	# spill
03c     sarl    RAX, #12
        nop 	# 1 bytes pad for loops and calls
040     cmpl    R8, RDX
043     jne,s   B5  P=0.000000 C=6700.000000

045     B2: #	out( B6 B3 ) <- in( B1 )  Freq: 1
045     testl   RCX, RCX
047     je,s   B6  P=0.000000 C=6700.000000

049     B3: #	out( B7 B4 ) <- in( B2 )  Freq: 0.999999
049     movl    RBP, RCX	# spill
04b     andl    RBP, R11	# int
04e     cmpl    RBP, RCX
050     je,s   B7  P=0.000000 C=6700.000000

052     B4: #	out( N81 ) <- in( B3 )  Freq: 0.999999
052     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

064     ret

065     B5: #	out( N81 ) <- in( B1 )  Freq: 5e-07
065     movl    RSI, #-187	# int
06a     movq    RBP, R10	# spill
06d     movl    [rsp + #4], RCX	# spill
071     movl    [rsp + #8], RAX	# spill
075     movl    [rsp + #12], R8	# spill
07a     movl    [rsp + #16], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
07f     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:12 (line 775) L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #4 L[3]=rsp + #8 STK[0]=rsp + #12 STK[1]=rsp + #16
        # OopMap {rbp=Oop off=132/0x84}
084     stop	# ShouldNotReachHere

098     B6: #	out( N81 ) <- in( B2 )  Freq: 4.76837e-07
098     movl    RSI, #-187	# int
09d     movq    RBP, R10	# spill
0a0     movl    [rsp + #0], RDX	# spill
0a3     movl    [rsp + #8], RAX	# spill
0a7     movl    [rsp + #12], RCX	# spill
0ab     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:16 (line 775) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=rsp + #8 STK[0]=rsp + #12
        # OopMap {rbp=Oop off=176/0xb0}
0b0     stop	# ShouldNotReachHere

0c4     B7: #	out( N81 ) <- in( B3 )  Freq: 4.76837e-07
0c4     movl    RSI, #-187	# int
0c9     movq    [rsp + #0], R10	# spill
0cd     movl    [rsp + #8], RDX	# spill
0d1     movl    [rsp + #16], RAX	# spill
0d5     movl    [rsp + #20], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
0db     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$OperatorImpl::opCode @ bci:26 (line 775) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #20 L[3]=rsp + #16 STK[0]=RBP STK[1]=rsp + #20
        # OopMap {[0]=Oop off=224/0xe0}
0e0     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    721  122    b        jdk.incubator.vector.VectorOperators$ImplCache::find (71 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 122 ------------------------
{method}
 - this oop:          0x0000000115865c18
 - method holder:     'jdk/incubator/vector/VectorOperators$ImplCache'
 - constants:         0x0000000115865420 constant pool [152]/operands[5] {0x0000000115865420} for 'jdk/incubator/vector/VectorOperators$ImplCache' cache=0x0000000115865fe0
 - access:            0x81000001  public 
 - name:              'find'
 - signature:         '(Ljdk/incubator/vector/VectorOperators$Operator;ILjava/util/function/IntFunction;)Ljava/lang/Object;'
 - max stack:         4
 - max locals:        5
 - size of params:    4
 - method size:       13
 - vtable index:      5
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81b4e0: 0xbbab0000 i2c: 0x000000010efdc260 c2i: 0x000000010efdc34f c2iUV: 0x000000010efdc315 c2iNCI: 0x000000010efdc38c
 - compiled entry     0x000000010efdc34f
 - code size:         71
 - code start:        0x0000000115865b78
 - code end (excl):   0x0000000115865bbf
 - method data:       0x000000011594dfd0
 - checked ex length: 0
 - linenumber start:  0x0000000115865bbf
 - localvar length:   5
 - localvar start:    0x0000000115865bd0

------------------------ OptoAssembly for Compile_id = 122 -----------------------
#
#  java/lang/Object * ( jdk/incubator/vector/VectorOperators$ImplCache:NotNull *, jdk/incubator/vector/VectorOperators$Operator *, int, java/util/function/IntFunction * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/VectorOperators$ImplCache:NotNull *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/VectorOperators$Operator *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/util/function/IntFunction *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N76: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B7 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (160 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    R9, RSI	# spill
02f     movl    R11, [RSI + #20 (8-bit)]	# compressed ptr ! Field: jdk/incubator/vector/VectorOperators$ImplCache.cache (constant)
033     movl    R10, [R12 + R11 << 3 + #12] (compressed oop addressing)	# range
038     NullCheck R11

038     B2: #	out( B5 B3 ) <- in( B1 )  Freq: 0.999999
038     cmpl    RCX, R10	# unsigned
03b     jnb,us  B5  P=0.000001 C=-1.000000

03d     B3: #	out( B6 B4 ) <- in( B2 )  Freq: 0.999998
03d     decode_heap_oop_not_null R10,R11
041     movl    RBP, [R10 + #16 + RCX << #2]	# compressed ptr
046     testl   RBP, RBP	# compressed ptr
048     je,s   B6  P=0.000000 C=6700.000000

04a     B4: #	out( N76 ) <- in( B3 )  Freq: 0.999997
04a     decode_heap_oop_not_null RAX,RBP
04e     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

060     ret

061     B5: #	out( N76 ) <- in( B2 )  Freq: 1.01328e-06
061     movl    RSI, #-28	# int
066     movq    RBP, R9	# spill
069     movq    [rsp + #0], RDX	# spill
06d     movq    [rsp + #16], R8	# spill
072     movl    [rsp + #12], R11	# spill
077     movl    [rsp + #24], RCX	# spill
07b     call,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:5 (line 1264) L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #24 L[3]=rsp + #16 L[4]=_ STK[0]=rsp + #12 STK[1]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [12]=NarrowOop [16]=Oop off=128/0x80}
080     stop	# ShouldNotReachHere

094     B6: #	out( N76 ) <- in( B3 )  Freq: 4.76836e-07
094     movl    RSI, #-187	# int
099     movq    [rsp + #0], R9	# spill
09d     movq    [rsp + #8], RDX	# spill
0a2     movl    [rsp + #16], RCX	# spill
0a6     movq    [rsp + #24], R8	# spill
0ab     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:10 (line 1265) L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #24 L[4]=RBP STK[0]=RBP
        # OopMap {rbp=NarrowOop [0]=Oop [8]=Oop [24]=Oop off=176/0xb0}
0b0     stop	# ShouldNotReachHere

0c4     B7: #	out( N76 ) <- in( B1 )  Freq: 1.01328e-06
0c4     movl    RSI, #-10	# int
0c9     movl    RBP, RCX	# spill
0cb     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.VectorOperators$ImplCache::find @ bci:5 (line 1264) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap {off=208/0xd0}
0d0     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    724  123    b        jdk.internal.vm.vector.VectorSupport::binaryOp (36 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 123 ------------------------
{method}
 - this oop:          0x000000080000bdd8
 - method holder:     'jdk/internal/vm/vector/VectorSupport'
 - constants:         0x00000008006215c8 constant pool [425] {0x00000008006215c8} for 'jdk/internal/vm/vector/VectorSupport' cache=0x000000080000b7a0
 - access:            0x81000009  public static 
 - name:              'binaryOp'
 - signature:         '(ILjava/lang/Class;Ljava/lang/Class;ILjava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;'
 - max stack:         4
 - max locals:        7
 - size of params:    7
 - method size:       13
 - intrinsic id:      297 _VectorBinaryOp
 - vtable index:      -2
 - i2i entry:         0x0000000800000010
 - adapters:          AHE@0x00007fafcf0437a0: 0xabbabbb0 i2c: 0x000000010f0b43e0 c2i: 0x000000010f0b44be c2iUV: 0x000000010f0b4484 c2iNCI: 0x000000010f0b44fb
 - compiled entry     0x0000000800001420
 - code size:         36
 - code start:        0x0000000800bd3618
 - code end (excl):   0x0000000800bd363c
 - method data:       0x000000011594e2d0
 - checked ex length: 0
 - linenumber start:  0x0000000800bd363c
 - localvar length:   7
 - localvar start:    0x0000000800bd3648

------------------------ OptoAssembly for Compile_id = 123 -----------------------
#
#  java/lang/Object * ( int, java/lang/Class:exact *, java/lang/Class:exact *, int, java/lang/Object *, java/lang/Object *, java/util/function/BiFunction * )
#
#r018 rsi   : parm 0: int
#r016 rdx:rdx   : parm 1: java/lang/Class:exact *
#r010 rcx:rcx   : parm 2: java/lang/Class:exact *
#r004 r8   : parm 3: int
#r006 r9:r9   : parm 4: java/lang/Object *
#r014 rdi:rdi   : parm 5: java/lang/Object *
#r585 rsp+52: parm 6: java/util/function/BiFunction *
#r584 rsp+48: parm 6: java/util/function/BiFunction *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r589 rsp+12: spill
#r588 rsp+ 8: spill
#r587 rsp+ 4: spill
#r586 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B30 B24 B31 B28 B32 B29 B19 B27 B33 B25 B37 B26 B34 )  Freq: 1

000     B1: #	out( B30 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (968 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movq    R10, [rsp + #48]	# spill
011     movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
015     NullCheck R10

015     B2: #	out( B24 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 11 bytes pad for loops and calls
020     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$29+0x0000000801053740: 0x00007fafd2392660:Constant:exact *	# compressed klass ptr
027     jne,u   B24  P=0.000001 C=-1.000000

02d     B3: #	out( B31 B4 ) <- in( B2 )  Freq: 0.999998
02d     movl    R11, [R9 + #8 (8-bit)]	# compressed klass ptr
031     NullCheck R9

031     B4: #	out( B28 B5 ) <- in( B3 )  Freq: 0.999997
031     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2396a70:Constant:exact *	# compressed klass ptr
038     jne,u   B28  P=0.000000 C=-1.000000

03e     B5: #	out( B32 B6 ) <- in( B4 )  Freq: 0.999997
03e     # checkcastPP of R9
03e     movq    [rsp + #48], R9	# spill
043     movq    RBP, RDI	# spill
046     movl    R11, [RDI + #8 (8-bit)]	# compressed klass ptr
04a     NullCheck RDI

04a     B6: #	out( B29 B7 ) <- in( B5 )  Freq: 0.999996
04a     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2396a70:Constant:exact *	# compressed klass ptr
051     jne,u   B29  P=0.000000 C=-1.000000

057     B7: #	out( B20 B8 ) <- in( B6 )  Freq: 0.999996
057     # checkcastPP of RBP
057     # TLS is in R15
057     movq    R11, [R15 + #328 (32-bit)]	# ptr
05e     movq    R10, R11	# spill
061     addq    R10, #48	# ptr
065     # TLS is in R15
065     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
06c     jnb,u   B20  P=0.000100 C=-1.000000

072     B8: #	out( B9 ) <- in( B7 )  Freq: 0.999896
072     # TLS is in R15
072     movq    [R15 + #328 (32-bit)], R10	# ptr
079     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
081     movq    [R11], #1	# long
088     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
090     movl    [R11 + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
098     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0a0     movl    [R11 + #12 (8-bit)], #8	# int
0a8     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b0     movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
0b4     movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b8     movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
0bc     movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)

0c0     B9: #	out( B33 B10 ) <- in( B21 B8 )  Freq: 0.999996
0c0     
0c0     MEMBAR-storestore (empty encoding)
0c0     # checkcastPP of R11
0c0     movq    [rsp + #0], R11	# spill
0c4     
0c4     MEMBAR-acquire ! (empty encoding)
0c4     movq    R10, [rsp + #48]	# spill
0c9     # checkcastPP of R10
0c9     movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0cd     movl    R10, [R12 + R11 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0d2     NullCheck R11

0d2     B10: #	out( B25 B11 ) <- in( B9 )  Freq: 0.999995
        nop 	# 14 bytes pad for loops and calls
0e0     cmpl    R10, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0e7     jne,u   B25  P=0.000001 C=-1.000000

0ed     B11: #	out( B34 B12 ) <- in( B10 )  Freq: 0.999994
0ed     
0ed     MEMBAR-acquire ! (empty encoding)
0ed     # checkcastPP of RBP
0ed     movl    R10, [RBP + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0f1     decode_heap_oop_not_null R8,R11
0f5     # checkcastPP of R8
0f5     movl    R11, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0fa     NullCheck R10

0fa     B12: #	out( B26 B13 ) <- in( B11 )  Freq: 0.999993
        nop 	# 6 bytes pad for loops and calls
100     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
107     jne,u   B26  P=0.000001 C=-1.000000

10d     B13: #	out( B27 B14 ) <- in( B12 )  Freq: 0.999992
10d     movl    R11, [R8 + #12 (8-bit)]	# range
111     decode_heap_oop_not_null RBP,R10
115     # checkcastPP of RBP
115     testl   R11, R11	# unsigned
118     jbe,u   B27  P=0.000001 C=-1.000000

11e     B14: #	out( B27 B15 ) <- in( B13 )  Freq: 0.999991
        nop 	# 2 bytes pad for loops and calls
120     cmpl    R11, #7	# unsigned
124     jbe,u   B27  P=0.000001 C=-1.000000

12a     B15: #	out( B27 B16 ) <- in( B14 )  Freq: 0.99999
12a     movl    R11, [RBP + #12 (8-bit)]	# range
12e     testl   R11, R11	# unsigned
131     jbe,u   B27  P=0.000001 C=-1.000000

137     B16: #	out( B27 B17 ) <- in( B15 )  Freq: 0.999989
137     cmpl    R11, #7	# unsigned
        nop 	# 5 bytes pad for loops and calls
140     jbe,u   B27  P=0.000001 C=-1.000000

146     B17: #	out( B22 B18 ) <- in( B16 )  Freq: 0.999988
146     # TLS is in R15
146     movq    RAX, [R15 + #328 (32-bit)]	# ptr
14d     movl    R10, [RBP + #16 (8-bit)]	# int
151     addl    R10, [R8 + #16 (8-bit)]	# int
155     movq    R11, [rsp + #0]	# spill
159     movl    [R11 + #16 (8-bit)], R10	# int
15d     movq    R9, RAX	# spill
160     addq    R9, #16	# ptr
164     movl    R11, [RBP + #20 (8-bit)]	# int
168     addl    R11, [R8 + #20 (8-bit)]	# int
16c     movq    R10, [rsp + #0]	# spill
170     movl    [R10 + #20 (8-bit)], R11	# int
174     movl    R11, [R8 + #24 (8-bit)]	# int
178     addl    R11, [RBP + #24 (8-bit)]	# int
17c     movl    [R10 + #24 (8-bit)], R11	# int
180     movl    R11, [RBP + #28 (8-bit)]	# int
184     addl    R11, [R8 + #28 (8-bit)]	# int
188     movl    [R10 + #28 (8-bit)], R11	# int
18c     movl    R11, [R8 + #32 (8-bit)]	# int
190     addl    R11, [RBP + #32 (8-bit)]	# int
194     movl    [R10 + #32 (8-bit)], R11	# int
198     movl    R11, [RBP + #36 (8-bit)]	# int
19c     addl    R11, [R8 + #36 (8-bit)]	# int
1a0     movl    [R10 + #36 (8-bit)], R11	# int
1a4     movl    R11, [RBP + #40 (8-bit)]	# int
1a8     addl    R11, [R8 + #40 (8-bit)]	# int
1ac     movl    [R10 + #40 (8-bit)], R11	# int
1b0     movl    R11, [RBP + #44 (8-bit)]	# int
1b4     addl    R11, [R8 + #44 (8-bit)]	# int
1b8     movl    [R10 + #44 (8-bit)], R11	# int
1bc     # TLS is in R15
        nop 	# 4 bytes pad for loops and calls
1c0     cmpq    R9, [R15 + #344 (32-bit)]	# raw ptr
1c7     jnb,u   B22  P=0.000100 C=-1.000000

1cd     B18: #	out( B19 ) <- in( B17 )  Freq: 0.999888
1cd     # TLS is in R15
1cd     movq    [R15 + #328 (32-bit)], R9	# ptr
1d4     PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1dc     movq    [RAX], #1	# long
1e3     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2396a70:Constant:exact *	# compressed klass ptr

1ea     B19: #	out( N1 ) <- in( B23 B18 )  Freq: 0.999988
1ea     movq    R10, [rsp + #0]	# spill
1ee     encode_heap_oop_not_null R10,R10
234     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
238     
238     # checkcastPP of RAX
238     MEMBAR-release ! (empty encoding)
238     addq    rsp, 32	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

24a     ret

24b     B20: #	out( B35 B21 ) <- in( B7 )  Freq: 0.000100016
24b     movl    RDX, #8	# int
250     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
25b     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:4 (line 199) L[0]=rsp + #48 L[1]=RBP L[2]=#Ptr0x00007fafd1fa9c50 L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [48]=Oop off=608/0x260}

260     B21: #	out( B9 ) <- in( B20 )  Freq: 0.000100014
        # Block is sole successor of call
260     movq    R11, RAX	# spill
263     jmp     B9

268     B22: #	out( B36 B23 ) <- in( B17 )  Freq: 0.000100015
268     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2396a70:Constant:exact *	# ptr
272     movq    RBP, R10	# spill
        nop 	# 2 bytes pad for loops and calls
277     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:62 (line 205) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [0]=Oop off=636/0x27c}

27c     B23: #	out( B19 ) <- in( B22 )  Freq: 0.000100013
        # Block is sole successor of call
        nop 	# 4 bytes pad for loops and calls
280     jmp     B19

285     B24: #	out( N1 ) <- in( B2 )  Freq: 9.99999e-07
285     movl    RSI, #-34	# int
28a     movq    RBP, [rsp + #48]	# spill
28f     movq    [rsp + #48], R9	# spill
294     movq    [rsp + #0], RDI	# spill
        nop 	# 3 bytes pad for loops and calls
29b     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=RBP STK[1]=rsp + #48 STK[2]=rsp + #0
        # OopMap {rbp=Oop [48]=Oop [0]=Oop off=672/0x2a0}
2a0     stop	# ShouldNotReachHere

2b4     B25: #	out( N1 ) <- in( B10 )  Freq: 9.99995e-07
2b4     movl    RSI, #-34	# int
2b9     movl    RBP, R11	# spill
        nop 	# 3 bytes pad for loops and calls
2bf     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=NarrowOop off=708/0x2c4}
2c4     stop	# ShouldNotReachHere

2d8     B26: #	out( N1 ) <- in( B12 )  Freq: 9.99993e-07
2d8     movl    RSI, #-34	# int
2dd     movl    RBP, R10	# spill
        nop 	# 3 bytes pad for loops and calls
2e3     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=NarrowOop off=744/0x2e8}
2e8     stop	# ShouldNotReachHere

2fc     B27: #	out( N1 ) <- in( B15 B13 B14 B16 )  Freq: 3.99996e-06
2fc     movl    RSI, #-138	# int
301     movq    [rsp + #8], R8	# spill
        nop 	# 1 bytes pad for loops and calls
307     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:29 (line 202) L[0]=rsp + #48 L[1]=_ L[2]=#Ptr0x00007fafd1fa9c50 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=RBP L[6]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [48]=Oop [0]=Oop [8]=Oop off=780/0x30c}
30c     stop	# ShouldNotReachHere

320     B28: #	out( N1 ) <- in( B4 )  Freq: 1e-35
320     movl    RSI, #-34	# int
325     movq    RBP, RDI	# spill
328     movq    [rsp + #48], R9	# spill
        nop 	# 2 bytes pad for loops and calls
32f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:1 L[0]=_ L[1]=_ L[2]=RBP STK[0]=rsp + #48
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [48]=Oop off=820/0x334}
334     stop	# ShouldNotReachHere

348     B29: #	out( N1 ) <- in( B6 )  Freq: 1e-35
348     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
34f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:5 L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #48 STK[1]=RBP
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [48]=Oop off=852/0x354}
354     stop	# ShouldNotReachHere

368     B30: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
368     movl    RSI, #-10	# int
36d     movq    RBP, R9	# spill
370     movq    [rsp + #48], RDI	# spill
        nop 	# 2 bytes pad for loops and calls
377     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #48
        # OopMap {rbp=Oop [48]=Oop off=892/0x37c}
37c     stop	# ShouldNotReachHere

390     B31: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
390     movl    RSI, #-12	# int
395     movq    RBP, RDI	# spill
        nop 	# 3 bytes pad for loops and calls
39b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:1 L[0]=_ L[1]=_ L[2]=RBP STK[0]=#NULL
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop off=928/0x3a0}
3a0     stop	# ShouldNotReachHere

3b4     B32: #	out( N1 ) <- in( B5 )  Freq: 1.01328e-06
3b4     movl    RSI, #-12	# int
3b9     movq    RBP, R9	# spill
        nop 	# 3 bytes pad for loops and calls
3bf     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:5 L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP STK[1]=#NULL
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop off=964/0x3c4}
3c4     stop	# ShouldNotReachHere

3d8     B33: #	out( N1 ) <- in( B9 )  Freq: 1.01327e-06
3d8     movl    RSI, #-12	# int
        nop 	# 2 bytes pad for loops and calls
3df     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=rsp + #48 L[1]=RBP L[2]=#Ptr0x00007fafd1fa9c50 L[3]=rsp + #0 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [48]=Oop [0]=Oop off=996/0x3e4}
3e4     stop	# ShouldNotReachHere

3f8     B34: #	out( N1 ) <- in( B11 )  Freq: 1.01327e-06
3f8     movl    RSI, #-12	# int
3fd     movq    RBP, [rsp + #48]	# spill
402     pushq   [rsp + #0]	# 64-bit mem-mem spill
	popq    [rsp + #48]
40b     movq    [rsp + #0], R8	# spill
40f     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=RBP L[1]=_ L[2]=#Ptr0x00007fafd1fa9c50 L[3]=rsp + #48 L[4]=rsp + #0 L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # jdk.internal.vm.vector.VectorSupport::binaryOp @ bci:30 (line 244) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [48]=Oop [0]=Oop off=1044/0x414}
414     stop	# ShouldNotReachHere

428     B35: #	out( B37 ) <- in( B20 )  Freq: 1.00016e-09
428     # exception oop is in rax; no code emitted
428     movq    RSI, RAX	# spill
42b     jmp,s   B37

42d     B36: #	out( B37 ) <- in( B22 )  Freq: 1.00015e-09
42d     # exception oop is in rax; no code emitted
42d     movq    RSI, RAX	# spill

430     B37: #	out( N1 ) <- in( B35 B36 )  Freq: 2.00032e-09
430     addq    rsp, 32	# Destroy frame
	popq    rbp

435     jmp     rethrow_stub

--------------------------------------------------------------------------------
    741  124    b        jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply (12 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 124 ------------------------
{method}
 - this oop:          0x000000011594a7e8
 - method holder:     'jdk/incubator/vector/IntVector$$Lambda$29+0x0000000801053740'
 - constants:         0x000000011594a5a0 constant pool [21] {0x000000011594a5a0} for 'jdk/incubator/vector/IntVector$$Lambda$29+0x0000000801053740' cache=0x000000011594a878
 - access:            0x81000001  public 
 - name:              'apply'
 - signature:         '(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;'
 - max stack:         3
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044c80: 0xbbb00000 i2c: 0x000000010effa760 c2i: 0x000000010effa84c c2iUV: 0x000000010effa812 c2iNCI: 0x000000010effa889
 - compiled entry     0x000000010effa84c
 - code size:         12
 - code start:        0x000000011594a7d8
 - code end (excl):   0x000000011594a7e4
 - method data:       0x000000011594e538
 - checked ex length: 0
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 124 -----------------------
#
#  java/lang/Object * ( jdk/incubator/vector/IntVector$$Lambda$29+0x0000000801053740:NotNull:exact *, java/lang/Object *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector$$Lambda$29+0x0000000801053740:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx:rcx   : parm 2: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N396: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B27 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (824 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
030     NullCheck RDX

030     B2: #	out( B25 B3 ) <- in( B1 )  Freq: 0.999999
030     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd21b1630:Constant:exact *	# compressed klass ptr
037     jne,u   B25  P=0.000000 C=-1.000000

03d     B3: #	out( B28 B4 ) <- in( B2 )  Freq: 0.999999
03d     # checkcastPP of RDX
03d     movq    [rsp + #0], RDX	# spill
041     movq    RBP, RCX	# spill
044     movl    R11, [RCX + #8 (8-bit)]	# compressed klass ptr
048     NullCheck RCX

048     B4: #	out( B26 B5 ) <- in( B3 )  Freq: 0.999998
048     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd21b1630:Constant:exact *	# compressed klass ptr
04f     jne,u   B26  P=0.000000 C=-1.000000

055     B5: #	out( B18 B6 ) <- in( B4 )  Freq: 0.999998
055     # checkcastPP of RBP
055     # TLS is in R15
055     movq    R11, [R15 + #328 (32-bit)]	# ptr
05c     movq    R10, R11	# spill
05f     addq    R10, #48	# ptr
063     # TLS is in R15
063     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
06a     jnb,u   B18  P=0.000100 C=-1.000000

070     B6: #	out( B7 ) <- in( B5 )  Freq: 0.999898
070     # TLS is in R15
070     movq    [R15 + #328 (32-bit)], R10	# ptr
077     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
07f     movq    [R11], #1	# long
086     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
08e     movl    [R11 + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
096     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09e     movl    [R11 + #12 (8-bit)], #8	# int
0a6     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ae     movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
0b2     movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b6     movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
0ba     movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)

0be     B7: #	out( B29 B8 ) <- in( B19 B6 )  Freq: 0.999998
0be     
0be     MEMBAR-storestore (empty encoding)
0be     # checkcastPP of R11
0be     movq    [rsp + #8], R11	# spill
0c3     
0c3     MEMBAR-acquire ! (empty encoding)
0c3     movq    R10, [rsp + #0]	# spill
0c7     # checkcastPP of R10
0c7     movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0cb     movl    R10, [R12 + R11 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0d0     NullCheck R11

0d0     B8: #	out( B22 B9 ) <- in( B7 )  Freq: 0.999997
0d0     cmpl    R10, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0d7     jne,u   B22  P=0.000001 C=-1.000000

0dd     B9: #	out( B30 B10 ) <- in( B8 )  Freq: 0.999996
0dd     
0dd     MEMBAR-acquire ! (empty encoding)
0dd     # checkcastPP of RBP
0dd     movl    R10, [RBP + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0e1     decode_heap_oop_not_null R8,R11
0e5     # checkcastPP of R8
0e5     movl    R11, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0ea     NullCheck R10

0ea     B10: #	out( B23 B11 ) <- in( B9 )  Freq: 0.999995
0ea     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0f1     jne,u   B23  P=0.000001 C=-1.000000

0f7     B11: #	out( B24 B12 ) <- in( B10 )  Freq: 0.999994
0f7     movl    R11, [R8 + #12 (8-bit)]	# range
0fb     decode_heap_oop_not_null RBP,R10
0ff     # checkcastPP of RBP
        nop 	# 1 bytes pad for loops and calls
100     testl   R11, R11	# unsigned
103     jbe,u   B24  P=0.000001 C=-1.000000

109     B12: #	out( B24 B13 ) <- in( B11 )  Freq: 0.999993
109     cmpl    R11, #7	# unsigned
10d     jbe,u   B24  P=0.000001 C=-1.000000

113     B13: #	out( B24 B14 ) <- in( B12 )  Freq: 0.999992
113     movl    R11, [RBP + #12 (8-bit)]	# range
117     testl   R11, R11	# unsigned
        nop 	# 6 bytes pad for loops and calls
120     jbe,u   B24  P=0.000001 C=-1.000000

126     B14: #	out( B24 B15 ) <- in( B13 )  Freq: 0.999991
126     cmpl    R11, #7	# unsigned
12a     jbe,u   B24  P=0.000001 C=-1.000000

130     B15: #	out( B20 B16 ) <- in( B14 )  Freq: 0.99999
130     # TLS is in R15
130     movq    RAX, [R15 + #328 (32-bit)]	# ptr
137     movl    R10, [RBP + #16 (8-bit)]	# int
13b     addl    R10, [R8 + #16 (8-bit)]	# int
13f     movq    R11, [rsp + #8]	# spill
144     movl    [R11 + #16 (8-bit)], R10	# int
148     movq    R9, RAX	# spill
14b     addq    R9, #16	# ptr
14f     movl    R11, [R8 + #20 (8-bit)]	# int
153     addl    R11, [RBP + #20 (8-bit)]	# int
157     movq    R10, [rsp + #8]	# spill
15c     movl    [R10 + #20 (8-bit)], R11	# int
160     movl    R11, [R8 + #24 (8-bit)]	# int
164     addl    R11, [RBP + #24 (8-bit)]	# int
168     movl    [R10 + #24 (8-bit)], R11	# int
16c     movl    R11, [R8 + #28 (8-bit)]	# int
170     addl    R11, [RBP + #28 (8-bit)]	# int
174     movl    [R10 + #28 (8-bit)], R11	# int
178     movl    R11, [R8 + #32 (8-bit)]	# int
17c     addl    R11, [RBP + #32 (8-bit)]	# int
180     movl    [R10 + #32 (8-bit)], R11	# int
184     movl    R11, [R8 + #36 (8-bit)]	# int
188     addl    R11, [RBP + #36 (8-bit)]	# int
18c     movl    [R10 + #36 (8-bit)], R11	# int
190     movl    R11, [RBP + #40 (8-bit)]	# int
194     addl    R11, [R8 + #40 (8-bit)]	# int
198     movl    [R10 + #40 (8-bit)], R11	# int
19c     movl    R11, [RBP + #44 (8-bit)]	# int
1a0     addl    R11, [R8 + #44 (8-bit)]	# int
1a4     movl    [R10 + #44 (8-bit)], R11	# int
1a8     # TLS is in R15
1a8     cmpq    R9, [R15 + #344 (32-bit)]	# raw ptr
1af     jnb,u   B20  P=0.000100 C=-1.000000

1b5     B16: #	out( B17 ) <- in( B15 )  Freq: 0.99989
1b5     # TLS is in R15
1b5     movq    [R15 + #328 (32-bit)], R9	# ptr
1bc     PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1c4     movq    [RAX], #1	# long
1cb     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd21b1630:Constant:exact *	# compressed klass ptr

1d2     B17: #	out( N396 ) <- in( B21 B16 )  Freq: 0.99999
1d2     movq    R10, [rsp + #8]	# spill
1d7     encode_heap_oop_not_null R10,R10
21d     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
221     
221     # checkcastPP of RAX
221     MEMBAR-release ! (empty encoding)
221     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

233     ret

234     B18: #	out( B31 B19 ) <- in( B5 )  Freq: 0.000100016
234     movl    RDX, #8	# int
239     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
243     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:4 (line 199) L[0]=rsp + #0 L[1]=RBP L[2]=#Ptr0x00007fafd21b71b0 L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop off=584/0x248}

248     B19: #	out( B7 ) <- in( B18 )  Freq: 0.000100014
        # Block is sole successor of call
248     movq    R11, RAX	# spill
24b     jmp     B7

250     B20: #	out( B32 B21 ) <- in( B15 )  Freq: 0.000100016
250     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd21b1630:Constant:exact *	# ptr
25a     movq    RBP, R10	# spill
        nop 	# 2 bytes pad for loops and calls
25f     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:62 (line 205) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop off=612/0x264}

264     B21: #	out( B17 ) <- in( B20 )  Freq: 0.000100014
        # Block is sole successor of call
264     jmp     B17

269     B22: #	out( N396 ) <- in( B8 )  Freq: 9.99997e-07
269     movl    RSI, #-34	# int
26e     movl    RBP, R11	# spill
        nop 	# 2 bytes pad for loops and calls
273     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop off=632/0x278}
278     stop	# ShouldNotReachHere

28c     B23: #	out( N396 ) <- in( B10 )  Freq: 9.99995e-07
28c     movl    RSI, #-34	# int
291     movl    RBP, R10	# spill
        nop 	# 3 bytes pad for loops and calls
297     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop off=668/0x29c}
29c     stop	# ShouldNotReachHere

2b0     B24: #	out( N396 ) <- in( B13 B11 B12 B14 )  Freq: 3.99997e-06
2b0     movl    RSI, #-138	# int
2b5     movq    [rsp + #16], R8	# spill
        nop 	# 1 bytes pad for loops and calls
2bb     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:29 (line 202) L[0]=rsp + #0 L[1]=_ L[2]=#Ptr0x00007fafd21b71b0 L[3]=rsp + #8 L[4]=rsp + #16 L[5]=RBP L[6]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop off=704/0x2c0}
2c0     stop	# ShouldNotReachHere

2d4     B25: #	out( N396 ) <- in( B2 )  Freq: 1e-35
2d4     movl    RSI, #-34	# int
2d9     movq    RBP, RCX	# spill
2dc     movq    [rsp + #0], RDX	# spill
        nop 	# 3 bytes pad for loops and calls
2e3     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:1 L[0]=_ L[1]=_ L[2]=RBP STK[0]=rsp + #0
        # OopMap {rbp=Oop [0]=Oop off=744/0x2e8}
2e8     stop	# ShouldNotReachHere

2fc     B26: #	out( N396 ) <- in( B4 )  Freq: 1e-35
2fc     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
303     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:5 L[0]=_ L[1]=_ L[2]=_ STK[0]=rsp + #0 STK[1]=RBP
        # OopMap {rbp=Oop [0]=Oop off=776/0x308}
308     stop	# ShouldNotReachHere

31c     B27: #	out( N396 ) <- in( B1 )  Freq: 1.01328e-06
31c     movl    RSI, #-12	# int
321     movq    RBP, RCX	# spill
        nop 	# 3 bytes pad for loops and calls
327     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:1 L[0]=_ L[1]=_ L[2]=RBP STK[0]=#NULL
        # OopMap {rbp=Oop off=812/0x32c}
32c     stop	# ShouldNotReachHere

340     B28: #	out( N396 ) <- in( B3 )  Freq: 1.01328e-06
340     movl    RSI, #-12	# int
345     movq    RBP, RDX	# spill
        nop 	# 3 bytes pad for loops and calls
34b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:5 L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP STK[1]=#NULL
        # OopMap {rbp=Oop off=848/0x350}
350     stop	# ShouldNotReachHere

364     B29: #	out( N396 ) <- in( B7 )  Freq: 1.01328e-06
364     movl    RSI, #-12	# int
        nop 	# 2 bytes pad for loops and calls
36b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=rsp + #0 L[1]=RBP L[2]=#Ptr0x00007fafd21b71b0 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=880/0x370}
370     stop	# ShouldNotReachHere

384     B30: #	out( N396 ) <- in( B9 )  Freq: 1.01327e-06
384     movl    RSI, #-12	# int
389     movq    RBP, [rsp + #0]	# spill
38d     pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #0]
396     movq    [rsp + #8], R8	# spill
39b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=RBP L[1]=_ L[2]=#Ptr0x00007fafd21b71b0 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector$$Lambda$29/0x0000000801053740::apply @ bci:8 L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=928/0x3a0}
3a0     stop	# ShouldNotReachHere

3b4     B31: #	out( B33 ) <- in( B18 )  Freq: 1.00016e-09
3b4     # exception oop is in rax; no code emitted
3b4     movq    RSI, RAX	# spill
3b7     jmp,s   B33

3b9     B32: #	out( B33 ) <- in( B20 )  Freq: 1.00016e-09
3b9     # exception oop is in rax; no code emitted
3b9     movq    RSI, RAX	# spill

3bc     B33: #	out( N396 ) <- in( B31 B32 )  Freq: 2.00032e-09
3bc     addq    rsp, 48	# Destroy frame
	popq    rbp

3c1     jmp     rethrow_stub

--------------------------------------------------------------------------------
    756  125    b        jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 (11 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 125 ------------------------
{method}
 - this oop:          0x000000011585a3d0
 - method holder:     'jdk/incubator/vector/IntVector'
 - constants:         0x00000001158426a8 constant pool [2091]/operands[740] {0x00000001158426a8} for 'jdk/incubator/vector/IntVector' cache=0x00000001158615a8
 - access:            0x8100100a  private static synthetic 
 - name:              'lambda$lanewiseTemplate$8'
 - signature:         '(Ljdk/incubator/vector/IntVector;Ljdk/incubator/vector/IntVector;)Ljdk/incubator/vector/IntVector;'
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044cd0: 0xbb000000 i2c: 0x000000010effa3e0 c2i: 0x000000010effa4c8 c2iUV: 0x000000010effa48e c2iNCI: 0x000000010effa505
 - compiled entry     0x000000010effa4c8
 - code size:         11
 - code start:        0x000000011585a3a0
 - code end (excl):   0x000000011585a3ab
 - method data:       0x000000011594e768
 - checked ex length: 0
 - linenumber start:  0x000000011585a3ab
 - localvar length:   2
 - localvar start:    0x000000011585a3b6

------------------------ OptoAssembly for Compile_id = 125 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/IntVector *, jdk/incubator/vector/IntVector * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/IntVector *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/IntVector *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B27 B22 B28 B26 B17 B25 B29 B23 B33 B24 B30 )  Freq: 1

000     B1: #	out( B27 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (712 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c     movq    R10, RSI	# spill
00f     movl    R11, [RSI + #8 (8-bit)]	# compressed klass ptr
013     NullCheck RSI

013     B2: #	out( B22 B3 ) <- in( B1 )  Freq: 0.999999
        nop 	# 13 bytes pad for loops and calls
020     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23da790:Constant:exact *	# compressed klass ptr
027     jne,u   B22  P=0.000001 C=-1.000000

02d     B3: #	out( B28 B4 ) <- in( B2 )  Freq: 0.999998
02d     # checkcastPP of R10
02d     movq    [rsp + #0], R10	# spill
031     movq    RBP, RDX	# spill
034     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
038     NullCheck RDX

038     B4: #	out( B26 B5 ) <- in( B3 )  Freq: 0.999997
        nop 	# 8 bytes pad for loops and calls
040     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23da790:Constant:exact *	# compressed klass ptr
047     jne,u   B26  P=0.000000 C=-1.000000

04d     B5: #	out( B18 B6 ) <- in( B4 )  Freq: 0.999997
04d     # checkcastPP of RBP
04d     # TLS is in R15
04d     movq    R11, [R15 + #328 (32-bit)]	# ptr
054     movq    R10, R11	# spill
057     addq    R10, #48	# ptr
05b     # TLS is in R15
        nop 	# 5 bytes pad for loops and calls
060     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
067     jnb,u   B18  P=0.000100 C=-1.000000

06d     B6: #	out( B7 ) <- in( B5 )  Freq: 0.999897
06d     # TLS is in R15
06d     movq    [R15 + #328 (32-bit)], R10	# ptr
074     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
07c     movq    [R11], #1	# long
083     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
08b     movl    [R11 + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
093     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09b     movl    [R11 + #12 (8-bit)], #8	# int
0a3     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ab     movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
0af     movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b3     movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
0b7     movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)

0bb     B7: #	out( B29 B8 ) <- in( B19 B6 )  Freq: 0.999997
0bb     
0bb     MEMBAR-storestore (empty encoding)
0bb     # checkcastPP of R11
0bb     movq    [rsp + #8], R11	# spill
0c0     
0c0     MEMBAR-acquire ! (empty encoding)
0c0     movq    R10, [rsp + #0]	# spill
0c4     # checkcastPP of R10
0c4     movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0c8     movl    R10, [R12 + R11 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0cd     NullCheck R11

0cd     B8: #	out( B23 B9 ) <- in( B7 )  Freq: 0.999996
0cd     cmpl    R10, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0d4     jne,u   B23  P=0.000001 C=-1.000000

0da     B9: #	out( B30 B10 ) <- in( B8 )  Freq: 0.999995
0da     
0da     MEMBAR-acquire ! (empty encoding)
0da     # checkcastPP of RBP
0da     movl    R10, [RBP + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0de     decode_heap_oop_not_null R8,R11
0e2     # checkcastPP of R8
0e2     movl    R11, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0e7     NullCheck R10

0e7     B10: #	out( B24 B11 ) <- in( B9 )  Freq: 0.999994
0e7     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0ee     jne,u   B24  P=0.000001 C=-1.000000

0f4     B11: #	out( B25 B12 ) <- in( B10 )  Freq: 0.999993
0f4     movl    R11, [R8 + #12 (8-bit)]	# range
0f8     decode_heap_oop_not_null RBP,R10
0fc     # checkcastPP of RBP
        nop 	# 4 bytes pad for loops and calls
100     testl   R11, R11	# unsigned
103     jbe,u   B25  P=0.000001 C=-1.000000

109     B12: #	out( B25 B13 ) <- in( B11 )  Freq: 0.999992
109     cmpl    R11, #7	# unsigned
10d     jbe,u   B25  P=0.000001 C=-1.000000

113     B13: #	out( B25 B14 ) <- in( B12 )  Freq: 0.999991
113     movl    R11, [RBP + #12 (8-bit)]	# range
117     testl   R11, R11	# unsigned
        nop 	# 6 bytes pad for loops and calls
120     jbe,u   B25  P=0.000001 C=-1.000000

126     B14: #	out( B25 B15 ) <- in( B13 )  Freq: 0.99999
126     cmpl    R11, #7	# unsigned
12a     jbe,u   B25  P=0.000001 C=-1.000000

130     B15: #	out( B20 B16 ) <- in( B14 )  Freq: 0.999989
130     # TLS is in R15
130     movq    RAX, [R15 + #328 (32-bit)]	# ptr
137     movl    R10, [RBP + #16 (8-bit)]	# int
13b     addl    R10, [R8 + #16 (8-bit)]	# int
13f     movq    R11, [rsp + #8]	# spill
144     movl    [R11 + #16 (8-bit)], R10	# int
148     movq    R9, RAX	# spill
14b     addq    R9, #16	# ptr
14f     movl    R11, [R8 + #20 (8-bit)]	# int
153     addl    R11, [RBP + #20 (8-bit)]	# int
157     movq    R10, [rsp + #8]	# spill
15c     movl    [R10 + #20 (8-bit)], R11	# int
160     movl    R11, [R8 + #24 (8-bit)]	# int
164     addl    R11, [RBP + #24 (8-bit)]	# int
168     movl    [R10 + #24 (8-bit)], R11	# int
16c     movl    R11, [R8 + #28 (8-bit)]	# int
170     addl    R11, [RBP + #28 (8-bit)]	# int
174     movl    [R10 + #28 (8-bit)], R11	# int
178     movl    R11, [R8 + #32 (8-bit)]	# int
17c     addl    R11, [RBP + #32 (8-bit)]	# int
180     movl    [R10 + #32 (8-bit)], R11	# int
184     movl    R11, [R8 + #36 (8-bit)]	# int
188     addl    R11, [RBP + #36 (8-bit)]	# int
18c     movl    [R10 + #36 (8-bit)], R11	# int
190     movl    R11, [RBP + #40 (8-bit)]	# int
194     addl    R11, [R8 + #40 (8-bit)]	# int
198     movl    [R10 + #40 (8-bit)], R11	# int
19c     movl    R11, [RBP + #44 (8-bit)]	# int
1a0     addl    R11, [R8 + #44 (8-bit)]	# int
1a4     movl    [R10 + #44 (8-bit)], R11	# int
1a8     # TLS is in R15
1a8     cmpq    R9, [R15 + #344 (32-bit)]	# raw ptr
1af     jnb,u   B20  P=0.000100 C=-1.000000

1b5     B16: #	out( B17 ) <- in( B15 )  Freq: 0.999889
1b5     # TLS is in R15
1b5     movq    [R15 + #328 (32-bit)], R9	# ptr
1bc     PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1c4     movq    [RAX], #1	# long
1cb     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23da790:Constant:exact *	# compressed klass ptr

1d2     B17: #	out( N1 ) <- in( B21 B16 )  Freq: 0.999989
1d2     movq    R10, [rsp + #8]	# spill
1d7     encode_heap_oop_not_null R10,R10
21d     movl    [RAX + #12 (8-bit)], R10	# compressed ptr
221     
221     # checkcastPP of RAX
221     MEMBAR-release ! (empty encoding)
221     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

233     ret

234     B18: #	out( B31 B19 ) <- in( B5 )  Freq: 0.000100016
234     movl    RDX, #8	# int
239     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
243     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:4 (line 199) L[0]=rsp + #0 L[1]=RBP L[2]=#Ptr0x00007fafd23def60 L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop off=584/0x248}

248     B19: #	out( B7 ) <- in( B18 )  Freq: 0.000100014
        # Block is sole successor of call
248     movq    R11, RAX	# spill
24b     jmp     B7

250     B20: #	out( B32 B21 ) <- in( B15 )  Freq: 0.000100015
250     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd23da790:Constant:exact *	# ptr
25a     movq    RBP, R10	# spill
        nop 	# 2 bytes pad for loops and calls
25f     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:62 (line 205) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [8]=Oop off=612/0x264}

264     B21: #	out( B17 ) <- in( B20 )  Freq: 0.000100013
        # Block is sole successor of call
264     jmp     B17

269     B22: #	out( N1 ) <- in( B2 )  Freq: 9.99999e-07
269     movl    RSI, #-34	# int
26e     movq    RBP, R10	# spill
271     movq    [rsp + #0], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
277     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=#Ptr0x00007fafd23def60
        # OopMap {rbp=Oop [0]=Oop off=636/0x27c}
27c     stop	# ShouldNotReachHere

290     B23: #	out( N1 ) <- in( B8 )  Freq: 9.99996e-07
290     movl    RSI, #-34	# int
295     movl    RBP, R11	# spill
        nop 	# 3 bytes pad for loops and calls
29b     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop off=672/0x2a0}
2a0     stop	# ShouldNotReachHere

2b4     B24: #	out( N1 ) <- in( B10 )  Freq: 9.99994e-07
2b4     movl    RSI, #-34	# int
2b9     movl    RBP, R10	# spill
        nop 	# 3 bytes pad for loops and calls
2bf     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop off=708/0x2c4}
2c4     stop	# ShouldNotReachHere

2d8     B25: #	out( N1 ) <- in( B13 B11 B12 B14 )  Freq: 3.99997e-06
2d8     movl    RSI, #-138	# int
2dd     movq    [rsp + #16], R8	# spill
        nop 	# 1 bytes pad for loops and calls
2e3     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:29 (line 202) L[0]=rsp + #0 L[1]=_ L[2]=#Ptr0x00007fafd23def60 L[3]=rsp + #8 L[4]=rsp + #16 L[5]=RBP L[6]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop off=744/0x2e8}
2e8     stop	# ShouldNotReachHere

2fc     B26: #	out( N1 ) <- in( B4 )  Freq: 1e-35
2fc     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
303     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::bOp @ bci:2 (line 206) L[0]=_ L[1]=_ L[2]=#Ptr0x00007fafd23def60 STK[0]=rsp + #0 STK[1]=RBP
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop off=776/0x308}
308     stop	# ShouldNotReachHere

31c     B27: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
31c     movl    RSI, #-10	# int
321     movq    RBP, RDX	# spill
        nop 	# 3 bytes pad for loops and calls
327     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP STK[2]=#Ptr0x00007fafd23def60
        # OopMap {rbp=Oop off=812/0x32c}
32c     stop	# ShouldNotReachHere

340     B28: #	out( N1 ) <- in( B3 )  Freq: 1.01328e-06
340     movl    RSI, #-12	# int
345     movq    RBP, R10	# spill
        nop 	# 3 bytes pad for loops and calls
34b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::bOp @ bci:2 (line 206) L[0]=_ L[1]=_ L[2]=#Ptr0x00007fafd23def60 STK[0]=RBP STK[1]=#NULL
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=Oop off=848/0x350}
350     stop	# ShouldNotReachHere

364     B29: #	out( N1 ) <- in( B7 )  Freq: 1.01328e-06
364     movl    RSI, #-12	# int
        nop 	# 2 bytes pad for loops and calls
36b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=rsp + #0 L[1]=RBP L[2]=#Ptr0x00007fafd23def60 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=880/0x370}
370     stop	# ShouldNotReachHere

384     B30: #	out( N1 ) <- in( B9 )  Freq: 1.01327e-06
384     movl    RSI, #-12	# int
389     movq    RBP, [rsp + #0]	# spill
38d     pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #0]
396     movq    [rsp + #8], R8	# spill
39b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=RBP L[1]=_ L[2]=#Ptr0x00007fafd23def60 L[3]=rsp + #0 L[4]=rsp + #8 L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.IntVector::lambda$lanewiseTemplate$8 @ bci:7 (line 639) L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop off=928/0x3a0}
3a0     stop	# ShouldNotReachHere

3b4     B31: #	out( B33 ) <- in( B18 )  Freq: 1.00016e-09
3b4     # exception oop is in rax; no code emitted
3b4     movq    RSI, RAX	# spill
3b7     jmp,s   B33

3b9     B32: #	out( B33 ) <- in( B20 )  Freq: 1.00015e-09
3b9     # exception oop is in rax; no code emitted
3b9     movq    RSI, RAX	# spill

3bc     B33: #	out( N1 ) <- in( B31 B32 )  Freq: 2.00032e-09
3bc     addq    rsp, 48	# Destroy frame
	popq    rbp

3c1     jmp     rethrow_stub

--------------------------------------------------------------------------------
    772  126    b        jdk.incubator.vector.Int256Vector::bOp (7 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 126 ------------------------
{method}
 - this oop:          0x00000001158a4040
 - method holder:     'jdk/incubator/vector/Int256Vector'
 - constants:         0x000000011589d058 constant pool [746]/operands[52] {0x000000011589d058} for 'jdk/incubator/vector/Int256Vector' cache=0x00000001158a91c8
 - access:            0x81001040  volatile synthetic 
 - name:              'bOp'
 - signature:         '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/IntVector$FBinOp;)Ljdk/incubator/vector/IntVector;'
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      130
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044c80: 0xbbb00000 i2c: 0x000000010effa760 c2i: 0x000000010effa84c c2iUV: 0x000000010effa812 c2iNCI: 0x000000010effa889
 - compiled entry     0x000000010effa84c
 - code size:         7
 - code start:        0x00000001158a4018
 - code end (excl):   0x00000001158a401f
 - method data:       0x000000011594e968
 - checked ex length: 0
 - linenumber start:  0x00000001158a401f
 - localvar length:   1
 - localvar start:    0x00000001158a402a

------------------------ OptoAssembly for Compile_id = 126 -----------------------
#
#  jdk/incubator/vector/IntVector * ( jdk/incubator/vector/Int256Vector:NotNull:exact *, jdk/incubator/vector/Vector *, jdk/incubator/vector/IntVector$FBinOp * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/Int256Vector:NotNull:exact *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/Vector *
#r010 rcx:rcx   : parm 2: jdk/incubator/vector/IntVector$FBinOp *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N393: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B30 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (608 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    [rsp + #16], RSI	# spill
031     movq    [rsp + #8], RCX	# spill
036     movq    RBP, RDX	# spill
        nop 	# 7 bytes pad for loops and calls
040     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
044     NullCheck RDX

044     B2: #	out( B29 B3 ) <- in( B1 )  Freq: 0.999999
044     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1ff0a20:Constant:exact *	# compressed klass ptr
04b     jne,u   B29  P=0.000000 C=-1.000000

051     B3: #	out( B18 B4 ) <- in( B2 )  Freq: 0.999999
051     # checkcastPP of RBP
051     # TLS is in R15
051     movq    R11, [R15 + #328 (32-bit)]	# ptr
058     movq    R10, R11	# spill
05b     addq    R10, #48	# ptr
05f     # TLS is in R15
        nop 	# 1 bytes pad for loops and calls
060     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
067     jnb,u   B18  P=0.000100 C=-1.000000

06d     B4: #	out( B5 ) <- in( B3 )  Freq: 0.999899
06d     # TLS is in R15
06d     movq    [R15 + #328 (32-bit)], R10	# ptr
074     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
07c     movq    [R11], #1	# long
083     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
08b     movl    [R11 + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
093     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09b     movl    [R11 + #12 (8-bit)], #8	# int
0a3     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ab     movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
0af     movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b3     movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
0b7     movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)

0bb     B5: #	out( B31 B6 ) <- in( B19 B4 )  Freq: 0.999999
0bb     
0bb     MEMBAR-storestore (empty encoding)
0bb     # checkcastPP of R11
0bb     movq    [rsp + #24], R11	# spill
0c0     
0c0     MEMBAR-acquire ! (empty encoding)
0c0     movq    R10, [rsp + #16]	# spill
0c5     # checkcastPP of R10
0c5     movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0c9     movl    R11, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0ce     NullCheck R10

0ce     B6: #	out( B22 B7 ) <- in( B5 )  Freq: 0.999998
0ce     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0d5     jne,u   B22  P=0.000001 C=-1.000000

0db     B7: #	out( B32 B8 ) <- in( B6 )  Freq: 0.999997
0db     
0db     MEMBAR-acquire ! (empty encoding)
0db     # checkcastPP of RBP
0db     movl    R11, [RBP + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0df     decode_heap_oop_not_null R8,R10
0e3     # checkcastPP of R8
0e3     movl    R10, [R12 + R11 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0e8     NullCheck R11

0e8     B8: #	out( B23 B9 ) <- in( B7 )  Freq: 0.999996
0e8     cmpl    R10, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0ef     jne,u   B23  P=0.000001 C=-1.000000

0f5     B9: #	out( B24 B10 ) <- in( B8 )  Freq: 0.999995
0f5     movl    R10, [R8 + #12 (8-bit)]	# range
0f9     decode_heap_oop_not_null RBP,R11
0fd     # checkcastPP of RBP
        nop 	# 3 bytes pad for loops and calls
100     testl   R10, R10	# unsigned
103     jbe,u   B24  P=0.000001 C=-1.000000

109     B10: #	out( B26 B11 ) <- in( B9 )  Freq: 0.999994
109     cmpl    R10, #7	# unsigned
10d     jbe,u   B26  P=0.000001 C=-1.000000

113     B11: #	out( B27 B12 ) <- in( B10 )  Freq: 0.999993
113     movl    R10, [RBP + #12 (8-bit)]	# range
117     testl   R10, R10	# unsigned
        nop 	# 6 bytes pad for loops and calls
120     jbe,u   B27  P=0.000001 C=-1.000000

126     B12: #	out( B28 B13 ) <- in( B11 )  Freq: 0.999992
126     cmpl    R10, #7	# unsigned
12a     jbe,u   B28  P=0.000001 C=-1.000000

130     B13: #	out( B25 B14 ) <- in( B12 )  Freq: 0.999991
130     movq    R10, [rsp + #8]	# spill
135     movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
139     NullCheck R10

139     B14: #	out( B25 B15 ) <- in( B13 )  Freq: 0.99999
        nop 	# 7 bytes pad for loops and calls
140     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$30+0x0000000801053ba8: 0x00007fafd1ff7180:Constant:exact *	# compressed klass ptr
147     jne,u   B25  P=0.000001 C=-1.000000

14d     B15: #	out( B20 B16 ) <- in( B14 )  Freq: 0.999989
14d     # TLS is in R15
14d     movq    RAX, [R15 + #328 (32-bit)]	# ptr
154     movl    R11, [R8 + #16 (8-bit)]	# int
158     addl    R11, [RBP + #16 (8-bit)]	# int
15c     movq    R10, [rsp + #24]	# spill
161     movl    [R10 + #16 (8-bit)], R11	# int
165     movq    R9, RAX	# spill
168     addq    R9, #16	# ptr
16c     movl    R10, [RBP + #20 (8-bit)]	# int
170     addl    R10, [R8 + #20 (8-bit)]	# int
174     movq    R11, [rsp + #24]	# spill
179     movl    [R11 + #20 (8-bit)], R10	# int
17d     movl    R10, [RBP + #24 (8-bit)]	# int
181     addl    R10, [R8 + #24 (8-bit)]	# int
185     movl    [R11 + #24 (8-bit)], R10	# int
189     movl    R10, [RBP + #28 (8-bit)]	# int
18d     addl    R10, [R8 + #28 (8-bit)]	# int
191     movl    [R11 + #28 (8-bit)], R10	# int
195     movl    R10, [RBP + #32 (8-bit)]	# int
199     addl    R10, [R8 + #32 (8-bit)]	# int
19d     movl    [R11 + #32 (8-bit)], R10	# int
1a1     movl    R10, [RBP + #36 (8-bit)]	# int
1a5     addl    R10, [R8 + #36 (8-bit)]	# int
1a9     movl    [R11 + #36 (8-bit)], R10	# int
1ad     movl    R10, [RBP + #40 (8-bit)]	# int
1b1     addl    R10, [R8 + #40 (8-bit)]	# int
1b5     movl    [R11 + #40 (8-bit)], R10	# int
1b9     movl    R10, [RBP + #44 (8-bit)]	# int
1bd     addl    R10, [R8 + #44 (8-bit)]	# int
1c1     movl    [R11 + #44 (8-bit)], R10	# int
1c5     # TLS is in R15
1c5     cmpq    R9, [R15 + #344 (32-bit)]	# raw ptr
1cc     jnb,u   B20  P=0.000100 C=-1.000000

1d2     B16: #	out( B17 ) <- in( B15 )  Freq: 0.999889
1d2     # TLS is in R15
1d2     movq    [R15 + #328 (32-bit)], R9	# ptr
1d9     PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1e1     movq    [RAX], #1	# long
1e8     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1ff0a20:Constant:exact *	# compressed klass ptr

1ef     B17: #	out( N393 ) <- in( B21 B16 )  Freq: 0.999989
1ef     movq    R10, [rsp + #24]	# spill
1f4     encode_heap_oop_not_null R11,R10
23d     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
241     
241     # checkcastPP of RAX
241     MEMBAR-release ! (empty encoding)
241     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

253     ret

254     B18: #	out( B33 B19 ) <- in( B3 )  Freq: 0.000100016
254     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
25e     movl    RDX, #8	# int
263     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:4 (line 199) L[0]=rsp + #16 L[1]=RBP L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=616/0x268}

268     B19: #	out( B5 ) <- in( B18 )  Freq: 0.000100014
        # Block is sole successor of call
268     movq    R11, RAX	# spill
26b     jmp     B5

270     B20: #	out( B34 B21 ) <- in( B15 )  Freq: 0.000100015
270     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd1ff0a20:Constant:exact *	# ptr
27a     movq    RBP, R11	# spill
        nop 	# 2 bytes pad for loops and calls
27f     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:62 (line 205) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [24]=Oop off=644/0x284}

284     B21: #	out( B17 ) <- in( B20 )  Freq: 0.000100013
        # Block is sole successor of call
284     jmp     B17

289     B22: #	out( N393 ) <- in( B6 )  Freq: 9.99998e-07
289     movl    RSI, #-34	# int
28e     movl    RBP, R10	# spill
        nop 	# 2 bytes pad for loops and calls
293     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop off=664/0x298}
298     stop	# ShouldNotReachHere

2ac     B23: #	out( N393 ) <- in( B8 )  Freq: 9.99996e-07
2ac     movl    RSI, #-34	# int
2b1     movl    RBP, R11	# spill
        nop 	# 3 bytes pad for loops and calls
2b7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop off=700/0x2bc}
2bc     stop	# ShouldNotReachHere

2d0     B24: #	out( B25 ) <- in( B9 )  Freq: 9.99995e-07
2d0     movq    R10, [rsp + #8]	# spill

2d5     B25: #	out( N393 ) <- in( B28 B24 B26 B14 B13 B27 )  Freq: 6.01323e-06
2d5     movl    RSI, #-138	# int
2da     movq    R11, [rsp + #16]	# spill
2df     movq    [rsp + #0], R11	# spill
2e3     movq    [rsp + #8], R10	# spill
2e8     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
2f2     movq    [rsp + #24], R8	# spill
2f7     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:29 (line 202) L[0]=rsp + #0 L[1]=_ L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=RBP L[6]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop [24]=Oop off=764/0x2fc}
2fc     stop	# ShouldNotReachHere

310     B26: #	out( B25 ) <- in( B10 )  Freq: 9.99994e-07
310     movq    R10, [rsp + #8]	# spill
315     jmp,s   B25

317     B27: #	out( B25 ) <- in( B11 )  Freq: 9.99993e-07
317     movq    R10, [rsp + #8]	# spill
31c     jmp,s   B25

31e     B28: #	out( B25 ) <- in( B12 )  Freq: 9.99992e-07
31e     movq    R10, [rsp + #8]	# spill
323     jmp,s   B25

325     B29: #	out( N393 ) <- in( B2 )  Freq: 1e-35
325     movl    RSI, #-34	# int
32a     movq    [rsp + #0], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
32f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::bOp @ bci:2 (line 206) L[0]=_ L[1]=_ L[2]=rsp + #0 STK[0]=rsp + #16 STK[1]=RBP
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=820/0x334}
334     stop	# ShouldNotReachHere

348     B30: #	out( N393 ) <- in( B1 )  Freq: 1.01328e-06
348     movl    RSI, #-12	# int
34d     movq    RBP, RCX	# spill
        nop 	# 3 bytes pad for loops and calls
353     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::bOp @ bci:2 (line 206) L[0]=_ L[1]=_ L[2]=RBP STK[0]=rsp + #16 STK[1]=#NULL
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop off=856/0x358}
358     stop	# ShouldNotReachHere

36c     B31: #	out( N393 ) <- in( B5 )  Freq: 1.01328e-06
36c     movl    RSI, #-12	# int
371     movq    R10, [rsp + #16]	# spill
376     movq    [rsp + #0], R10	# spill
        nop 	# 1 bytes pad for loops and calls
37b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [24]=Oop off=896/0x380}
380     stop	# ShouldNotReachHere

394     B32: #	out( N393 ) <- in( B7 )  Freq: 1.01328e-06
394     movl    RSI, #-12	# int
399     movq    RBP, [rsp + #16]	# spill
39e     movq    R10, [rsp + #8]	# spill
3a3     movq    [rsp + #0], R10	# spill
3a7     movq    [rsp + #16], R8	# spill
        nop 	# 3 bytes pad for loops and calls
3af     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #16 L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:3 (line 41) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=948/0x3b4}
3b4     stop	# ShouldNotReachHere

3c8     B33: #	out( B35 ) <- in( B18 )  Freq: 1.00016e-09
3c8     # exception oop is in rax; no code emitted
3c8     movq    RSI, RAX	# spill
3cb     jmp,s   B35

3cd     B34: #	out( B35 ) <- in( B20 )  Freq: 1.00015e-09
3cd     # exception oop is in rax; no code emitted
3cd     movq    RSI, RAX	# spill

3d0     B35: #	out( N393 ) <- in( B33 B34 )  Freq: 2.00032e-09
3d0     addq    rsp, 48	# Destroy frame
	popq    rbp

3d5     jmp     rethrow_stub

--------------------------------------------------------------------------------
    787  127    b        jdk.incubator.vector.Int256Vector::bOp (13 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 127 ------------------------
{method}
 - this oop:          0x00000001158a01f8
 - method holder:     'jdk/incubator/vector/Int256Vector'
 - constants:         0x000000011589d058 constant pool [746]/operands[52] {0x000000011589d058} for 'jdk/incubator/vector/Int256Vector' cache=0x00000001158a91c8
 - access:            0x81000010  final 
 - name:              'bOp'
 - signature:         '(Ljdk/incubator/vector/Vector;Ljdk/incubator/vector/IntVector$FBinOp;)Ljdk/incubator/vector/Int256Vector;'
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf044c80: 0xbbb00000 i2c: 0x000000010effa760 c2i: 0x000000010effa84c c2iUV: 0x000000010effa812 c2iNCI: 0x000000010effa889
 - compiled entry     0x000000010effa84c
 - code size:         13
 - code start:        0x00000001158a01b0
 - code end (excl):   0x00000001158a01bd
 - method data:       0x000000011594eb50
 - checked ex length: 0
 - linenumber start:  0x00000001158a01bd
 - localvar length:   3
 - localvar start:    0x00000001158a01c8

------------------------ OptoAssembly for Compile_id = 127 -----------------------
#
#  jdk/incubator/vector/Int256Vector:exact * ( jdk/incubator/vector/Int256Vector:NotNull:exact *, jdk/incubator/vector/Vector *, jdk/incubator/vector/IntVector$FBinOp * )
#
#r018 rsi:rsi   : parm 0: jdk/incubator/vector/Int256Vector:NotNull:exact *
#r016 rdx:rdx   : parm 1: jdk/incubator/vector/Vector *
#r010 rcx:rcx   : parm 2: jdk/incubator/vector/IntVector$FBinOp *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N393: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B30 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (496 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    [rsp + #16], RSI	# spill
031     movq    [rsp + #8], RCX	# spill
036     movq    RBP, RDX	# spill
        nop 	# 7 bytes pad for loops and calls
040     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
044     NullCheck RDX

044     B2: #	out( B29 B3 ) <- in( B1 )  Freq: 0.999999
044     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2109a20:Constant:exact *	# compressed klass ptr
04b     jne,u   B29  P=0.000000 C=-1.000000

051     B3: #	out( B18 B4 ) <- in( B2 )  Freq: 0.999999
051     # checkcastPP of RBP
051     # TLS is in R15
051     movq    R11, [R15 + #328 (32-bit)]	# ptr
058     movq    R10, R11	# spill
05b     addq    R10, #48	# ptr
05f     # TLS is in R15
        nop 	# 1 bytes pad for loops and calls
060     cmpq    R10, [R15 + #344 (32-bit)]	# raw ptr
067     jnb,u   B18  P=0.000100 C=-1.000000

06d     B4: #	out( B5 ) <- in( B3 )  Freq: 0.999899
06d     # TLS is in R15
06d     movq    [R15 + #328 (32-bit)], R10	# ptr
074     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
07c     movq    [R11], #1	# long
083     PREFETCHW [R10 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
08b     movl    [R11 + #8 (8-bit)], narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
093     PREFETCHW [R10 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
09b     movl    [R11 + #12 (8-bit)], #8	# int
0a3     PREFETCHW [R10 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0ab     movq    [R11 + #16 (8-bit)], R12	# long (R12_heapbase==0)
0af     movq    [R11 + #24 (8-bit)], R12	# long (R12_heapbase==0)
0b3     movq    [R11 + #32 (8-bit)], R12	# long (R12_heapbase==0)
0b7     movq    [R11 + #40 (8-bit)], R12	# long (R12_heapbase==0)

0bb     B5: #	out( B31 B6 ) <- in( B19 B4 )  Freq: 0.999999
0bb     
0bb     MEMBAR-storestore (empty encoding)
0bb     # checkcastPP of R11
0bb     movq    [rsp + #24], R11	# spill
0c0     
0c0     MEMBAR-acquire ! (empty encoding)
0c0     movq    R10, [rsp + #16]	# spill
0c5     # checkcastPP of R10
0c5     movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0c9     movl    R11, [R12 + R10 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0ce     NullCheck R10

0ce     B6: #	out( B22 B7 ) <- in( B5 )  Freq: 0.999998
0ce     cmpl    R11, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0d5     jne,u   B22  P=0.000001 C=-1.000000

0db     B7: #	out( B32 B8 ) <- in( B6 )  Freq: 0.999997
0db     
0db     MEMBAR-acquire ! (empty encoding)
0db     # checkcastPP of RBP
0db     movl    R11, [RBP + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/vm/vector/VectorSupport$VectorPayload.payload (constant)
0df     decode_heap_oop_not_null R8,R10
0e3     # checkcastPP of R8
0e3     movl    R10, [R12 + R11 << 3 + #8] (compressed oop addressing)	# compressed klass ptr
0e8     NullCheck R11

0e8     B8: #	out( B23 B9 ) <- in( B7 )  Freq: 0.999996
0e8     cmpl    R10, narrowklass: precise klass [I: 0x00007fafd07a4160:Constant:exact *	# compressed klass ptr
0ef     jne,u   B23  P=0.000001 C=-1.000000

0f5     B9: #	out( B24 B10 ) <- in( B8 )  Freq: 0.999995
0f5     movl    R10, [R8 + #12 (8-bit)]	# range
0f9     decode_heap_oop_not_null RBP,R11
0fd     # checkcastPP of RBP
        nop 	# 3 bytes pad for loops and calls
100     testl   R10, R10	# unsigned
103     jbe,u   B24  P=0.000001 C=-1.000000

109     B10: #	out( B26 B11 ) <- in( B9 )  Freq: 0.999994
109     cmpl    R10, #7	# unsigned
10d     jbe,u   B26  P=0.000001 C=-1.000000

113     B11: #	out( B27 B12 ) <- in( B10 )  Freq: 0.999993
113     movl    R10, [RBP + #12 (8-bit)]	# range
117     testl   R10, R10	# unsigned
        nop 	# 6 bytes pad for loops and calls
120     jbe,u   B27  P=0.000001 C=-1.000000

126     B12: #	out( B28 B13 ) <- in( B11 )  Freq: 0.999992
126     cmpl    R10, #7	# unsigned
12a     jbe,u   B28  P=0.000001 C=-1.000000

130     B13: #	out( B25 B14 ) <- in( B12 )  Freq: 0.999991
130     movq    R10, [rsp + #8]	# spill
135     movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
139     NullCheck R10

139     B14: #	out( B25 B15 ) <- in( B13 )  Freq: 0.99999
        nop 	# 7 bytes pad for loops and calls
140     cmpl    R11, narrowklass: precise klass jdk/incubator/vector/IntVector$$Lambda$30+0x0000000801053ba8: 0x00007fafd210f0e0:Constant:exact *	# compressed klass ptr
147     jne,u   B25  P=0.000001 C=-1.000000

14d     B15: #	out( B20 B16 ) <- in( B14 )  Freq: 0.999989
14d     # TLS is in R15
14d     movq    RAX, [R15 + #328 (32-bit)]	# ptr
154     movl    R11, [R8 + #16 (8-bit)]	# int
158     addl    R11, [RBP + #16 (8-bit)]	# int
15c     movq    R10, [rsp + #24]	# spill
161     movl    [R10 + #16 (8-bit)], R11	# int
165     movq    R9, RAX	# spill
168     addq    R9, #16	# ptr
16c     movl    R10, [RBP + #20 (8-bit)]	# int
170     addl    R10, [R8 + #20 (8-bit)]	# int
174     movq    R11, [rsp + #24]	# spill
179     movl    [R11 + #20 (8-bit)], R10	# int
17d     movl    R10, [RBP + #24 (8-bit)]	# int
181     addl    R10, [R8 + #24 (8-bit)]	# int
185     movl    [R11 + #24 (8-bit)], R10	# int
189     movl    R10, [RBP + #28 (8-bit)]	# int
18d     addl    R10, [R8 + #28 (8-bit)]	# int
191     movl    [R11 + #28 (8-bit)], R10	# int
195     movl    R10, [RBP + #32 (8-bit)]	# int
199     addl    R10, [R8 + #32 (8-bit)]	# int
19d     movl    [R11 + #32 (8-bit)], R10	# int
1a1     movl    R10, [RBP + #36 (8-bit)]	# int
1a5     addl    R10, [R8 + #36 (8-bit)]	# int
1a9     movl    [R11 + #36 (8-bit)], R10	# int
1ad     movl    R10, [RBP + #40 (8-bit)]	# int
1b1     addl    R10, [R8 + #40 (8-bit)]	# int
1b5     movl    [R11 + #40 (8-bit)], R10	# int
1b9     movl    R10, [RBP + #44 (8-bit)]	# int
1bd     addl    R10, [R8 + #44 (8-bit)]	# int
1c1     movl    [R11 + #44 (8-bit)], R10	# int
1c5     # TLS is in R15
1c5     cmpq    R9, [R15 + #344 (32-bit)]	# raw ptr
1cc     jnb,u   B20  P=0.000100 C=-1.000000

1d2     B16: #	out( B17 ) <- in( B15 )  Freq: 0.999889
1d2     # TLS is in R15
1d2     movq    [R15 + #328 (32-bit)], R9	# ptr
1d9     PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1e1     movq    [RAX], #1	# long
1e8     movl    [RAX + #8 (8-bit)], narrowklass: precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2109a20:Constant:exact *	# compressed klass ptr

1ef     B17: #	out( N393 ) <- in( B21 B16 )  Freq: 0.999989
1ef     movq    R10, [rsp + #24]	# spill
1f4     encode_heap_oop_not_null R11,R10
23d     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
241     
241     # checkcastPP of RAX
241     MEMBAR-release ! (empty encoding)
241     addq    rsp, 48	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

253     ret

254     B18: #	out( B33 B19 ) <- in( B3 )  Freq: 0.000100016
254     movq    RSI, precise klass [I: 0x00007fafd07a4160:Constant:exact *	# ptr
25e     movl    RDX, #8	# int
263     call,static  wrapper for: _new_array_Java
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:4 (line 199) L[0]=rsp + #16 L[1]=RBP L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=616/0x268}

268     B19: #	out( B5 ) <- in( B18 )  Freq: 0.000100014
        # Block is sole successor of call
268     movq    R11, RAX	# spill
26b     jmp     B5

270     B20: #	out( B34 B21 ) <- in( B15 )  Freq: 0.000100015
270     movq    RSI, precise klass jdk/incubator/vector/Int256Vector: 0x00007fafd2109a20:Constant:exact *	# ptr
27a     movq    RBP, R11	# spill
        nop 	# 2 bytes pad for loops and calls
27f     call,static  wrapper for: _new_instance_Java
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:0 (line 171) L[0]=_ L[1]=RBP
        # jdk.incubator.vector.Int256Vector::vectorFactory @ bci:2 (line 41) L[0]=_ L[1]=_
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:62 (line 205) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [24]=Oop off=644/0x284}

284     B21: #	out( B17 ) <- in( B20 )  Freq: 0.000100013
        # Block is sole successor of call
284     jmp     B17

289     B22: #	out( N393 ) <- in( B6 )  Freq: 9.99998e-07
289     movl    RSI, #-34	# int
28e     movl    RBP, R10	# spill
        nop 	# 2 bytes pad for loops and calls
293     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop off=664/0x298}
298     stop	# ShouldNotReachHere

2ac     B23: #	out( N393 ) <- in( B8 )  Freq: 9.99996e-07
2ac     movl    RSI, #-34	# int
2b1     movl    RBP, R11	# spill
        nop 	# 3 bytes pad for loops and calls
2b7     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=RBP
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop off=700/0x2bc}
2bc     stop	# ShouldNotReachHere

2d0     B24: #	out( B25 ) <- in( B9 )  Freq: 9.99995e-07
2d0     movq    R10, [rsp + #8]	# spill

2d5     B25: #	out( N393 ) <- in( B28 B24 B26 B14 B13 B27 )  Freq: 6.01323e-06
2d5     movl    RSI, #-138	# int
2da     movq    R11, [rsp + #16]	# spill
2df     movq    [rsp + #0], R11	# spill
2e3     movq    [rsp + #8], R10	# spill
2e8     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
2f2     movq    [rsp + #24], R8	# spill
2f7     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:29 (line 202) L[0]=rsp + #0 L[1]=_ L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=RBP L[6]=#0 STK[0]=#0 STK[1]=#8
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop [24]=Oop off=764/0x2fc}
2fc     stop	# ShouldNotReachHere

310     B26: #	out( B25 ) <- in( B10 )  Freq: 9.99994e-07
310     movq    R10, [rsp + #8]	# spill
315     jmp,s   B25

317     B27: #	out( B25 ) <- in( B11 )  Freq: 9.99993e-07
317     movq    R10, [rsp + #8]	# spill
31c     jmp,s   B25

31e     B28: #	out( B25 ) <- in( B12 )  Freq: 9.99992e-07
31e     movq    R10, [rsp + #8]	# spill
323     jmp,s   B25

325     B29: #	out( N393 ) <- in( B2 )  Freq: 1e-35
325     movl    RSI, #-34	# int
32a     movq    [rsp + #0], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
32f     call,static  wrapper for: uncommon_trap(reason='class_check' action='maybe_recompile' debug_id='0')
        # jdk.incubator.vector.Int256Vector::bOp @ bci:2 (line 206) L[0]=_ L[1]=_ L[2]=rsp + #0 STK[0]=rsp + #16 STK[1]=RBP
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=820/0x334}
334     stop	# ShouldNotReachHere

348     B30: #	out( N393 ) <- in( B1 )  Freq: 1.01328e-06
348     movl    RSI, #-12	# int
34d     movq    RBP, RCX	# spill
        nop 	# 3 bytes pad for loops and calls
353     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::bOp @ bci:2 (line 206) L[0]=_ L[1]=_ L[2]=RBP STK[0]=rsp + #16 STK[1]=#NULL
        # OopMap {rbp=Oop [16]=Oop off=856/0x358}
358     stop	# ShouldNotReachHere

36c     B31: #	out( N393 ) <- in( B5 )  Freq: 1.01328e-06
36c     movl    RSI, #-12	# int
371     movq    R10, [rsp + #16]	# spill
376     movq    [rsp + #0], R10	# spill
        nop 	# 1 bytes pad for loops and calls
37b     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:8 (line 200) L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [24]=Oop off=896/0x380}
380     stop	# ShouldNotReachHere

394     B32: #	out( N393 ) <- in( B7 )  Freq: 1.01328e-06
394     movl    RSI, #-12	# int
399     movq    RBP, [rsp + #16]	# spill
39e     movq    R10, [rsp + #8]	# spill
3a3     movq    [rsp + #0], R10	# spill
3a7     movq    [rsp + #16], R8	# spill
        nop 	# 3 bytes pad for loops and calls
3af     call,static  wrapper for: uncommon_trap(reason='null_check' action='make_not_entrant' debug_id='0')
        # jdk.incubator.vector.Int256Vector::vec @ bci:4 (line 117) L[0]=_ STK[0]=#NULL
        # jdk.incubator.vector.IntVector::bOpTemplate @ bci:17 (line 201) L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #16 L[5]=_ L[6]=_
        # jdk.incubator.vector.Int256Vector::bOp @ bci:6 (line 206) L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop [24]=Oop off=948/0x3b4}
3b4     stop	# ShouldNotReachHere

3c8     B33: #	out( B35 ) <- in( B18 )  Freq: 1.00016e-09
3c8     # exception oop is in rax; no code emitted
3c8     movq    RSI, RAX	# spill
3cb     jmp,s   B35

3cd     B34: #	out( B35 ) <- in( B20 )  Freq: 1.00015e-09
3cd     # exception oop is in rax; no code emitted
3cd     movq    RSI, RAX	# spill

3d0     B35: #	out( N393 ) <- in( B33 B34 )  Freq: 2.00032e-09
3d0     addq    rsp, 48	# Destroy frame
	popq    rbp

3d5     jmp     rethrow_stub

--------------------------------------------------------------------------------
    802  128    b        Bar::testLoop (98 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 128 ------------------------
{method}
 - this oop:          0x0000000115c01690
 - method holder:     'Bar'
 - constants:         0x0000000115c01068 constant pool [97]/operands[10] {0x0000000115c01068} for 'Bar' cache=0x0000000115c01940
 - access:            0xc1000009  public static 
 - name:              'testLoop'
 - signature:         '()V'
 - max stack:         6
 - max locals:        3
 - size of params:    0
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae00: 0x i2c: 0x000000010efe17e0 c2i: 0x000000010efe18c0 c2iUV: 0x000000010efe1886 c2iNCI: 0x000000010efe18fd
 - compiled entry     0x000000010efe18c0
 - code size:         98
 - code start:        0x0000000115c01618
 - code end (excl):   0x0000000115c0167a
 - method data:       0x0000000115c03a38
 - checked ex length: 0
 - linenumber start:  0x0000000115c0167a
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 128 -----------------------
#
#  void (  )
#
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) <- in( B67 B66 B58 B65 B64 B12 B50 B48 B52 B59 B53 B51 B54 B63 B55 B62 B56 B61 B57 B60 )  Freq: 1

000     B1: #	out( B67 B2 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (400 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

00c     movq    R11, java/lang/Class:exact *	# ptr
016     movl    R14, [R11 + #116 (8-bit)]	# compressed ptr ! Field: Bar.a
        nop 	# 6 bytes pad for loops and calls
020     movl    R10, [R12 + R14 << 3 + #12] (compressed oop addressing)	# range
025     NullCheck R14

025     B2: #	out( B49 B3 ) <- in( B1 )  Freq: 0.999999
025     movl    R9, [R11 + #124 (8-bit)]	# compressed ptr ! Field: Bar.c
029     movl    R8, [R11 + #120 (8-bit)]	# compressed ptr ! Field: Bar.b
02d     decode_heap_oop_not_null RAX,R14
031     # TLS is in R15
031     xorl    R13, R13	# int
034     cmpl    R10, #8
038     jl     B49  P=0.001043 C=6711.000000

03e     B3: #	out( B66 B4 ) <- in( B2 )  Freq: 0.998956
        nop 	# 2 bytes pad for loops and calls
040     movl    R11, [R12 + R8 << 3 + #12] (compressed oop addressing)	# range
045     NullCheck R8

045     B4: #	out( B66 B5 ) <- in( B3 )  Freq: 0.998955
045     movl    RBP, [R12 + R9 << 3 + #12] (compressed oop addressing)	# range
04a     NullCheck R9

04a     B5: #	out( B7 ) <- in( B4 )  Freq: 0.998954
04a     movl    RCX, R10	# spill
04d     addl    RCX, #-8	# int
050     decode_heap_oop_not_null RDX,R8
054     movdl   XMM0, R8	# spill
059     decode_heap_oop_not_null R8,R9
05d     movdl   XMM1, R9	# spill
062     movl    R9, RBP	# spill
065     addl    R9, #-8	# int
069     movdl   XMM3, R11	# spill
06e     addl    R11, #-8	# int
072     xorl    RBX, RBX	# int
074     jmp,s   B7
        nop 	# 10 bytes pad for loops and calls

080     B6: #	out( B7 ) <- in( B11 ) top-of-loop Freq: 954.929
080     movl    RBX, RDI	# spill

082     B7: #	out( B50 B8 ) <- in( B5 B6 ) Loop( B7-B6 inner partial_peel ) Freq: 955.928
082     cmpl    RBX, RCX
084     jg     B50  P=0.000000 C=6701.000000

08a     B8: #	out( B51 B9 ) <- in( B7 )  Freq: 955.927
08a     movslq  RDI, RBX	# i2l
08d     load_vector XMM2,[RAX + #16 + RDI << #2]
093     cmpl    RBX, R11
096     jg     B51  P=0.000000 C=6701.000000

09c     B9: #	out( B52 B10 ) <- in( B8 )  Freq: 955.927
09c     vpaddd  XMM2,XMM2,[RDX + #16 + RDI << #2]	! add packedI
0a2     cmpl    RBX, R9
0a5     jg     B52  P=0.000000 C=6701.000000

0ab     B10: #	out( B13 B11 ) <- in( B9 )  Freq: 955.926
0ab     store_vector [R8 + #16 + RDI << #2],XMM2
	
0b2     movq    RSI, [R15 + #304 (32-bit)]	# ptr
0b9     movl    RDI, RBX	# spill
0bb     addl    RDI, #8	# int
0be     testl   rax, [RSI]	# Safepoint: poll for GC        # Bar::testLoop @ bci:64 (line 17) L[0]=RDI L[1]=_ L[2]=_
        # OopMap {r8=Oop rdx=Oop rax=Oop r14=NarrowOop xmm0=NarrowOop xmm1=NarrowOop off=190/0xbe}
0c0     addl    RBX, #16	# int
0c3     cmpl    RBX, R10
0c6     jg,s   B13  P=0.001043 C=6704.000000

0c8     B11: #	out( B6 B12 ) <- in( B10 )  Freq: 954.929
0c8     testl   RDI, RDI
0ca     jge,s   B6  P=1.000000 C=6701.000000

0cc     B12: #	out( N1 ) <- in( B11 )  Freq: 0.000477465
0cc     movl    RSI, #-187	# int
0d1     movl    [rsp + #0], RDI	# spill
0d4     movl    [rsp + #4], R10	# spill
0d9     movl    [rsp + #8], RDI	# spill
0dd     movl    [rsp + #12], R14	# spill
        nop 	# 2 bytes pad for loops and calls
0e4     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:52 (line 76) L[0]=rsp + #8 L[1]=#8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #0
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=#Ptr0x00007fafd23a8f70 L[1]=rsp + #12 L[2]=_ L[3]=_
        # Bar::testLoop @ bci:26 (line 18) L[0]=rsp + #0 L[1]=_ L[2]=_
        # OopMap {[12]=NarrowOop off=236/0xec}
0ec     stop	# ShouldNotReachHere

100     B13: #	out( B14 ) <- in( B10 )  Freq: 0.997109
100     movdl   R9, XMM1	# spill
105     movdl   R8, XMM0	# spill

10a     B14: #	out( B48 B15 ) <- in( B13 B49 )  Freq: 0.998152
10a     cmpl    RDI, R10
10d     jge     B48  P=0.500000 C=-1.000000

113     B15: #	out( B53 B16 ) <- in( B14 )  Freq: 0.499076
113     cmpl    RDI, R10	# unsigned
116     jnb,u   B53  P=0.000001 C=-1.000000

11c     B16: #	out( B53 B17 ) <- in( B15 )  Freq: 0.499076
11c     movl    RSI, R10	# spill
11f     decl    RSI	# int
121     cmpl    RSI, R10	# unsigned
124     jnb,u   B53  P=0.000001 C=-1.000000

12a     B17: #	out( B53 B18 ) <- in( B16 )  Freq: 0.499075
12a     movl    RDX, [R12 + R8 << 3 + #12] (compressed oop addressing)	# range
12f     NullCheck R8

12f     B18: #	out( B53 B19 ) <- in( B17 )  Freq: 0.499074
12f     cmpl    RDI, RDX	# unsigned
131     jnb,u   B53  P=0.000001 C=-1.000000

137     B19: #	out( B53 B20 ) <- in( B18 )  Freq: 0.499074
137     cmpl    RSI, RDX	# unsigned
139     jnb,u   B53  P=0.000001 C=-1.000000

13f     B20: #	out( B53 B21 ) <- in( B19 )  Freq: 0.499073
        nop 	# 1 bytes pad for loops and calls
140     movl    RBP, [R12 + R9 << 3 + #12] (compressed oop addressing)	# range
145     NullCheck R9

145     B21: #	out( B53 B22 ) <- in( B20 )  Freq: 0.499073
145     cmpl    RDI, RBP	# unsigned
147     jnb,u   B53  P=0.000001 C=-1.000000

14d     B22: #	out( B53 B23 ) <- in( B21 )  Freq: 0.499072
14d     cmpl    RSI, RBP	# unsigned
14f     jnb,u   B53  P=0.000001 C=-1.000000

155     B23: #	out( B24 ) <- in( B22 )  Freq: 0.499072
155     decode_heap_oop_not_null RCX,R9
159     decode_heap_oop_not_null RBX,R8
15d     movl    R11, RCX	# ptr -> int
160     shrl    R11, #2
164     andl    R11, #7	# int
168     addl    R11, RDI	# int
16b     movl    R9, #3	# int
171     subl    R9, R11	# int
174     andl    R9, #7	# int
178     addl    R9, RDI	# int
17b     incl    R9	# int
17e     cmpl    R9, R10
181     cmovlgt R9, R10	# min
        nop 	# 3 bytes pad for loops and calls

188     B24: #	out( B24 B25 ) <- in( B23 B24 ) Loop( B24-B24 inner pre of N1644) Freq: 4.99072
188     movl    R11, [RBX + #16 + RDI << #2]	# int
18d     addl    R11, [RAX + #16 + RDI << #2]	# int
192     movl    [RCX + #16 + RDI << #2], R11	# int
197     incl    RDI	# int
199     cmpl    RDI, R9
19c     jl,s   B24	# loop end  P=0.900000 C=-1.000000

19e     B25: #	out( B45 B26 ) <- in( B24 )  Freq: 0.499072
19e     movl    R11, R10	# spill
1a1     addl    R11, #-31	# int
1a5     movl    R9, #-2147483648	# int
1ab     cmpl    RSI, R11
1ae     cmovll R11, R9	# signed, int
1b2     cmpl    RDI, R11
1b5     jge     B45  P=0.000001 C=-1.000000

1bb     B26: #	out( B54 B27 ) <- in( B25 )  Freq: 0.499071
1bb     # castII of RDI
1bb     cmpl    RDI, RBP	# unsigned
        nop 	# 3 bytes pad for loops and calls
1c0     jnb,u   B54  P=0.000001 C=-1.000000

1c6     B27: #	out( B55 B28 ) <- in( B26 )  Freq: 0.499071
1c6     cmpl    RDI, RBP	# unsigned
1c8     jnb,u   B55  P=0.000001 C=-1.000000

1ce     B28: #	out( B56 B29 ) <- in( B27 )  Freq: 0.49907
1ce     cmpl    RDI, RDX	# unsigned
1d0     jnb,u   B56  P=0.000001 C=-1.000000

1d6     B29: #	out( B57 B30 ) <- in( B28 )  Freq: 0.49907
1d6     cmpl    RDI, RDX	# unsigned
1d8     jnb,u   B57  P=0.000001 C=-1.000000

1de     B30: #	out( B58 B31 ) <- in( B29 )  Freq: 0.499069
        nop 	# 2 bytes pad for loops and calls
1e0     cmpl    RDI, R10	# unsigned
1e3     jnb,u   B58  P=0.000001 C=-1.000000

1e9     B31: #	out( B59 B32 ) <- in( B30 )  Freq: 0.499069
1e9     cmpl    RDI, R10	# unsigned
1ec     jnb,u   B59  P=0.000001 C=-1.000000

1f2     B32: #	out( B60 B33 ) <- in( B31 )  Freq: 0.499068
1f2     cmpl    RDI, R10	# unsigned
1f5     jnb,u   B60  P=0.000001 C=-1.000000

1fb     B33: #	out( B61 B34 ) <- in( B32 )  Freq: 0.499068
1fb     movl    R8, RDI	# spill
1fe     addl    R8, #31	# int
202     cmpl    R8, R10	# unsigned
205     jnb,u   B61  P=0.000001 C=-1.000000

20b     B34: #	out( B62 B35 ) <- in( B33 )  Freq: 0.499067
20b     cmpl    RDI, RDX	# unsigned
20d     jnb,u   B62  P=0.000001 C=-1.000000

213     B35: #	out( B63 B36 ) <- in( B34 )  Freq: 0.499067
213     cmpl    R8, RDX	# unsigned
216     jnb,u   B63  P=0.000001 C=-1.000000

21c     B36: #	out( B64 B37 ) <- in( B35 )  Freq: 0.499066
        nop 	# 4 bytes pad for loops and calls
220     cmpl    RDI, RBP	# unsigned
222     jnb,u   B64  P=0.000001 C=-1.000000

228     B37: #	out( B65 B38 ) <- in( B36 )  Freq: 0.499066
228     cmpl    R8, RBP	# unsigned
22b     jnb,u   B65  P=0.000001 C=-1.000000

231     B38: #	out( B39 ) <- in( B37 )  Freq: 0.499065
231     movl    RDX, #32000	# int

236     B39: #	out( B40 ) <- in( B38 B41 ) Loop( B39-B41 ) Freq: 4.99065
236     movl    RBP, R11	# spill
239     subl    RBP, RDI	# int
23b     cmpl    R11, RDI
23e     cmovll RBP, R13	# signed, int
242     cmpl    RBP, #32000	# unsigned
248     cmovlnbe RBP, RDX	# unsigned, int
24b     addl    RBP, RDI	# int
        nop 	# 3 bytes pad for loops and calls

250     B40: #	out( B40 B41 ) <- in( B39 B40 ) Loop( B40-B40 inner main of N257 strip mined) Freq: 49.9065
250     load_vector XMM0,[RBX + #16 + RDI << #2]
256     vpaddd  XMM0,XMM0,[RAX + #16 + RDI << #2]	! add packedI
25c     store_vector [RCX + #16 + RDI << #2],XMM0
	
262     movslq  R8, RDI	# i2l
265     load_vector XMM0,[RBX + #48 + R8 << #2]
26c     vpaddd  XMM0,XMM0,[RAX + #48 + R8 << #2]	! add packedI
273     store_vector [RCX + #48 + R8 << #2],XMM0
	
27a     load_vector XMM0,[RBX + #80 + R8 << #2]
281     vpaddd  XMM0,XMM0,[RAX + #80 + R8 << #2]	! add packedI
288     store_vector [RCX + #80 + R8 << #2],XMM0
	
28f     load_vector XMM0,[RBX + #112 + R8 << #2]
296     vpaddd  XMM0,XMM0,[RAX + #112 + R8 << #2]	! add packedI
29d     store_vector [RCX + #112 + R8 << #2],XMM0
	
2a4     addl    RDI, #32	# int
2a7     cmpl    RDI, RBP
2a9     jl,s   B40	# loop end  P=0.900000 C=-1.000000

2ab     B41: #	out( B39 B42 ) <- in( B40 )  Freq: 4.99065
2ab     movq    R8, [R15 + #304 (32-bit)]	# ptr
2b2     testl   rax, [R8]	# Safepoint: poll for GC        # Bar::testLoop @ bci:94 (line 23) L[0]=RDI L[1]=_ L[2]=_
        # OopMap {rcx=Oop rbx=Oop rax=Oop off=690/0x2b2}
2b5     cmpl    RDI, R11
2b8     jl     B39  P=0.900000 C=-1.000000

2be     B42: #	out( B45 B43 ) <- in( B41 )  Freq: 0.499065
2be     movl    R11, R10	# spill
2c1     addl    R11, #-7	# int
2c5     cmpl    RSI, R11
2c8     cmovll R11, R9	# signed, int
2cc     cmpl    RDI, R11
2cf     jge,s   B45  P=0.500000 C=-1.000000

2d1     B43: #	out( B44 ) <- in( B42 )  Freq: 0.249533
2d1     # castII of RDI
        nop 	# 3 bytes pad for loops and calls

2d4     B44: #	out( B44 B45 ) <- in( B43 B44 ) Loop( B44-B44 inner post of N2362) Freq: 2.49533
2d4     load_vector XMM0,[RBX + #16 + RDI << #2]
2da     vpaddd  XMM0,XMM0,[RAX + #16 + RDI << #2]	! add packedI
2e0     store_vector [RCX + #16 + RDI << #2],XMM0
	
2e6     addl    RDI, #8	# int
2e9     cmpl    RDI, R11
2ec     jl,s   B44	# loop end  P=0.900000 C=-1.000000

2ee     B45: #	out( B48 B46 ) <- in( B25 B44 B42 )  Freq: 0.499066
2ee     cmpl    RDI, R10
2f1     jge,s   B48  P=0.500000 C=-1.000000

2f3     B46: #	out( B47 ) <- in( B45 )  Freq: 0.249533
2f3     # castII of RDI
        nop 	# 1 bytes pad for loops and calls

2f4     B47: #	out( B47 B48 ) <- in( B46 B47 ) Loop( B47-B47 inner post of N1644) Freq: 2.49533
2f4     movl    R8, [RBX + #16 + RDI << #2]	# int
2f9     addl    R8, [RAX + #16 + RDI << #2]	# int
2fe     movl    [RCX + #16 + RDI << #2], R8	# int
303     incl    RDI	# int
305     cmpl    RDI, R10
308     jl,s   B47	# loop end  P=0.900000 C=-1.000000

30a     B48: #	out( N1 ) <- in( B47 B45 B14 )  Freq: 0.998142
30a     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	cmpq     rsp, poll_offset[r15_thread] 
	ja       #safepoint_stub	# Safepoint: poll for GC

31f     ret

320     B49: #	out( B14 ) <- in( B2 )  Freq: 0.00104306
320     xorl    RDI, RDI	# int
322     jmp     B14

327     B50: #	out( N1 ) <- in( B7 )  Freq: 0.000455822
327     movl    RSI, #-187	# int
32c     movl    [rsp + #0], RBX	# spill
32f     movl    [rsp + #4], R10	# spill
334     movl    [rsp + #8], RBX	# spill
338     movl    [rsp + #12], RCX	# spill
33c     movl    [rsp + #16], R14	# spill
        nop 	# 3 bytes pad for loops and calls
344     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #8 L[1]=#8 L[2]=rsp + #4 L[3]=_ STK[0]=rsp + #0 STK[1]=rsp + #12
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=#Ptr0x00007fafd23a8f70 L[1]=rsp + #16 L[2]=_ L[3]=_
        # Bar::testLoop @ bci:26 (line 18) L[0]=rsp + #0 L[1]=_ L[2]=_
        # OopMap {[16]=NarrowOop off=844/0x34c}
34c     stop	# ShouldNotReachHere

360     B51: #	out( N1 ) <- in( B8 )  Freq: 0.000455822
360     movl    RSI, #-187	# int
365     movl    [rsp + #0], RBX	# spill
368     movl    [rsp + #4], RBX	# spill
36c     movl    [rsp + #8], R11	# spill
371     vmovdqu [rsp + 32],XMM2	# spill
377     movss   [rsp + #12], XMM0	# spill
37d     movss   [rsp + #16], XMM3	# spill
        nop 	# 1 bytes pad for loops and calls
384     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #4 L[1]=#8 L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #0 STK[1]=rsp + #8
        # jdk.incubator.vector.IntVector::fromArray @ bci:9 (line 2689) L[0]=#Ptr0x00007fafd23a8f70 L[1]=rsp + #12 L[2]=_ L[3]=_
        # Bar::testLoop @ bci:37 (line 19) L[0]=rsp + #0 L[1]=#ScObj0 L[2]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #32 }
        # OopMap {[12]=NarrowOop off=908/0x38c}
38c     stop	# ShouldNotReachHere

3a0     B52: #	out( N1 ) <- in( B9 )  Freq: 0.000455821
3a0     movl    RSI, #-187	# int
3a5     movl    [rsp + #4], RBX	# spill
3a9     movl    [rsp + #8], RBX	# spill
3ad     movl    [rsp + #12], R9	# spill
3b2     vmovdqu [rsp + 32],XMM2	# spill
3b8     movss   [rsp + #16], XMM1	# spill
        nop 	# 2 bytes pad for loops and calls
3c0     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize @ bci:59 (line 76) L[0]=rsp + #8 L[1]=#8 L[2]=RBP L[3]=_ STK[0]=rsp + #4 STK[1]=rsp + #12
        # jdk.incubator.vector.IntVector::intoArray @ bci:7 (line 2960) L[0]=#ScObj0 L[1]=rsp + #16 L[2]=_ L[3]=_
        # ScObj0 jdk/incubator/vector/Int256Vector={ [payload :0]=rsp + #32 }
        # Bar::testLoop @ bci:50 (line 20) L[0]=rsp + #4 L[1]=_ L[2]=_
        # OopMap {[16]=NarrowOop off=968/0x3c8}
3c8     stop	# ShouldNotReachHere

3dc     B53: #	out( N1 ) <- in( B22 B15 B16 B20 B21 B17 B18 B19 )  Freq: 4.04561e-06
3dc     movl    RSI, #-138	# int
3e1     movl    [rsp + #0], RDI	# spill
3e4     movl    [rsp + #4], R10	# spill
        nop 	# 3 bytes pad for loops and calls
3ec     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # Bar::testLoop @ bci:72 (line 23) L[0]=rsp + #0 L[1]=_ L[2]=_ STK[0]=rsp + #0 STK[1]=rsp + #4
        # OopMap {off=1012/0x3f4}
3f4     stop	# ShouldNotReachHere

408     B54: #	out( N1 ) <- in( B26 )  Freq: 5.05699e-07
408     stop	# ShouldNotReachHere

41c     B55: #	out( N1 ) <- in( B27 )  Freq: 5.05698e-07
41c     stop	# ShouldNotReachHere

430     B56: #	out( N1 ) <- in( B28 )  Freq: 5.05698e-07
430     stop	# ShouldNotReachHere

444     B57: #	out( N1 ) <- in( B29 )  Freq: 5.05697e-07
444     stop	# ShouldNotReachHere

458     B58: #	out( N1 ) <- in( B30 )  Freq: 5.05697e-07
458     stop	# ShouldNotReachHere

46c     B59: #	out( N1 ) <- in( B31 )  Freq: 5.05696e-07
46c     stop	# ShouldNotReachHere

480     B60: #	out( N1 ) <- in( B32 )  Freq: 5.05696e-07
480     stop	# ShouldNotReachHere

494     B61: #	out( N1 ) <- in( B33 )  Freq: 5.05695e-07
494     stop	# ShouldNotReachHere

4a8     B62: #	out( N1 ) <- in( B34 )  Freq: 5.05695e-07
4a8     stop	# ShouldNotReachHere

4bc     B63: #	out( N1 ) <- in( B35 )  Freq: 5.05694e-07
4bc     stop	# ShouldNotReachHere

4d0     B64: #	out( N1 ) <- in( B36 )  Freq: 5.05693e-07
4d0     stop	# ShouldNotReachHere

4e4     B65: #	out( N1 ) <- in( B37 )  Freq: 5.05693e-07
4e4     stop	# ShouldNotReachHere

4f8     B66: #	out( N1 ) <- in( B4 B3 )  Freq: 2.02444e-06
4f8     movl    RSI, #-138	# int
4fd     movl    RBP, R10	# spill
500     call,static  wrapper for: uncommon_trap(reason='predicate' action='maybe_recompile' debug_id='0')
        # Bar::testLoop @ bci:16 (line 17) L[0]=#0 L[1]=_ L[2]=_ STK[0]=#8 STK[1]=RBP
        # OopMap {off=1288/0x508}
508     stop	# ShouldNotReachHere

51c     B67: #	out( N1 ) <- in( B1 )  Freq: 1.01328e-06
51c     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
524     call,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile' debug_id='0')
        # Bar::testLoop @ bci:15 (line 17) L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=1324/0x52c}
52c     stop	# ShouldNotReachHere

--------------------------------------------------------------------------------
    842  129 %  b        Bar::main @ 41 (89 bytes)

============================= C2-compiled nmethod ==============================
----------------------- MetaData before Compile_id = 129 ------------------------
{method}
 - this oop:          0x0000000115c017b8
 - method holder:     'Bar'
 - constants:         0x0000000115c01068 constant pool [97]/operands[10] {0x0000000115c01068} for 'Bar' cache=0x0000000115c01940
 - access:            0xc1000009  public static 
 - name:              'main'
 - signature:         '([Ljava/lang/String;)V'
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010ef17260
 - adapters:          AHE@0x00007fafcf81ae50: 0xb0000000 i2c: 0x000000010efe1460 c2i: 0x000000010efe1544 c2iUV: 0x000000010efe150a c2iNCI: 0x000000010efe1581
 - compiled entry     0x000000010efe1544
 - code size:         89
 - code start:        0x0000000115c01748
 - code end (excl):   0x0000000115c017a1
 - method data:       0x0000000115c01c48
 - checked ex length: 0
 - linenumber start:  0x0000000115c017a1
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 129 -----------------------
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N69: #	out( B1 ) <- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B4 ) <- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

01c     movl    RBP, [RSI]	# int
01e     movq    RDI, RSI	# spill
021     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
02e     jmp,s   B4

030     B2: #	out( B6 B3 ) <- in( B4 ) top-of-loop Freq: 95448.7
        nop 	# 3 bytes pad for loops and calls
033     call,static  Bar::testLoop
        # Bar::main @ bci:47 (line 38) L[0]=_ L[1]=RBP
        # OopMap {off=56/0x38}

038     B3: #	out( B4 ) <- in( B2 )  Freq: 95446.7
        # Block is sole successor of call
038     # TLS is in R15
038     movq    R10, [R15 + #304 (32-bit)]	# ptr
03f     incl    RBP	# int
041     testl   rax, [R10]	# Safepoint: poll for GC        # Bar::main @ bci:53 (line 37) L[0]=_ L[1]=RBP
        # OopMap {off=65/0x41}

044     B4: #	out( B2 B5 ) <- in( B1 B3 ) Loop( B4-B3 inner ) Freq: 95448.7
044     cmpl    RBP, #1000000
04a     jl,s   B2  P=1.000000 C=11264.000000

04c     B5: #	out( N69 ) <- in( B4 )  Freq: 0.0455135
04c     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
053     call,static  wrapper for: uncommon_trap(reason='unstable_if' action='reinterpret' debug_id='0')
        # Bar::main @ bci:44 (line 37) L[0]=_ L[1]=RBP STK[0]=RBP STK[1]=#1000000
        # OopMap {off=88/0x58}
058     stop	# ShouldNotReachHere

06c     B6: #	out( N69 ) <- in( B2 )  Freq: 0.954486
06c     # exception oop is in rax; no code emitted
06c     movq    RSI, RAX	# spill
06f     addq    rsp, 32	# Destroy frame
	popq    rbp

074     jmp     rethrow_stub

--------------------------------------------------------------------------------
   2031  129 %           Bar::main @ 41 (89 bytes)   made not entrant
   2034  130     n       java.lang.invoke.MethodHandle::invokeBasic(I)J (native)   
   2035  131     n       java.lang.invoke.MethodHandle::linkToSpecial(LIL)J (native)   (static)
   2035  132     n       java.lang.invoke.MethodHandle::invokeBasic(I)L (native)   
   2036  133     n       java.lang.invoke.MethodHandle::linkToSpecial(LIL)L (native)   (static)
b: 0
c: 0
